import { z } from 'zod';

// üè∑Ô∏è –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
export type SubscriptionPlan = 'TRIAL' | 'BASIC' | 'PRO' | 'ENTERPRISE';
export type SubscriptionStatus = 'TRIAL' | 'ACTIVE' | 'CANCELLED' | 'PAST_DUE' | 'PAUSED';

// üìä Zod —Å—Ö–µ–º—ã –¥–ª—è runtime –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export const SubscriptionPlanSchema = z.enum(['TRIAL', 'BASIC', 'PRO', 'ENTERPRISE']);
export const SubscriptionStatusSchema = z.enum(['TRIAL', 'ACTIVE', 'CANCELLED', 'PAST_DUE', 'PAUSED']);

export const SubscriptionSchema = z.object({
  id: z.string(),
  plan: SubscriptionPlanSchema,
  status: SubscriptionStatusSchema,
  currentPeriodStart: z.string().optional(),
  currentPeriodEnd: z.string().optional(),
  trialEndsAt: z.string().optional(),
  cancelAtPeriodEnd: z.boolean().optional(),
  createdAt: z.string(),
  updatedAt: z.string().optional(),
});

export const SubscriptionResponseSchema = z.object({
  subscription: SubscriptionSchema.nullable(),
  success: z.boolean(),
  message: z.string().optional(),
});

export const CreateSubscriptionRequestSchema = z.object({
  plan: SubscriptionPlanSchema,
  successUrl: z.string().optional(),
  cancelUrl: z.string().optional(),
});

export const CreateSubscriptionResponseSchema = z.object({
  url: z.string(),
  sessionId: z.string().optional(),
  subscriptionId: z.string().optional(),
  success: z.boolean(),
  message: z.string().optional(),
});

// üé® TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–∏–Ωferred –æ—Ç Zod —Å—Ö–µ–º)
export type Subscription = z.infer<typeof SubscriptionSchema>;
export type SubscriptionResponse = z.infer<typeof SubscriptionResponseSchema>;
export type CreateSubscriptionRequest = z.infer<typeof CreateSubscriptionRequestSchema>;
export type CreateSubscriptionResponse = z.infer<typeof CreateSubscriptionResponseSchema>;

// üí∞ –ü–ª–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
export interface Plan {
  id: SubscriptionPlan;
  name: string;
  description: string;
  price: number;
  currency: string;
  popular?: boolean;
  features: string[];
}

// üìã –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–ª–∞–Ω–æ–≤
export const PLAN_DETAILS: Record<SubscriptionPlan, Plan> = {
  TRIAL: {
    id: 'TRIAL',
    name: 'Trial',
    description: '14-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
    price: 0,
    currency: 'EUR',
    features: ['–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏', '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', '14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ']
  },
  BASIC: {
    id: 'BASIC',
    name: 'Basic',
    description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–∞–ª–æ–Ω–æ–≤',
    price: 30,
    currency: 'EUR',
    features: [
      '–î–æ 3 –º–∞—Å—Ç–µ—Ä–æ–≤',
      '–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å',
      'CRM –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–æ 500)',
      '–ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      'Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
    ]
  },
  PRO: {
    id: 'PRO',
    name: 'Pro',
    description: '–î–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö —Å–∞–ª–æ–Ω–æ–≤',
    price: 75,
    currency: 'EUR',
    popular: true,
    features: [
      '–î–æ 10 –º–∞—Å—Ç–µ—Ä–æ–≤',
      '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Basic',
      'SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      '–ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
    ]
  },
  ENTERPRISE: {
    id: 'ENTERPRISE',
    name: 'Enterprise',
    description: '–î–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤ –∏ —Å–µ—Ç–µ–π',
    price: 150,
    currency: 'EUR',
    features: [
      '–ë–µ–∑–ª–∏–º–∏—Ç –º–∞—Å—Ç–µ—Ä–æ–≤',
      '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro',
      '–ú—É–ª—å—Ç–∏—Ñ–∏–ª–∏–∞–ª—å–Ω–æ—Å—Ç—å',
      'API –¥–æ—Å—Ç—É–ø',
      '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
      'SLA 99.9%'
    ]
  }
};

// üé® –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è UI
export const getStatusBadgeVariant = (status: SubscriptionStatus): 'default' | 'secondary' | 'destructive' | 'outline' => {
  switch (status) {
    case 'TRIAL':
      return 'secondary';
    case 'ACTIVE':
      return 'default';
    case 'CANCELLED':
    case 'PAST_DUE':
      return 'destructive';
    case 'PAUSED':
      return 'outline';
    default:
      return 'outline';
  }
};

export const getStatusText = (status: SubscriptionStatus): string => {
  switch (status) {
    case 'TRIAL':
      return '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
    case 'ACTIVE':
      return '–ê–∫—Ç–∏–≤–Ω–∞';
    case 'CANCELLED':
      return '–û—Ç–º–µ–Ω–µ–Ω–∞';
    case 'PAST_DUE':
      return '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞';
    case 'PAUSED':
      return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
};

export const formatPrice = (price: number, currency: string = 'EUR'): string => {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency,
  }).format(price);
};

export const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

export const isTrialExpiringSoon = (subscription: Subscription, daysThreshold: number = 3): boolean => {
  if (subscription.status !== 'TRIAL' || !subscription.trialEndsAt) {
    return false;
  }

  const trialEnd = new Date(subscription.trialEndsAt);
  const now = new Date();
  const daysLeft = Math.ceil((trialEnd.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

  return daysLeft <= daysThreshold && daysLeft > 0;
};

export const canUpgradeTo = (currentPlan: SubscriptionPlan, targetPlan: SubscriptionPlan): boolean => {
  const planOrder: Record<SubscriptionPlan, number> = {
    TRIAL: 0,
    BASIC: 1,
    PRO: 2,
    ENTERPRISE: 3
  };

  return planOrder[targetPlan] > planOrder[currentPlan];
};