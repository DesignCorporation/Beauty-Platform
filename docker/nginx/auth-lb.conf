# BEAUTY PLATFORM - AUTH SERVICE LOAD BALANCER
# Enterprise nginx config with health checks, failover, and monitoring

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance optimizations
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format for monitoring
    log_format beauty_auth '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" '
                          'uht="$upstream_header_time" urt="$upstream_response_time" '
                          'upstream="$upstream_addr" instance="$upstream_instance"';
    
    access_log /var/log/nginx/access.log beauty_auth;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        application/json
        application/javascript
        text/css
        text/plain
        text/xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=auth_login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=auth_api:10m rate=30r/m;
    
    # Upstream servers with health checks
    upstream auth_backend {
        # Load balancing method
        least_conn;
        
        # Auth service instances
        server auth-service-1:6021 max_fails=3 fail_timeout=30s;
        server auth-service-2:6021 max_fails=3 fail_timeout=30s;
        
        # Keep alive connections to upstreams
        keepalive 32;
    }
    
    # Health check endpoint
    server {
        listen 81;
        server_name _;
        
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Main load balancer server
    server {
        listen 80;
        server_name _;
        
        # Security settings
        server_tokens off;
        client_max_body_size 10M;
        client_body_timeout 30s;
        client_header_timeout 30s;
        
        # Health check (for external monitoring)
        location /health {
            access_log off;
            
            # Check if any upstream is available
            proxy_pass http://auth_backend/health;
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_connect_timeout 2s;
            proxy_read_timeout 5s;
            proxy_send_timeout 5s;
            
            add_header X-Load-Balancer "nginx-auth-lb" always;
        }
        
        # Auth login endpoint (stricter rate limiting)
        location /auth/login {
            limit_req zone=auth_login burst=2 nodelay;
            limit_req_status 429;
            
            proxy_pass http://auth_backend;
            proxy_next_upstream error timeout http_502 http_503;
            
            # Headers for upstream identification
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Add upstream instance info to response
            add_header X-Upstream-Instance $upstream_addr always;
            add_header X-Request-ID $request_id always;
        }
        
        # MFA endpoints (medium rate limiting)
        location ~ ^/auth/(mfa|totp|backup-codes) {
            limit_req zone=auth_api burst=10 nodelay;
            limit_req_status 429;
            
            proxy_pass http://auth_backend;
            proxy_next_upstream error timeout http_502 http_503;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
            
            add_header X-Upstream-Instance $upstream_addr always;
        }
        
        # All other auth endpoints
        location /auth/ {
            limit_req zone=auth_api burst=20 nodelay;
            limit_req_status 429;
            
            proxy_pass http://auth_backend;
            proxy_next_upstream error timeout http_502 http_503;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            add_header X-Upstream-Instance $upstream_addr always;
        }
        
        # Default location
        location / {
            proxy_pass http://auth_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 3s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # Monitoring endpoint for load balancer stats
        location /lb-stats {
            access_log off;
            return 200 '{"status":"healthy","upstreams":["auth-service-1","auth-service-2"],"method":"least_conn"}';
            add_header Content-Type application/json;
            add_header X-Load-Balancer "nginx-auth-lb";
        }
    }
}