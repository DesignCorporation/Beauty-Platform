// Secure Authentication Routes with httpOnly Cookies
// Beauty Platform Auth Service - Enterprise Security 2024

import express from 'express'
import bcrypt from 'bcrypt'
import rateLimit from 'express-rate-limit'
import { tenantPrisma } from '@beauty-platform/database'
import { 
  generateTokenPair, 
  verifyAccessToken, 
  verifyRefreshToken,
  extractTokenFromRequest,
  extractRefreshTokenFromRequest
} from '../utils/jwt'

const router: express.Router = express.Router()

// Rate limiting –¥–ª—è auth endpoints
const authRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 5, // 5 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ–∫–Ω–æ
  message: {
    success: false,
    error: 'Too many login attempts, please try again later',
    code: 'RATE_LIMIT_EXCEEDED'
  },
  standardHeaders: true,
  legacyHeaders: false
})

const refreshRateLimit = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  max: 20, // 20 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è refresh
  message: {
    success: false,
    error: 'Too many token refresh attempts',
    code: 'RATE_LIMIT_EXCEEDED'
  }
})

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö cookies
 */
const COOKIE_CONFIG = {
  httpOnly: true, // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
  secure: process.env.NODE_ENV === 'production', // HTTPS —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  sameSite: 'strict' as const, // CSRF protection
  domain: process.env.NODE_ENV === 'production' ? '.beauty.designcorp.eu' : undefined,
  path: '/'
}

/**
 * POST /auth/login
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –≤—ã–¥–∞—á–µ–π httpOnly cookies
 */
router.post('/login', authRateLimit, async (req, res): Promise<void> => {
  try {
    const { email, password } = req.body

    if (!email || !password) {
      res.status(400).json({
        success: false,
        error: 'MISSING_CREDENTIALS',
        message: 'Email and password required'
      })
      return
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await tenantPrisma(null).user.findUnique({
      where: { email: email.toLowerCase() },
      include: {
        tenant: {
          select: { id: true, name: true, slug: true }
        }
      }
    })

    if (!user) {
      res.status(401).json({
        success: false,
        error: 'INVALID_CREDENTIALS',
        message: 'Invalid email or password'
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const validPassword = await bcrypt.compare(password, user.password || '')
    if (!validPassword) {
      res.status(401).json({
        success: false,
        error: 'INVALID_CREDENTIALS',
        message: 'Invalid email or password'
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
    if (!user.isActive) {
      res.status(403).json({
        success: false,
        error: 'ACCOUNT_DISABLED',
        message: 'Account is disabled'
      })
      return
    }

    // üõ°Ô∏è MFA CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ MFA –¥–ª—è SUPER_ADMIN
    console.log('üîê MFA Check (auth-secure):', {
      role: user.role,
      mfaEnabled: user.mfaEnabled,
      shouldRequireMFA: user.role === 'SUPER_ADMIN' && user.mfaEnabled
    })
    
    if (user.role === 'SUPER_ADMIN' && user.mfaEnabled) {
      console.log('üõ°Ô∏è MFA REQUIRED: Returning MFA challenge for', user.email)
      res.status(200).json({
        success: false,
        error: 'MFA verification required',
        code: 'MFA_REQUIRED',
        mfaRequired: true,
        userId: user.id,
        email: user.email,
        role: user.role
      })
      return
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokenPair = generateTokenPair({
      userId: user.id,
      email: user.email,
      role: user.role,
      tenantId: user.tenantId || undefined
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –≤ –ë–î
    await tenantPrisma(null).refreshToken.create({
      data: {
        token: tokenPair.refreshToken,
        userId: user.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
      }
    })

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º httpOnly cookies
    res.cookie('beauty_access_token', tokenPair.accessToken, {
      ...COOKIE_CONFIG,
      maxAge: 12 * 60 * 60 * 1000 // 12 —á–∞—Å–æ–≤
    })

    res.cookie('beauty_refresh_token', tokenPair.refreshToken, {
      ...COOKIE_CONFIG,
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ë–ï–ó —Ç–æ–∫–µ–Ω–æ–≤!)
    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        tenantId: user.tenantId || undefined,
        tenant: user.tenant
      }
    })

  } catch (error) {
    console.error('Login error:', error)
    res.status(500).json({
      success: false,
      error: 'INTERNAL_ERROR',
      message: 'Login failed'
    })
  }
})

/**
 * POST /auth/refresh
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh —Ç–æ–∫–µ–Ω –∏–∑ cookie
 */
router.post('/refresh', refreshRateLimit, async (req, res): Promise<void> => {
  try {
    const refreshToken = extractRefreshTokenFromRequest(req)

    if (!refreshToken) {
      res.status(401).json({
        success: false,
        error: 'NO_REFRESH_TOKEN',
        message: 'Refresh token required'
      })
      return
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º refresh —Ç–æ–∫–µ–Ω
    try {
      verifyRefreshToken(refreshToken)
    } catch (error) {
      res.status(401).json({
        success: false,
        error: 'INVALID_REFRESH_TOKEN',
        message: 'Invalid or expired refresh token'
      })
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î –∏ –Ω–µ –æ—Ç–æ–∑–≤–∞–Ω
    const storedToken = await tenantPrisma(null).refreshToken.findUnique({
      where: { token: refreshToken },
      include: { 
        user: { 
          include: { 
            tenant: { select: { id: true, name: true, slug: true } }
          } 
        } 
      }
    })

    if (!storedToken || storedToken.expiresAt < new Date()) {
      res.status(401).json({
        success: false,
        error: 'INVALID_REFRESH_TOKEN',
        message: 'Refresh token expired or revoked'
      })
      return
    }

    const user = storedToken.user

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
    const tokenPair = generateTokenPair({
      userId: user.id,
      email: user.email,
      role: user.role,
      tenantId: user.tenantId || undefined
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º access token cookie
    res.cookie('beauty_access_token', tokenPair.accessToken, {
      ...COOKIE_CONFIG,
      maxAge: 12 * 60 * 60 * 1000 // 12 —á–∞—Å–æ–≤
    })

    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        tenantId: user.tenantId || undefined,
        tenant: user.tenant
      }
    })

  } catch (error) {
    console.error('Refresh error:', error)
    res.status(401).json({
      success: false,
      error: 'REFRESH_FAILED',
      message: 'Token refresh failed'
    })
  }
})

/**
 * GET /auth/force-logout
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö cookies (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
 */
router.get('/force-logout', async (_req, res) => {
  try {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ cookies —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    res.clearCookie('beauty_access_token', {
      ...COOKIE_CONFIG,
      maxAge: 0
    })
    
    res.clearCookie('beauty_refresh_token', {
      ...COOKIE_CONFIG,
      maxAge: 0
    })
    
    res.clearCookie('beauty_mfa_verified', {
      ...COOKIE_CONFIG,
      maxAge: 0
    })
    
    res.clearCookie('_csrf', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 0
    })
    
    res.json({
      success: true,
      message: 'All authentication cookies cleared'
    })
  } catch (error) {
    console.error('Force logout error:', error)
    res.status(500).json({
      success: false,
      error: 'Failed to clear cookies'
    })
  }
})

/**
 * POST /auth/logout
 * –í—ã—Ö–æ–¥ —Å –æ—Ç–∑—ã–≤–æ–º refresh —Ç–æ–∫–µ–Ω–∞
 */
router.post('/logout', async (req, res) => {
  try {
    const refreshToken = extractRefreshTokenFromRequest(req)
    
    // –£–¥–∞–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω –∏–∑ –ë–î –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (refreshToken) {
      await tenantPrisma(null).refreshToken.deleteMany({
        where: { token: refreshToken }
      })
    }

    // –û—á–∏—â–∞–µ–º cookies
    res.clearCookie('beauty_access_token', {
      ...COOKIE_CONFIG,
      maxAge: 0
    })
    
    res.clearCookie('beauty_refresh_token', {
      ...COOKIE_CONFIG,
      maxAge: 0
    })

    res.json({
      success: true,
      message: 'Logged out successfully'
    })

  } catch (error) {
    console.error('Logout error:', error)
    res.status(500).json({
      success: false,
      error: 'LOGOUT_FAILED',
      message: 'Logout failed'
    })
  }
})

/**
 * GET /auth/me
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
router.get('/me', async (req, res): Promise<void> => {
  try {
    const token = extractTokenFromRequest(req)
    
    if (!token) {
      res.status(401).json({
        success: false,
        error: 'NO_TOKEN',
        message: 'Authentication token required'
      })
      return
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º access —Ç–æ–∫–µ–Ω
    let decoded
    try {
      decoded = verifyAccessToken(token)
    } catch (error) {
      res.status(401).json({
        success: false,
        error: 'INVALID_TOKEN',
        message: 'Invalid or expired token'
      })
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await tenantPrisma(null).user.findUnique({
      where: { id: decoded.userId },
      include: {
        tenant: {
          select: { id: true, name: true, slug: true }
        }
      }
    })

    if (!user || !user.isActive) {
      res.status(401).json({
        success: false,
        error: 'USER_NOT_FOUND',
        message: 'User not found or disabled'
      })
      return
    }

    res.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        tenantId: user.tenantId || undefined,
        tenant: user.tenant
      }
    })

  } catch (error) {
    console.error('Get user error:', error)
    res.status(500).json({
      success: false,
      error: 'INTERNAL_ERROR',
      message: 'Failed to get user info'
    })
  }
})

/**
 * GET /auth/health
 * Health check –¥–ª—è auth service
 */
router.get('/health', (_req, res) => {
  res.json({
    success: true,
    service: 'auth-service',
    version: '1.0.0',
    features: {
      httpOnlyCookies: true,
      jwtValidation: true,
      refreshTokens: true,
      rateLimiting: true,
      securityHeaders: true,
      csrfProtection: true
    },
    timestamp: new Date().toISOString()
  })
})

export default router
