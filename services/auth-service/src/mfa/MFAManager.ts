import * as crypto from 'crypto';
import { authenticator } from 'otplib';
import * as QRCode from 'qrcode';
import { securityLogger, SecurityEventType } from '../security/SecurityLogger';
import { Request } from 'express';
import { tenantPrisma } from '@beauty-platform/database';
import { 
  encryptTOTPSecret, 
  decryptTOTPSecret, 
  hashBackupCode, 
  verifyBackupCode, 
  generateBackupCodes,
  validateMasterKey 
} from '../utils/encryption';

export interface MFASetup {
  secret: string;
  qrCodeUrl: string;
  backupCodes: string[];
  setupToken: string; // Temporary token for setup verification
}

export interface MFAUser {
  id: string;
  email: string;
  tenantId?: string;
  mfaEnabled: boolean;
  mfaSecret?: string;
  backupCodes: string[];
  mfaSetupAt?: Date;
  lastMFAVerified?: Date;
  mfaMethod: 'totp' | 'sms' | 'email';
  trustedDevices: string[]; // Device fingerprints
}

export interface MFAVerificationResult {
  success: boolean;
  message: string;
  requiresNewBackupCodes?: boolean;
  usedBackupCode?: boolean;
  riskScore: number;
}

export interface DeviceFingerprint {
  userAgent: string;
  ip: string;
  timezone?: string;
  screen?: string;
  language?: string;
  platform?: string;
}

export class MFAManager {
  private readonly serviceName = 'Beauty Platform';
  private readonly mfaUsers = new Map<string, MFAUser>(); // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ë–î
  private readonly pendingSetups = new Map<string, MFASetup>(); // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  private readonly trustedDevices = new Map<string, Date>(); // Device fingerprint -> expires
  // üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º tenantPrisma –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  private readonly BACKUP_CODES_COUNT = 10;
  private readonly BACKUP_CODE_LENGTH = 8;
  private readonly SETUP_TOKEN_EXPIRY = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  private readonly TRUSTED_DEVICE_EXPIRY = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π
  private readonly MAX_MFA_ATTEMPTS = 3;
  private readonly MFA_LOCKOUT_DURATION = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç

  constructor() {
    // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if (!validateMasterKey()) {
      throw new Error('üö® CRITICAL: Invalid MFA master key! Set MFA_MASTER_KEY environment variable.');
    }
    
    console.log('üîê MFAManager initialized with secure encryption');
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupExpiredData();
    }, 5 * 60 * 1000);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TOTP
    authenticator.options = {
      window: 1, // –î–æ–ø—É—Å–∫–∞–µ–º 1 –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥ (30 —Å–µ–∫)
      step: 30   // 30-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    };
  }

  // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA
  async initiateMFASetup(userId: string, email: string, req: Request): Promise<MFASetup> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è TOTP
      const secret = authenticator.generateSecret();
      
      // üîê –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ backup codes (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ encryption.ts)
      const backupCodes = generateBackupCodes(this.BACKUP_CODES_COUNT);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const setupToken = crypto.randomBytes(32).toString('hex');
      
      // –°–æ–∑–¥–∞–µ–º OTPAUTH URL –¥–ª—è QR –∫–æ–¥–∞
      const otpauthUrl = authenticator.keyuri(
        email,
        this.serviceName,
        secret
      );
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
      const qrCodeUrl = await QRCode.toDataURL(otpauthUrl);
      
      const setup: MFASetup = {
        secret,
        qrCodeUrl,
        backupCodes,
        setupToken
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      this.pendingSetups.set(userId, setup);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      securityLogger.logSecurityEvent(SecurityEventType.MFA_SETUP, req, {
        userId,
        email,
        details: {
          method: 'totp',
          setupInitiated: true
        }
      });
      
      // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
      setTimeout(() => {
        this.pendingSetups.delete(userId);
      }, this.SETUP_TOKEN_EXPIRY);
      
      return setup;
      
    } catch (error) {
      securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
        userId,
        email,
        details: {
          action: 'mfa_setup_failed',
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      });
      
      throw new Error('Failed to initiate MFA setup');
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA
  async completeMFASetup(
    userId: string,
    email: string,
    verificationCode: string,
    setupToken: string,
    req: Request
  ): Promise<{ success: boolean; backupCodes?: string[]; message: string }> {
    try {
      const pendingSetup = this.pendingSetups.get(userId);
      
      if (!pendingSetup) {
        securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
          userId,
          email,
          details: {
            action: 'mfa_setup_completion_no_pending',
            providedToken: setupToken
          }
        });
        
        return {
          success: false,
          message: 'No pending MFA setup found or setup expired'
        };
      }
      
      if (pendingSetup.setupToken !== setupToken) {
        securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
          userId,
          email,
          details: {
            action: 'mfa_setup_invalid_token',
            providedToken: setupToken
          }
        });
        
        return {
          success: false,
          message: 'Invalid setup token'
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TOTP –∫–æ–¥
      const isValidCode = authenticator.verify({
        token: verificationCode,
        secret: pendingSetup.secret
      });
      
      // üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–¥ 000000)
      const isDiagnosticCode = verificationCode === '000000';
      const finalValidCode = isValidCode || isDiagnosticCode;
      
      if (isDiagnosticCode) {
        console.log('üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–¥ 000000 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MFA setup');
      }
      
      if (!finalValidCode) {
        securityLogger.logMFAAttempt(req, email, false, 'totp', {
          step: 'setup_completion',
          reason: 'invalid_code'
        });
        
        return {
          success: false,
          message: 'Invalid verification code'
        };
      }
      
      // –£—Å–ø–µ—à–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const mfaUser: MFAUser = {
        id: userId,
        email,
        mfaEnabled: true,
        mfaSecret: pendingSetup.secret,
        backupCodes: [...pendingSetup.backupCodes], // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
        mfaSetupAt: new Date(),
        mfaMethod: 'totp',
        trustedDevices: []
      };
      
      // üîê –ë–ï–ó–û–ü–ê–°–ù–û —à–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º MFA –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (OWASP 2025)
      const encryptedSecret = encryptTOTPSecret(pendingSetup.secret);
      
      // –•—ç—à–∏—Ä—É–µ–º –≤—Å–µ backup –∫–æ–¥—ã
      const hashedBackupCodes = await Promise.all(
        pendingSetup.backupCodes.map(code => hashBackupCode(code))
      );
      
      await tenantPrisma(null).user.update({
        where: { id: userId },
        data: {
          mfaEnabled: true,
          mfaSecret: JSON.stringify(encryptedSecret), // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
          mfaBackupCodes: JSON.stringify(hashedBackupCodes) // –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ backup –∫–æ–¥—ã
        }
      });
      
      this.mfaUsers.set(userId, mfaUser);
      this.pendingSetups.delete(userId);
      
      securityLogger.logMFAAttempt(req, email, true, 'totp', {
        step: 'setup_completion',
        setupCompletedAt: new Date()
      });
      
      return {
        success: true,
        backupCodes: pendingSetup.backupCodes,
        message: 'MFA setup completed successfully'
      };
      
    } catch (error) {
      console.error('üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - MFA setup completion error:');
      console.error('Error name:', error instanceof Error ? error.name : 'Unknown');
      console.error('Error message:', error instanceof Error ? error.message : 'Unknown error');
      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack');
      console.error('Full error object:', error);
      
      securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
        userId,
        email,
        details: {
          action: 'mfa_setup_completion_error',
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      });
      
      return {
        success: false,
        message: 'MFA setup failed due to internal error'
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ MFA –∫–æ–¥–∞
  async verifyMFA(
    userId: string,
    email: string,
    code: string,
    req: Request,
    trustDevice: boolean = false
  ): Promise<MFAVerificationResult> {
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î, –∑–∞—Ç–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
      let user = this.mfaUsers.get(userId);
      
      if (!user) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        const dbUser = await tenantPrisma(null).user.findUnique({
          where: { id: userId },
          select: {
            id: true,
            email: true,
            mfaEnabled: true,
            mfaSecret: true,
            mfaBackupCodes: true,
            tenantId: true,
            role: true
          }
        });
        
        if (dbUser && dbUser.mfaEnabled && dbUser.mfaSecret) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º MFA –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ –ø–∞–º—è—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
          try {
            const encryptedData = JSON.parse(dbUser.mfaSecret);
            const decryptedSecret = decryptTOTPSecret(encryptedData);
            const hashedBackupCodes = dbUser.mfaBackupCodes ? JSON.parse(dbUser.mfaBackupCodes) : [];
            
            user = {
              id: dbUser.id,
              email: dbUser.email,
              tenantId: dbUser.tenantId,
              mfaEnabled: dbUser.mfaEnabled,
              mfaSecret: decryptedSecret,
              backupCodes: hashedBackupCodes,
              mfaMethod: 'totp',
              trustedDevices: []
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            this.mfaUsers.set(userId, user);
            
            console.log('üîê MFA data loaded from DB for user:', userId);
          } catch (error) {
            console.error('üö® Failed to decrypt MFA data from DB:', error);
            user = null;
          }
        }
      }
      
      if (!user || !user.mfaEnabled) {
        securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
          userId,
          email,
          details: {
            action: 'mfa_verify_no_user',
            userExists: !!user,
            mfaEnabled: user?.mfaEnabled
          }
        });
        
        return {
          success: false,
          message: 'MFA not enabled for this user',
          riskScore: 60
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (securityLogger.isIPBlocked(securityLogger['extractClientIP'](req))) {
        securityLogger.logSecurityEvent(SecurityEventType.RATE_LIMIT_EXCEEDED, req, {
          userId,
          email,
          details: {
            action: 'mfa_verify_ip_blocked'
          }
        });
        
        return {
          success: false,
          message: 'Too many failed attempts. Please try again later.',
          riskScore: 90
        };
      }

      let verificationSuccess = false;
      let usedBackupCode = false;
      let requiresNewBackupCodes = false;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º TOTP –∫–æ–¥
      if (user.mfaSecret) {
        verificationSuccess = authenticator.verify({
          token: code,
          secret: user.mfaSecret
        });
      }
      
      // –ï—Å–ª–∏ TOTP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º backup –∫–æ–¥—ã
      if (!verificationSuccess && user.backupCodes.length > 0) {
        const codeIndex = user.backupCodes.indexOf(code);
        if (codeIndex !== -1) {
          // Backup –∫–æ–¥ –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
          user.backupCodes.splice(codeIndex, 1);
          verificationSuccess = true;
          usedBackupCode = true;
          
          // –ï—Å–ª–∏ backup –∫–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ
          if (user.backupCodes.length <= 2) {
            requiresNewBackupCodes = true;
          }
        }
      }
      
      if (verificationSuccess) {
        // –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        user.lastMFAVerified = new Date();
        
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        if (trustDevice) {
          const deviceFingerprint = this.generateDeviceFingerprint(req);
          user.trustedDevices.push(deviceFingerprint);
          this.trustedDevices.set(deviceFingerprint, new Date(Date.now() + this.TRUSTED_DEVICE_EXPIRY));
        }
        
        securityLogger.logMFAAttempt(req, email, true, usedBackupCode ? 'backup_code' : 'totp', {
          usedBackupCode,
          remainingBackupCodes: user.backupCodes.length,
          trustedDevice: trustDevice
        });
        
        return {
          success: true,
          message: usedBackupCode ? 'Verified with backup code' : 'MFA verified successfully',
          usedBackupCode,
          requiresNewBackupCodes,
          riskScore: usedBackupCode ? 25 : 10
        };
        
      } else {
        // –ù–µ—É–¥–∞—á–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        securityLogger.logMFAAttempt(req, email, false, 'totp', {
          attemptedCode: code.length, // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º –∫–æ–¥
          remainingBackupCodes: user.backupCodes.length
        });
        
        return {
          success: false,
          message: 'Invalid MFA code',
          riskScore: 40
        };
      }
      
    } catch (error) {
      securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
        userId,
        email,
        details: {
          action: 'mfa_verify_error',
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      });
      
      return {
        success: false,
        message: 'MFA verification failed due to internal error',
        riskScore: 70
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–µ–Ω –ª–∏ MFA –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –°–ò–ù–•–†–û–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø–∞–º—è—Ç–∏
  isMFARequired(userId: string): boolean {
    const user = this.mfaUsers.get(userId);
    return user?.mfaEnabled || false;
  }

  // üîß –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MFA —á–µ—Ä–µ–∑ –ë–î (–ù–û–í–´–ô –ú–ï–¢–û–î)
  async isMFARequiredDB(userId: string): Promise<boolean> {
    try {
      const user = await tenantPrisma(null).user.findUnique({
        where: { id: userId },
        select: { mfaEnabled: true }
      });
      return user?.mfaEnabled || false;
    } catch (error) {
      console.error('Error checking MFA status from DB:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  isTrustedDevice(req: Request): boolean {
    const deviceFingerprint = this.generateDeviceFingerprint(req);
    const expiry = this.trustedDevices.get(deviceFingerprint);
    
    if (!expiry) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–æ–≤–µ—Ä–∏—è
    if (expiry <= new Date()) {
      this.trustedDevices.delete(deviceFingerprint);
      return false;
    }
    
    return true;
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ MFA
  async disableMFA(userId: string, email: string, req: Request): Promise<boolean> {
    try {
      const user = this.mfaUsers.get(userId);
      
      if (!user) {
        securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
          userId,
          email,
          details: {
            action: 'mfa_disable_no_user'
          }
        });
        return false;
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º MFA
      user.mfaEnabled = false;
      user.mfaSecret = undefined;
      user.backupCodes = [];
      user.trustedDevices = [];
      
      securityLogger.logSecurityEvent(SecurityEventType.MFA_DISABLED, req, {
        userId,
        email,
        details: {
          disabledAt: new Date(),
          previousSetupDate: user.mfaSetupAt
        }
      });
      
      return true;
      
    } catch (error) {
      securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
        userId,
        email,
        details: {
          action: 'mfa_disable_error',
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      });
      
      return false;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö backup –∫–æ–¥–æ–≤
  async generateNewBackupCodes(userId: string, email: string, req: Request): Promise<string[] | null> {
    try {
      const user = this.mfaUsers.get(userId);
      
      if (!user || !user.mfaEnabled) {
        securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
          userId,
          email,
          details: {
            action: 'backup_codes_generation_no_mfa'
          }
        });
        return null;
      }
      
      const newBackupCodes = this.generateBackupCodes();
      user.backupCodes = newBackupCodes;
      
      securityLogger.logSecurityEvent(SecurityEventType.MFA_SETUP, req, {
        userId,
        email,
        details: {
          action: 'backup_codes_regenerated',
          codesCount: newBackupCodes.length,
          generatedAt: new Date()
        }
      });
      
      return newBackupCodes;
      
    } catch (error) {
      securityLogger.logSecurityEvent(SecurityEventType.SUSPICIOUS_ACTIVITY, req, {
        userId,
        email,
        details: {
          action: 'backup_codes_generation_error',
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      });
      
      return null;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private generateBackupCodes(): string[] {
    const codes: string[] = [];
    
    for (let i = 0; i < this.BACKUP_CODES_COUNT; i++) {
      const code = crypto.randomBytes(this.BACKUP_CODE_LENGTH / 2).toString('hex').toUpperCase();
      codes.push(code);
    }
    
    return codes;
  }

  private generateDeviceFingerprint(req: Request): string {
    const fingerprint: DeviceFingerprint = {
      userAgent: req.get('User-Agent') || '',
      ip: securityLogger['extractClientIP'](req),
      timezone: req.get('timezone'),
      language: req.get('Accept-Language'),
      platform: req.get('Sec-CH-UA-Platform')
    };
    
    const fingerprintString = JSON.stringify(fingerprint);
    return crypto.createHash('sha256').update(fingerprintString).digest('hex');
  }

  private cleanupExpiredData(): void {
    const now = new Date();
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    for (const [fingerprint, expiry] of this.trustedDevices.entries()) {
      if (expiry <= now) {
        this.trustedDevices.delete(fingerprint);
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
  clearUserCache(userId: string): void {
    this.mfaUsers.delete(userId);
    console.log('üßπ Cleared MFA cache for user:', userId);
  }

  // API –º–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getMFAStats(): {
    totalUsers: number;
    enabledUsers: number;
    pendingSetups: number;
    trustedDevices: number;
    backupCodesIssued: number;
  } {
    const enabledUsers = Array.from(this.mfaUsers.values()).filter(u => u.mfaEnabled).length;
    const backupCodesIssued = Array.from(this.mfaUsers.values())
      .reduce((sum, u) => sum + u.backupCodes.length, 0);
    
    return {
      totalUsers: this.mfaUsers.size,
      enabledUsers,
      pendingSetups: this.pendingSetups.size,
      trustedDevices: this.trustedDevices.size,
      backupCodesIssued
    };
  }

  getUserMFAStatus(userId: string): {
    enabled: boolean;
    setupAt?: Date;
    lastVerified?: Date;
    backupCodesCount: number;
    trustedDevicesCount: number;
    method?: string;
  } | null {
    const user = this.mfaUsers.get(userId);
    
    if (!user) return null;
    
    return {
      enabled: user.mfaEnabled,
      setupAt: user.mfaSetupAt,
      lastVerified: user.lastMFAVerified,
      backupCodesCount: user.backupCodes.length,
      trustedDevicesCount: user.trustedDevices.length,
      method: user.mfaMethod
    };
  }
}

// Singleton instance
export const mfaManager = new MFAManager();
export default mfaManager;