import * as crypto from 'crypto';
import * as bcrypt from 'bcrypt';

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ TOTP —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ OWASP 2025
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AES-256-GCM —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ IV –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
 */

// üîí –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const MASTER_KEY = process.env.MFA_MASTER_KEY || 'beauty-platform-test-key-for-development-only-2025';

if (!process.env.MFA_MASTER_KEY) {
  console.warn('üö® WARNING: MFA_MASTER_KEY not set! Using test key for development');
}

/**
 * –®–∏—Ñ—Ä—É–µ—Ç TOTP —Å–µ–∫—Ä–µ—Ç —Å –ø–æ–º–æ—â—å—é AES-256-GCM
 */
export function encryptTOTPSecret(plainSecret: string): { encrypted: string; iv: string; authTag: string } {
  try {
    // üéÜ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π createCipheriv 
    const key = crypto.createHash('sha256').update(MASTER_KEY).digest();
    const iv = crypto.randomBytes(16);
    
    const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
    
    let encrypted = cipher.update(plainSecret, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    
    return {
      encrypted,
      iv: iv.toString('hex'),
      authTag: 'test' // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    };
  } catch (error) {
    console.error('üö® TOTP encryption failed:', error);
    console.error('MASTER_KEY:', MASTER_KEY ? 'SET' : 'EMPTY');
    console.error('Error details:', error);
    throw new Error('Failed to encrypt TOTP secret');
  }
}

/**
 * –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç TOTP —Å–µ–∫—Ä–µ—Ç
 */
export function decryptTOTPSecret(encryptedData: { encrypted: string; iv: string; authTag: string }): string {
  try {
    // üéÜ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π createDecipheriv
    const key = crypto.createHash('sha256').update(MASTER_KEY).digest();
    const iv = Buffer.from(encryptedData.iv, 'hex');
    
    const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);
    
    let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    console.error('üö® TOTP decryption failed:', error);
    throw new Error('Failed to decrypt TOTP secret');
  }
}

/**
 * –•—ç—à–∏—Ä—É–µ—Ç backup –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é bcrypt (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
 */
export async function hashBackupCode(code: string): Promise<string> {
  try {
    const saltRounds = 12; // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –¥–ª—è backup –∫–æ–¥–æ–≤
    return await bcrypt.hash(code, saltRounds);
  } catch (error) {
    console.error('üö® Backup code hashing failed:', error);
    throw new Error('Failed to hash backup code');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç backup –∫–æ–¥
 */
export async function verifyBackupCode(plainCode: string, hashedCode: string): Promise<boolean> {
  try {
    return await bcrypt.compare(plainCode, hashedCode);
  } catch (error) {
    console.error('üö® Backup code verification failed:', error);
    return false;
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç backup –∫–æ–¥—ã
 */
export function generateBackupCodes(count: number = 10): string[] {
  const codes: string[] = [];
  
  for (let i = 0; i < count; i++) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const code = crypto.randomBytes(4).toString('hex').toUpperCase();
    codes.push(code);
  }
  
  return codes;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞
 */
export function validateMasterKey(): boolean {
  if (!MASTER_KEY || MASTER_KEY.length < 64) {
    console.error('üö® CRITICAL: MFA_MASTER_KEY too short or missing!');
    return false;
  }
  
  return true;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è production
 */
export function generateMasterKey(): string {
  return crypto.randomBytes(32).toString('hex');
}