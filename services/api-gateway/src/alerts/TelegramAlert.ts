import axios from 'axios';
import { monitoringEvents } from '../routes/monitoring';

interface TelegramConfig {
  botToken: string;
  chatId: string;
  enabled: boolean;
}

interface AlertPayload {
  service: string;
  previousStatus: string;
  currentStatus: string;
  responseTime: number;
  critical: boolean;
  error?: string;
  timestamp: Date;
}

export class TelegramAlert {
  private config: TelegramConfig;
  private lastAlerts: Map<string, Date> = new Map();
  private cooldownMinutes = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

  constructor(config: TelegramConfig) {
    this.config = config;
    
    if (this.config.enabled && this.config.botToken && this.config.chatId) {
      this.initializeEventListeners();
      console.log('üì± Telegram alerts initialized');
    } else {
      console.log('üì± Telegram alerts disabled (missing configuration)');
    }
  }

  private initializeEventListeners() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    monitoringEvents.on('statusChange', (data: AlertPayload) => {
      this.handleStatusChange(data);
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    monitoringEvents.on('serviceRestart', (data: any) => {
      this.handleServiceRestart(data);
    });
  }

  private async handleStatusChange(data: AlertPayload) {
    if (!this.shouldSendAlert(data.service)) {
      return;
    }

    const message = this.formatStatusChangeMessage(data);
    await this.sendMessage(message, this.getMessagePriority(data));
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
    this.lastAlerts.set(data.service, new Date());
  }

  private async handleServiceRestart(data: any) {
    const message = this.formatRestartMessage(data);
    await this.sendMessage(message, 'medium');
  }

  private shouldSendAlert(serviceName: string): boolean {
    const lastAlert = this.lastAlerts.get(serviceName);
    if (!lastAlert) return true;

    const cooldownMs = this.cooldownMinutes * 60 * 1000;
    const timeSinceLastAlert = Date.now() - lastAlert.getTime();
    
    return timeSinceLastAlert > cooldownMs;
  }

  private formatStatusChangeMessage(data: AlertPayload): string {
    const { service, previousStatus, currentStatus, responseTime, critical, error, timestamp } = data;
    
    // –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    const statusEmoji = {
      online: '‚úÖ',
      offline: 'üî¥', 
      degraded: '‚ö†Ô∏è'
    };

    const criticalFlag = critical ? 'üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ï–†–í–ò–°' : 'üîî';
    const emoji = statusEmoji[currentStatus as keyof typeof statusEmoji] || '‚ùì';
    
    let message = `${criticalFlag} ${emoji} **Beauty Platform Alert**\n\n`;
    message += `üîß **–°–µ—Ä–≤–∏—Å:** ${service}\n`;
    message += `üìä **–°—Ç–∞—Ç—É—Å:** ${previousStatus} ‚Üí ${currentStatus}\n`;
    message += `‚è±Ô∏è **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** ${responseTime}ms\n`;
    message += `üïê **–í—Ä–µ–º—è:** ${timestamp.toLocaleString('ru-RU')}\n`;

    if (error) {
      message += `‚ùå **–û—à–∏–±–∫–∞:** ${error}\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if (currentStatus === 'offline') {
      message += '\nüîß **–î–µ–π—Å—Ç–≤–∏—è:**\n';
      message += '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞\n';
      message += '‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É\n';
      message += '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞\n';
    } else if (currentStatus === 'online' && previousStatus === 'offline') {
      message += '\nüéâ –°–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!';
    } else if (currentStatus === 'degraded') {
      message += '\n‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É.';
    }

    return message;
  }

  private formatRestartMessage(data: any): string {
    let message = `üîÑ **Service Restart**\n\n`;
    message += `üîß **–°–µ—Ä–≤–∏—Å:** ${data.service}\n`;
    message += `üîå **–ü–æ—Ä—Ç:** ${data.port}\n`;
    message += `üìä **–°—Ç–∞—Ç—É—Å:** ${data.status}\n`;
    message += `üïê **–í—Ä–µ–º—è:** ${data.timestamp.toLocaleString('ru-RU')}\n`;
    
    return message;
  }

  private getMessagePriority(data: AlertPayload): 'high' | 'medium' | 'low' {
    if (data.critical && data.currentStatus === 'offline') {
      return 'high';
    } else if (data.currentStatus === 'offline' || data.currentStatus === 'degraded') {
      return 'medium';
    } else {
      return 'low';
    }
  }

  private async sendMessage(message: string, priority: 'high' | 'medium' | 'low' = 'medium') {
    if (!this.config.enabled) return;

    try {
      const url = `https://api.telegram.org/bot${this.config.botToken}/sendMessage`;
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      const options: any = {
        chat_id: this.config.chatId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      };

      // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (priority === 'high') {
        options.disable_notification = false;
      } else {
        options.disable_notification = true;
      }

      const response = await axios.post(url, options, {
        timeout: 10000
      });

      if (response.data.ok) {
        console.log(`üì± Telegram alert sent successfully (${priority} priority)`);
      } else {
        console.error('üì± Telegram API error:', response.data);
      }

    } catch (error: any) {
      console.error('üì± Failed to send Telegram alert:', error.message);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏
      if (error.response?.status === 400) {
        console.error('üì± Telegram configuration error. Check bot token and chat ID.');
      } else if (error.response?.status === 401) {
        console.error('üì± Telegram authentication failed. Invalid bot token.');
      }
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
  async sendTestAlert(): Promise<boolean> {
    try {
      const testMessage = `üß™ **Test Alert - Beauty Platform**\n\n` +
        `‚úÖ Telegram alerts are working correctly!\n` +
        `üïê Time: ${new Date().toLocaleString('ru-RU')}\n` +
        `ü§ñ Bot: Active\n` +
        `üì± Chat: Connected`;

      await this.sendMessage(testMessage, 'low');
      return true;
    } catch (error) {
      console.error('Failed to send test alert:', error);
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  updateConfig(newConfig: Partial<TelegramConfig>) {
    this.config = { ...this.config, ...newConfig };
    console.log('üì± Telegram configuration updated');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
  getAlertStats() {
    return {
      enabled: this.config.enabled,
      configured: !!(this.config.botToken && this.config.chatId),
      lastAlerts: Array.from(this.lastAlerts.entries()).map(([service, date]) => ({
        service,
        lastAlert: date.toISOString()
      })),
      cooldownMinutes: this.cooldownMinutes
    };
  }

  // –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  resetAlertHistory() {
    this.lastAlerts.clear();
    console.log('üì± Alert history cleared');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–ª–µ—Ä—Ç–æ–≤
const botToken = process.env.TELEGRAM_BOT_TOKEN || '';
const chatId = process.env.TELEGRAM_CHAT_ID || '';
const enabledEnv = process.env.TELEGRAM_ENABLED;
const enabledByDefault = !!(botToken && chatId);

export const telegramAlert = new TelegramAlert({
  botToken,
  chatId,
  enabled: enabledEnv ? enabledEnv === 'true' : enabledByDefault
});

export default telegramAlert;
