// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üí≥ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–∞–ª–æ–Ω–æ–≤
model Subscription {
  id                   String   @id @default(cuid())
  tenantId             String   // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  plan                 String   // TRIAL, BASIC, PRO, ENTERPRISE
  status               String   @default("TRIAL") // TRIAL, ACTIVE, CANCELLED, PAST_DUE
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean  @default(false)
  trialEndsAt          DateTime?

  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  payments             Payment[]

  @@index([tenantId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

// üí∞ –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
model Payment {
  id                     String       @id @default(cuid())
  tenantId               String       // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  subscriptionId         String?

  // Stripe –¥–∞–Ω–Ω—ã–µ
  stripePaymentIntentId  String?      @unique
  stripeInvoiceId        String?      @unique

  // –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞
  amount                 Decimal      @db.Decimal(10,2)
  currency               String       @default("EUR") // EUR, PLN, USD

  // –°—Ç–∞—Ç—É—Å
  status                 String       // PENDING, SUCCEEDED, FAILED, CANCELLED
  description            String?

  // Metadata
  metadata               Json?        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Stripe
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  // Relations
  subscription           Subscription? @relation(fields: [subscriptionId], references: [id])
  refunds                Refund[]      // Payment can have multiple refunds
  events                 PaymentEvent[] // Payment can have multiple events

  @@index([tenantId])
  @@index([subscriptionId])
  @@index([stripePaymentIntentId])
  @@index([stripeInvoiceId])
  @@index([status])
  @@map("payments")
}

// üßæ –ò–Ω–≤–æ–π—Å—ã –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
model Invoice {
  id                String    @id @default(cuid())
  tenantId          String    // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  subscriptionId    String?
  paymentId         String?

  // –ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞
  invoiceNumber     String    @unique

  // –°—É–º–º—ã
  subtotal          Decimal   @db.Decimal(10,2)
  taxAmount         Decimal   @db.Decimal(10,2) @default(0)
  totalAmount       Decimal   @db.Decimal(10,2)
  currency          String    @default("EUR")

  // –ü–µ—Ä–∏–æ–¥—ã
  periodStart       DateTime
  periodEnd         DateTime
  dueDate           DateTime

  // –°—Ç–∞—Ç—É—Å
  status            String    // DRAFT, SENT, PAID, OVERDUE, CANCELLED

  // PDF
  pdfUrl            String?   // URL –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É PDF

  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([tenantId])
  @@index([subscriptionId])
  @@index([invoiceNumber])
  @@index([status])
  @@map("invoices")
}

// üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤ (Stage 5)
model Refund {
  id                String    @id @default(cuid())
  tenantId          String    // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  paymentId         String    // Reference to Payment

  // Provider refund data
  provider          String    // "stripe" | "paypal"
  providerRefundId  String?   // Provider's refund ID

  // Amount and currency
  amount            Int       // Amount in cents/units
  currency          String    @default("EUR")

  // Status tracking
  status            String    @default("pending") // pending, succeeded, failed
  reason            String?   // Optional refund reason

  // Metadata
  metadata          Json?     // Additional provider data
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  payment           Payment?  @relation(fields: [paymentId], references: [id])
  events            PaymentEvent[] // For webhook deduplication

  @@index([tenantId])
  @@index([paymentId])
  @@index([providerRefundId])
  @@index([status])
  @@map("refunds")
}

// üìß Email delivery tracking (Stage 5)
model InvoiceEmail {
  id              String    @id @default(cuid())
  tenantId        String    // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  paymentId       String    // Reference to Payment

  // Email data
  recipientEmail  String    // Recipient email address
  locale          String    @default("ru") // ru | en

  // Status tracking
  status          String    @default("queued") // queued, sent, failed
  sentAt          DateTime?
  errorMessage    String?   // Error details if failed

  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([tenantId])
  @@index([paymentId])
  @@index([status])
  @@map("invoice_emails")
}

// üìù Payment events for webhook deduplication (Stage 5)
model PaymentEvent {
  id            String    @id @default(cuid())
  tenantId      String?   // Optional: events can be global

  // Provider event data
  provider      String    // "stripe" | "paypal"
  eventType     String    // Provider event type
  eventId       String    @unique // Provider event ID (for deduplication)

  // Related entities
  paymentId     String?   // Optional payment reference
  refundId      String?   // Optional refund reference

  // Event payload
  payload       Json      // Full webhook payload
  processed     Boolean   @default(false)

  // Metadata
  receivedAt    DateTime  @default(now())

  // Relations
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  refund        Refund?   @relation(fields: [refundId], references: [id])

  @@index([eventId]) // For fast deduplication lookup
  @@index([provider, eventType])
  @@index([paymentId])
  @@index([refundId])
  @@map("payment_events")
}

// üîë Idempotency keys for API requests (24h TTL)
model IdempotencyKey {
  id           String    @id @default(cuid())
  key          String    // Client-provided idempotency key
  tenantId     String    // Tenant isolation
  requestHash  String    // SHA256 of request data
  response     Json      // Cached response
  expiresAt    DateTime  // Auto-cleanup after 24h
  createdAt    DateTime  @default(now())

  @@unique([key, tenantId]) // Same key can exist for different tenants
  @@index([key, tenantId])  // Fast lookup
  @@index([expiresAt])      // For cleanup queries
  @@map("idempotency_keys")
}