// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NOTE: Subscription model removed for Stage 5 simplicity
// Will be added back in future stages when needed

// üí∞ –ü–ª–∞—Ç–µ–∂–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
model Payment {
  id                     String       @id @default(cuid())
  tenantId               String       @map("tenant_id") // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation

  // Provider data (generic)
  provider               String       // stripe, paypal, etc.
  providerId             String?      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç camelCase

  // Customer reference
  customerId             String?      @map("customer_id") // –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç snake_case

  // –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞ (integer in cents/units)
  amount                 Int          // Amount in cents/units
  currency               String       @default("EUR") // EUR, PLN, USD

  // –°—Ç–∞—Ç—É—Å
  status                 String       // PENDING, SUCCEEDED, FAILED, CANCELLED

  // Metadata
  metadata               Json?        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Provider
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")

  // Relations
  refunds                Refund[]      // Payment can have multiple refunds
  events                 PaymentEvent[] // Payment can have multiple events
  invoiceEmails          InvoiceEmail[] // Payment can have multiple invoice emails

  @@index([tenantId])
  @@index([status])
  @@map("payments")
}

// üßæ –ò–Ω–≤–æ–π—Å—ã –¥–ª—è PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
model Invoice {
  id                String    @id @default(cuid())
  tenantId          String    // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  subscriptionId    String?
  paymentId         String?

  // –ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞
  invoiceNumber     String    @unique

  // –°—É–º–º—ã
  subtotal          Decimal   @db.Decimal(10,2)
  taxAmount         Decimal   @db.Decimal(10,2) @default(0)
  totalAmount       Decimal   @db.Decimal(10,2)
  currency          String    @default("EUR")

  // –ü–µ—Ä–∏–æ–¥—ã
  periodStart       DateTime
  periodEnd         DateTime
  dueDate           DateTime

  // –°—Ç–∞—Ç—É—Å
  status            String    // DRAFT, SENT, PAID, OVERDUE, CANCELLED

  // PDF
  pdfUrl            String?   // URL –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É PDF

  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([tenantId])
  @@index([subscriptionId])
  @@index([invoiceNumber])
  @@index([status])
  @@map("invoices")
}

// üîÑ –í–æ–∑–≤—Ä–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤ (Stage 5)
model Refund {
  id                String    @id @default(cuid())
  tenantId          String    @map("tenant_id") // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  paymentId         String    @map("payment_id") // Reference to Payment

  // Provider refund data
  provider          String    // "stripe" | "paypal"
  providerRefundId  String?   @map("provider_refund_id") // Provider's refund ID

  // Amount and currency
  amount            Int       // Amount in cents/units
  currency          String    @default("EUR")

  // Status tracking
  status            String    @default("pending") // pending, succeeded, failed
  reason            String?   // Optional refund reason

  // Metadata
  metadata          Json?     // Additional provider data
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  payment           Payment?  @relation(fields: [paymentId], references: [id])
  events            PaymentEvent[] // For webhook deduplication

  @@index([tenantId])
  @@index([paymentId])
  @@index([providerRefundId])
  @@index([status])
  @@map("refunds")
}

// üìß Email delivery tracking (Stage 5)
model InvoiceEmail {
  id               String    @id @default(cuid())
  tenantId         String    @map("tenant_id") // üîê –ö–†–ò–¢–ò–ß–ù–û: Tenant isolation
  paymentId        String    @map("payment_id") // Reference to Payment

  // Email data
  to               String    // Recipient email address
  subject          String    // Email subject
  locale           String    @default("ru") // ru | en

  // Status tracking
  status           String    @default("queued") // queued, sent, failed
  sentAt           DateTime? @map("sent_at")
  providerResponse Json?     @map("provider_response") // Provider response data
  metadata         Json?     // Additional metadata

  // Timestamps
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  payment          Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([paymentId])
  @@index([status])
  @@map("invoice_emails")
}

// üìù Payment events for webhook deduplication (Stage 5)
model PaymentEvent {
  id            String    @id @default(cuid())
  tenantId      String?   @map("tenant_id") // Optional: events can be global

  // Provider event data
  provider      String    // "stripe" | "paypal"
  eventType     String    @map("event_type") // Provider event type
  eventId       String    @unique @map("event_id") // Provider event ID (for deduplication)

  // Related entities
  paymentId     String?   @map("payment_id") // Optional payment reference
  refundId      String?   @map("refund_id") // Optional refund reference

  // Event payload
  payload       Json      // Full webhook payload
  processed     Boolean   @default(false)

  // Metadata
  receivedAt    DateTime  @default(now()) @map("received_at")

  // Relations
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  refund        Refund?   @relation(fields: [refundId], references: [id])

  @@index([eventId]) // For fast deduplication lookup
  @@index([provider, eventType])
  @@index([paymentId])
  @@index([refundId])
  @@map("payment_events")
}

// üîë Idempotency keys for API requests (24h TTL)
model IdempotencyKey {
  key          String    @id // Client-provided idempotency key (primary key in DB)
  tenantId     String    @map("tenant_id") // Tenant isolation
  requestHash  String    @map("request_hash") // SHA256 of request data
  response     Json      // Cached response
  expiresAt    DateTime  @map("expires_at") // Auto-cleanup after 24h
  createdAt    DateTime  @default(now()) @map("created_at")

  @@index([tenantId])       // Tenant filtering
  @@index([expiresAt])      // For cleanup queries
  @@map("idempotency_keys")
}