#!/usr/bin/env node

/**
 * üîó Beauty Platform Webhook Server
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç GitHub Actions –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π
 */

const express = require('express');
const { spawn } = require('child_process');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = 3333;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET || 'beauty-platform-webhook-secret-2025';
const PROJECT_DIR = '/root/projects/beauty';
const LOG_DIR = path.join(PROJECT_DIR, 'logs');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
if (!fs.existsSync(LOG_DIR)) {
    fs.mkdirSync(LOG_DIR, { recursive: true });
}

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.raw({ type: 'application/json' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const log = (message, level = 'info') => {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}\n`;

    console.log(logMessage.trim());

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    const logFile = path.join(LOG_DIR, 'webhook.log');
    fs.appendFileSync(logFile, logMessage);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ GitHub (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
const verifyGitHubSignature = (req, res, next) => {
    const signature = req.headers['x-hub-signature-256'];
    const payload = JSON.stringify(req.body);

    if (!signature) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Bearer token –∏–∑ GitHub Actions
        const authHeader = req.headers.authorization;
        if (authHeader && authHeader.startsWith('Bearer ')) {
            const token = authHeader.substring(7);
            if (token === WEBHOOK_SECRET) {
                return next();
            }
        }

        log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'error');
        return res.status(401).json({ error: 'Unauthorized: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å' });
    }

    const expectedSignature = `sha256=${crypto
        .createHmac('sha256', WEBHOOK_SECRET)
        .update(payload)
        .digest('hex')}`;

    if (signature !== expectedSignature) {
        log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'error');
        return res.status(401).json({ error: 'Unauthorized: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å' });
    }

    next();
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–ª–æ—è
const runDeployment = (commitInfo) => {
    return new Promise((resolve, reject) => {
        log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π deployment...');

        const deployScript = path.join(PROJECT_DIR, 'beauty-dev.sh');
        const deployProcess = spawn('bash', [deployScript, 'deploy'], {
            cwd: PROJECT_DIR,
            stdio: ['ignore', 'pipe', 'pipe'],
            env: { ...process.env, PATH: process.env.PATH }
        });

        let stdout = '';
        let stderr = '';

        deployProcess.stdout.on('data', (data) => {
            const output = data.toString();
            stdout += output;
            log(`üì¶ ${output.trim()}`, 'deploy');
        });

        deployProcess.stderr.on('data', (data) => {
            const output = data.toString();
            stderr += output;
            log(`‚ö†Ô∏è ${output.trim()}`, 'deploy-error');
        });

        deployProcess.on('close', (code) => {
            if (code === 0) {
                log('‚úÖ Deployment —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
                resolve({
                    success: true,
                    stdout,
                    stderr,
                    code
                });
            } else {
                log(`‚ùå Deployment –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`, 'error');
                reject({
                    success: false,
                    stdout,
                    stderr,
                    code
                });
            }
        });

        deployProcess.on('error', (error) => {
            log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ deployment: ${error.message}`, 'error');
            reject({
                success: false,
                error: error.message
            });
        });
    });
};

// üè• Health check endpoint
app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        service: 'beauty-platform-webhook',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// üìä Status endpoint
app.get('/status', (req, res) => {
    try {
        const logFile = path.join(LOG_DIR, 'webhook.log');
        const logExists = fs.existsSync(logFile);
        const lastLogs = logExists
            ? fs.readFileSync(logFile, 'utf8').split('\n').slice(-10).filter(Boolean)
            : [];

        res.json({
            status: 'running',
            service: 'beauty-platform-webhook',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            logs: lastLogs
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            error: error.message
        });
    }
});

// üîó Webhook endpoint –¥–ª—è GitHub
app.post('/webhook/deploy', verifyGitHubSignature, async (req, res) => {
    try {
        const payload = req.body;
        const eventType = req.headers['x-github-event'] || 'unknown';

        log(`üì• –ü–æ–ª—É—á–µ–Ω webhook: ${eventType} –æ—Ç ${payload.pusher?.name || 'unknown'}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ push –≤ main –≤–µ—Ç–∫—É
        if (eventType !== 'push' || payload.ref !== 'refs/heads/main') {
            log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º event: ${eventType}, ref: ${payload.ref}`);
            return res.json({
                message: 'Event –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ push –≤ main)',
                event: eventType,
                ref: payload.ref
            });
        }

        const commitInfo = {
            sha: payload.head_commit?.id || 'unknown',
            message: payload.head_commit?.message || 'No message',
            author: payload.head_commit?.author?.name || 'unknown',
            pusher: payload.pusher?.name || 'unknown'
        };

        log(`üìù Commit: ${commitInfo.sha.substring(0, 7)} by ${commitInfo.author}: "${commitInfo.message}"`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç GitHub'—É
        res.json({
            message: 'Deployment –∑–∞–ø—É—â–µ–Ω',
            commit: commitInfo,
            timestamp: new Date().toISOString()
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º deployment –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try {
            await runDeployment(commitInfo);
            log(`üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π deployment –¥–ª—è ${commitInfo.sha.substring(0, 7)} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`, 'success');
        } catch (deployError) {
            log(`üí• Deployment –¥–ª—è ${commitInfo.sha.substring(0, 7)} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!`, 'error');
            log(`üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(deployError)}`, 'error');
        }

    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`, 'error');
        res.status(500).json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    log(`üîó Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    log(`üì° –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ—Ç GitHub Actions`);
    log(`üîí Webhook secret –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    log(`üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${LOG_DIR}/webhook.log`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    log('üì• –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä...', 'info');
    process.exit(0);
});

process.on('SIGTERM', () => {
    log('üì• –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä...', 'info');
    process.exit(0);
});