#!/usr/bin/env python3
"""
AI Chat Bridge - Claude + Gemini Communication System
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–≤—É–º AI –æ–±—â–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–æ–±–æ–π –≤ VS Code —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
"""

import os
import sys
import json
import time
import asyncio
import logging
from datetime import datetime
from pathlib import Path

import requests
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = "/root/beauty-platform/logs/ai-chat.log"
CONVERSATION_LOG = "/root/beauty-platform/logs/ai-conversation.json"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ]
)

class AIBridge:
    def __init__(self):
        # API –∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        self.claude_api_key = os.getenv('CLAUDE_API_KEY', 'your-claude-key-here')
        self.gemini_api_key = os.getenv('GEMINI_API_KEY', 'your-gemini-key-here')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
        genai.configure(api_key=self.gemini_api_key)
        self.gemini_model = genai.GenerativeModel('gemini-pro')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude
        self.claude_url = "https://api.anthropic.com/v1/messages"
        self.claude_headers = {
            "Content-Type": "application/json",
            "x-api-key": self.claude_api_key,
            "anthropic-version": "2023-06-01"
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        self.conversation_history = []
        self.load_conversation()
    
    def load_conversation(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            if Path(CONVERSATION_LOG).exists():
                with open(CONVERSATION_LOG, 'r', encoding='utf-8') as f:
                    self.conversation_history = json.load(f)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
            self.conversation_history = []
    
    def save_conversation(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            with open(CONVERSATION_LOG, 'w', encoding='utf-8') as f:
                json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def add_message(self, sender, message, response=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "sender": sender,
            "message": message,
            "response": response
        }
        self.conversation_history.append(entry)
        self.save_conversation()
    
    async def ask_claude(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å Claude"""
        try:
            payload = {
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 1000,
                "messages": [{
                    "role": "user", 
                    "content": f"–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å Gemini AI –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Beauty Platform. –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {self.get_recent_context()}. –í–æ–ø—Ä–æ—Å –æ—Ç Gemini: {message}"
                }]
            }
            
            response = requests.post(self.claude_url, headers=self.claude_headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                return result['content'][0]['text']
            else:
                return f"–û—à–∏–±–∫–∞ Claude API: {response.status_code} - {response.text}"
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude: {str(e)}"
    
    async def ask_gemini(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å Gemini"""
        try:
            context = f"–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å Claude AI –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Beauty Platform. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {self.get_recent_context()}. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Claude: {message}"
            
            response = self.gemini_model.generate_content(context)
            return response.text
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {e}")
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini: {str(e)}"
    
    def get_recent_context(self, limit=5):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        recent = self.conversation_history[-limit:] if len(self.conversation_history) > limit else self.conversation_history
        context_lines = []
        
        for entry in recent:
            context_lines.append(f"{entry['sender']}: {entry['message'][:100]}...")
            
        return " | ".join(context_lines)
    
    def display_message(self, sender, message, color_code="0"):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\n\033[9{color_code}m[{timestamp}] {sender}:\033[0m")
        print(f"\033[9{color_code}m{message}\033[0m")
        print("-" * 80)

    async def start_conversation(self, initial_topic="Beauty Platform development"):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É AI"""
        print(f"\nü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É Claude –∏ Gemini –Ω–∞ —Ç–µ–º—É: {initial_topic}")
        print("=" * 80)
        
        current_message = f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É Beauty Platform. –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {initial_topic}"
        current_sender = "Human"
        
        for round_num in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–±–º–µ–Ω–æ–≤
            print(f"\nüîÑ –†–∞—É–Ω–¥ {round_num + 1}")
            
            if round_num % 2 == 0:  # Claude –æ—Ç–≤–µ—á–∞–µ—Ç
                self.display_message("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Claude", current_message, "4")  # –°–∏–Ω–∏–π
                response = await self.ask_claude(current_message)
                self.display_message("üß† Claude –æ—Ç–≤–µ—á–∞–µ—Ç", response, "2")  # –ó–µ–ª–µ–Ω—ã–π
                self.add_message("Claude", current_message, response)
                current_message = response
                current_sender = "Claude"
            else:  # Gemini –æ—Ç–≤–µ—á–∞–µ—Ç
                self.display_message("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Gemini", current_message, "5")  # –ú–∞–≥–µ–Ω—Ç–∞
                response = await self.ask_gemini(current_message)
                self.display_message("üíé Gemini –æ—Ç–≤–µ—á–∞–µ—Ç", response, "3")  # –ñ–µ–ª—Ç—ã–π
                self.add_message("Gemini", current_message, response)
                current_message = response
                current_sender = "Gemini"
            
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è" in current_message.lower() or "–ø–æ–∫–∞" in current_message.lower():
                print(f"\n‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω {current_sender}")
                break
        
        print(f"\nüìä –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {CONVERSATION_LOG}")
        print(f"üìù –õ–æ–≥–∏ –≤ {LOG_FILE}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ AI Chat Bridge - Claude + Gemini Communication System")
    
    bridge = AIBridge()
    
    if len(sys.argv) > 1:
        topic = " ".join(sys.argv[1:])
    else:
        topic = "Beauty Platform: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    
    await bridge.start_conversation(topic)

if __name__ == "__main__":
    asyncio.run(main())