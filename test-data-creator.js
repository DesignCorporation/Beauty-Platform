#!/usr/bin/env node

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Node.js
const http = require('http');
const https = require('https');
const { URL } = require('url');

const API_BASE = 'http://localhost:6020/api'; // API Gateway
const AUTH_BASE = 'http://localhost:6020/api/auth'; // Auth —á–µ—Ä–µ–∑ Gateway
const CRM_BASE = 'http://localhost:6022/api'; // CRM API –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Gateway)

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
const TEST_USER = {
  email: 'owner@beauty-test-salon.ru',
  password: 'owner123'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function login() {
  try {
    console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    
    // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    const csrfResponse = await fetch(`${AUTH_BASE}/csrf-token`);
    const csrfData = await csrfResponse.json();
    const csrfToken = csrfData.csrfToken;
    
    console.log('‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', csrfToken);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
    const loginResponse = await fetch(`${AUTH_BASE}/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify(TEST_USER),
      credentials: 'include'
    });

    if (!loginResponse.ok) {
      throw new Error(`Login failed: ${loginResponse.status} ${loginResponse.statusText}`);
    }

    const loginData = await loginResponse.json();
    console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º cookies –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const cookies = loginResponse.headers.get('set-cookie');
    console.log('üç™ Cookies –ø–æ–ª—É—á–µ–Ω—ã');
    
    return { csrfToken, cookies: cookies || '', user: loginData.user };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏
async function createService(auth, serviceData) {
  try {
    console.log('üõçÔ∏è –°–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ª—É–≥–∞:', serviceData.name);
    
    const response = await fetch(`${CRM_BASE}/services`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': auth.csrfToken,
        'Cookie': auth.cookies
      },
      body: JSON.stringify(serviceData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Service creation failed: ${response.status} ${errorText}`);
    }

    const service = await response.json();
    console.log('‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞:', service.name, `(ID: ${service.id})`);
    return service;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function createClient(auth, clientData) {
  try {
    console.log('üë§ –°–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç:', clientData.name);
    
    const response = await fetch(`${CRM_BASE}/clients`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': auth.csrfToken,
        'Cookie': auth.cookies
      },
      body: JSON.stringify(clientData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Client creation failed: ${response.status} ${errorText}`);
    }

    const client = await response.json();
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', client.name, `(ID: ${client.id})`);
    return client;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Beauty Platform CRM');
  console.log('================================================\n');

  try {
    // –®–∞–≥ 1: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    const auth = await login();
    console.log(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${auth.user.name}!\n`);

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Å–ª—É–≥
    console.log('üìã –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –£–°–õ–£–ì');
    console.log('==========================');
    
    const testServices = [
      {
        name: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∂–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ —Å —É–∫–ª–∞–¥–∫–æ–π',
        duration: 60,
        price: 1500
      },
      {
        name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
        description: '–ü–æ–ª–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫—Ä–∞—Å–∏—Ç–µ–ª—è–º–∏',
        duration: 120,
        price: 3500
      },
      {
        name: '–ú–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ',
        description: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –ø—Ä—è–¥–µ–π –≤–æ–ª–æ—Å',
        duration: 180,
        price: 4500
      },
      {
        name: '–£–∫–ª–∞–¥–∫–∞',
        description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å',
        duration: 45,
        price: 800
      },
      {
        name: '–ú–∞–Ω–∏–∫—é—Ä',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫',
        duration: 90,
        price: 1200
      }
    ];

    const createdServices = [];
    for (const serviceData of testServices) {
      const service = await createService(auth, serviceData);
      createdServices.push(service);
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —É—Å–ª—É–≥: ${createdServices.length}\n`);

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('üë• –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ö–õ–ò–ï–ù–¢–û–í');
    console.log('=============================');
    
    const testClients = [
      {
        name: '–ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        email: 'anna.ivanova@example.com',
        phone: '+7 (999) 123-45-67',
        birthday: '1990-03-15',
        notes: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏. –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞ –≥–æ–ª–æ–≤—ã.'
      },
      {
        name: '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        email: 'maria.petrova@example.com',
        phone: '+7 (999) 234-56-78',
        birthday: '1985-07-22',
        notes: '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç. –õ—é–±–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ü–≤–µ—Ç–æ–º.'
      },
      {
        name: '–°–∏–¥–æ—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
        email: 'elena.sidorova@example.com',
        phone: '+7 (999) 345-67-89',
        birthday: '1992-11-08',
        notes: '–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ. –•–æ—á–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –æ–±—Ä–∞–∑.'
      },
      {
        name: '–ö–æ–∑–ª–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞',
        email: 'tatyana.kozlova@example.com',
        phone: '+7 (999) 456-78-90',
        notes: 'VIP –∫–ª–∏–µ–Ω—Ç. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è.'
      }
    ];

    const createdClients = [];
    for (const clientData of testClients) {
      const client = await createClient(auth, clientData);
      createdClients.push(client);
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${createdClients.length}\n`);

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('üéâ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('====================================');
    console.log(`‚úÖ –£—Å–ª—É–≥ —Å–æ–∑–¥–∞–Ω–æ: ${createdServices.length}`);
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${createdClients.length}`);
    console.log('\nüîó –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
    console.log('  ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å https://test-crm.beauty.designcorp.eu');
    console.log('  ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–£—Å–ª—É–≥–∏" –∏ —É–≤–∏–¥–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏');
    console.log('  ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ö–ª–∏–µ–Ω—Ç—ã" –∏ —É–≤–∏–¥–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
    console.log('  ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ!\n');

    return { services: createdServices, clients: createdClients };

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main, login, createService, createClient };