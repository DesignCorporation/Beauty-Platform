import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { apiService } from '../services/api'
import { csrfService } from '../services/csrf'

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export interface User {
  id: string
  email: string
  firstName: string | null
  lastName: string | null
  role: string
  tenantId: string | null
  permissions: string[]
}

export interface AuthState {
  user: User | null
  isAuthenticated: boolean
  isLoading: boolean
}

export interface MFARequiredData {
  userId: string
  email: string
  role: string
}

export interface AuthContextType extends AuthState {
  login: (email: string, password: string) => Promise<void>
  logout: () => void
  refreshToken: () => Promise<void>
  completeMFA: (userId: string, token: string) => Promise<void>
  forceLogout: () => Promise<void>
  mfaRequired?: MFARequiredData | null
  mfaSetupRequired?: boolean
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const AuthContext = createContext<AuthContextType | undefined>(undefined)

// Hook –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthProviderProps {
  children: ReactNode
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    isAuthenticated: false,
    isLoading: true
  })
  
  const [mfaRequired, setMfaRequired] = useState<MFARequiredData | null>(null)
  const [mfaSetupRequired, setMfaSetupRequired] = useState<boolean>(false)

  // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –¢–æ–∫–µ–Ω—ã –≤ httpOnly cookies + CSRF –∑–∞—â–∏—Ç–∞
  // –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç cookies
  // JavaScript –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ httpOnly cookies (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
  // CSRF —Ç–æ–∫–µ–Ω—ã –∑–∞—â–∏—â–∞—é—Ç –æ—Ç –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const fetchUserInfo = async (): Promise<User> => {
    try {
      const data = await apiService.auth.me()
      return data.user || data
    } catch (error) {
      throw new Error('Failed to fetch user info')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞
  const login = async (email: string, password: string): Promise<void> => {
    try {
      const data = await apiService.auth.login(email, password)
      
      // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ MFA
      if (!data.success && data.code === 'MFA_REQUIRED') {
        console.log('üîç Login: MFA Required detected:', {
          userId: data.userId,
          email: data.email,
          role: data.role,
          currentStep: 'login_mfa_required'
        });
        
        // MFA —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        const mfaData = {
          userId: data.userId,
          email: data.email,
          role: data.role
        };
        
        setMfaRequired(mfaData);
        setAuthState(prev => ({ ...prev, isLoading: false }));
        
        console.log('üîç Login: MFA data saved to state:', mfaData);
        
        // –ë—Ä–æ—Å–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä—É—é LoginForm –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        const mfaError = new Error('MFA verification required')
        ;(mfaError as any).code = 'MFA_REQUIRED'
        ;(mfaError as any).mfaData = mfaData
        throw mfaError
      }

      const { user } = data // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ MFA Setup Required

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
      if (user.role !== 'SUPER_ADMIN') {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
      }

      // üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MFA
      if (data.mfaSetupRequired) {
        setMfaSetupRequired(true)
        setAuthState({
          user,
          isAuthenticated: true, // –ß–∞—Å—Ç–∏—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA
          isLoading: false
        })
        return // –í—ã—Ö–æ–¥–∏–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
      }

      // ‚úÖ –ü–æ–ª–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      setMfaRequired(null)
      setMfaSetupRequired(false)
      setAuthState({
        user,
        isAuthenticated: true,
        isLoading: false
      })
    } catch (error) {
      setAuthState(prev => ({
        ...prev,
        isLoading: false
      }))
      throw error
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  const refreshToken = async (): Promise<void> => {
    try {
      const data = await apiService.auth.refresh()
      const { user } = data // –ù–æ–≤—ã–π access token –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ cookie

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAuthState({
        user,
        isAuthenticated: true,
        isLoading: false
      })
    } catch (error) {
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º
      logout()
      throw error
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = async (): Promise<void> => {
    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ (–æ—á–∏—Å—Ç–∏—Ç cookies —Å–µ—Ä–≤–µ—Ä)
      await apiService.auth.logout()
    } catch (logoutError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ logout - —Å–µ—Ä–≤–µ—Ä –æ—á–∏—Å—Ç–∏—Ç cookies –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      console.log('Server logout failed (expected if token expired):', logoutError)
    } finally {
      // –û—á–∏—â–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      csrfService.clearToken()
      setAuthState({
        user: null,
        isAuthenticated: false,
        isLoading: false
      })
      
      // –û—á–∏—â–∞–µ–º MFA —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setMfaRequired(null)
      setMfaSetupRequired(false)
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ MFA –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const completeMFA = async (userId: string, token: string): Promise<void> => {
    try {
      setAuthState(prev => ({ ...prev, isLoading: true }))
      
      // üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ mfaRequired
      console.log('üîç MFA State Diagnosis:', {
        mfaRequired: mfaRequired,
        mfaRequiredKeys: mfaRequired ? Object.keys(mfaRequired) : 'NULL',
        authState: authState,
        currentStep: 'completeMFA_start'
      });
      
      // üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ mfaRequired –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
      const email = mfaRequired?.email || 'admin@beauty-platform.com'
      console.log('üîê MFA Completion Request:', { 
        userId, 
        code: token, 
        email,
        emailSource: mfaRequired?.email ? 'from_mfaRequired' : 'fallback_hardcode',
        requestPayload: { userId, code: token, email }
      })
      
      const data = await apiService.auth.completeMFA(userId, token, email)
      console.log('üîê MFA API Response:', data)
      
      if (data.success) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ MFA
        const user = await fetchUserInfo()
        console.log('‚úÖ MFA Success - User data retrieved:', user.email)
        
        setAuthState({
          user,
          isAuthenticated: true,
          isLoading: false
        })
        
        // –û—á–∏—â–∞–µ–º MFA —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setMfaRequired(null)
        setMfaSetupRequired(false)
      } else {
        setAuthState(prev => ({ ...prev, isLoading: false }))
        throw new Error(data.error || 'MFA verification failed')
      }
    } catch (error) {
      console.error('üö® MFA Completion Error:', error)
      console.error('üö® Debug Info:', { userId, token: token.substring(0, 4) + '...', mfaRequired })
      setAuthState(prev => ({ ...prev, isLoading: false }))
      throw error
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –æ—á–∏—Å—Ç–∫–æ–π –≤—Å–µ—Ö cookies
  const forceLogout = async (): Promise<void> => {
    try {
      // –í—ã–∑—ã–≤–∞–µ–º force-logout endpoint
      await apiService.get('/auth/force-logout')
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ API, –≥–ª–∞–≤–Ω–æ–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('Force logout API failed (expected):', error)
    } finally {
      // –û—á–∏—â–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      csrfService.clearToken()
      setAuthState({
        user: null,
        isAuthenticated: false,
        isLoading: false
      })
      
      // –û—á–∏—â–∞–µ–º MFA —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setMfaRequired(null)
      setMfaSetupRequired(false)
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
      window.location.href = '/login'
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—á–µ—Ä–µ–∑ httpOnly cookies)
  useEffect(() => {
    const initAuth = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ cookie (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è)
        const user = await fetchUserInfo()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
        if (user.role !== 'SUPER_ADMIN') {
          logout()
          return
        }

        setAuthState({
          user,
          isAuthenticated: true,
          isLoading: false
        })
      } catch (error) {
        // –ï—Å–ª–∏ access token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ refresh
        console.log('üîí No valid access token, trying refresh...')
        try {
          await refreshToken()
        } catch (refreshError) {
          // –ï—Å–ª–∏ refresh —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
          console.log('üîí No valid refresh token, user needs to login')
          setAuthState({
            user: null,
            isAuthenticated: false,  // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            isLoading: false
          })
        }
      }
    }

    initAuth()
  }, [])

  const contextValue: AuthContextType = {
    ...authState,
    login,
    logout,
    refreshToken,
    completeMFA,
    forceLogout,
    mfaRequired,
    mfaSetupRequired
  }

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  )
}