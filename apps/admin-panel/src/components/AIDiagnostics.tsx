import React, { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle, Badge } from '@beauty-platform/ui'
import { 
  Brain, 
  Zap, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Clock,
  Search,
  Lightbulb,
  Wrench,
  Target,
  FileText,
  Play,
  RefreshCw
} from 'lucide-react'

interface Diagnostic {
  id: string
  category: 'error' | 'warning' | 'info' | 'success'
  title: string
  description: string
  impact: 'high' | 'medium' | 'low'
  confidence: number // 0-100
  solution: string
  commands?: string[]
  files?: string[]
  estimatedTime?: string
}

interface AIDiagnosticsProps {
  systemData?: {
    services: any[]
    errors: string[]
    logs: string[]
  }
}

export const AIDiagnostics: React.FC<AIDiagnosticsProps> = ({ systemData }) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [diagnostics, setDiagnostics] = useState<Diagnostic[]>([])
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [analysisProgress, setAnalysisProgress] = useState(0)

  const runDiagnostics = async () => {
    setIsAnalyzing(true)
    setAnalysisProgress(0)
    setDiagnostics([])

    // –°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    const steps = [
      '–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫...',
      '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...',
      '–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...',
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...'
    ]

    for (let i = 0; i < steps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000))
      setAnalysisProgress(((i + 1) / steps.length) * 100)
    }

    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –∞–Ω–∞–ª–∏–∑–∞
    const mockDiagnostics: Diagnostic[] = [
      {
        id: 'auth-service-down',
        category: 'error',
        title: 'Auth Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        description: '–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 6021. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã.',
        impact: 'high',
        confidence: 95,
        solution: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Auth Service —á–µ—Ä–µ–∑ PM2 –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.',
        commands: [
          'pm2 restart auth-service-6021',
          'pm2 logs auth-service-6021 --lines 20',
          'curl -s http://localhost:6021/health'
        ],
        files: [
          '/root/beauty-platform/services/auth-service/src/index.js',
          '/root/beauty-platform/services/auth-service/.env'
        ],
        estimatedTime: '5-10 –º–∏–Ω—É—Ç'
      },
      {
        id: 'nginx-routing',
        category: 'error',
        title: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ nginx',
        description: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è /api/auth/* –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –¥–æ—Ö–æ–¥—è—Ç –¥–æ Auth Service.',
        impact: 'high',
        confidence: 87,
        solution: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤.',
        commands: [
          'sudo nginx -t',
          'sudo systemctl reload nginx',
          'curl -I http://localhost/api/auth/health'
        ],
        files: [
          '/etc/nginx/sites-available/beauty-crm.conf',
          '/etc/nginx/nginx.conf'
        ],
        estimatedTime: '15-20 –º–∏–Ω—É—Ç'
      },
      {
        id: 'cors-issues',
        category: 'warning',
        title: '–ü—Ä–æ–±–ª–µ–º—ã —Å CORS',
        description: '–ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É cookies –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
        impact: 'medium',
        confidence: 78,
        solution: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Auth Service –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies.',
        commands: [
          'grep -r "cors" /root/beauty-platform/services/auth-service/',
          'curl -H "Origin: https://test-crm.beauty.designcorp.eu" -I http://localhost:6021/auth/login'
        ],
        files: [
          '/root/beauty-platform/services/auth-service/src/middleware/cors.js'
        ],
        estimatedTime: '10-15 –º–∏–Ω—É—Ç'
      },
      {
        id: 'db-performance',
        category: 'warning',
        title: '–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –∫ PostgreSQL —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è > 2 —Å–µ–∫—É–Ω–¥.',
        impact: 'medium',
        confidence: 65,
        solution: '–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å Prisma queries.',
        commands: [
          'PGPASSWORD=password psql -h localhost -U beauty_crm_user -d beauty_platform_new -c "SELECT query, mean_time FROM pg_stat_statements ORDER BY mean_time DESC LIMIT 10;"'
        ],
        files: [
          '/root/beauty-platform/core/database/schema.prisma'
        ],
        estimatedTime: '30-45 –º–∏–Ω—É—Ç'
      },
      {
        id: 'mcp-healthy',
        category: 'success',
        title: 'MCP Server —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ',
        description: 'AI —Å–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
        impact: 'low',
        confidence: 92,
        solution: '–ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.',
        commands: [],
        files: [],
        estimatedTime: '–ì–æ—Ç–æ–≤–æ'
      },
      {
        id: 'security-check',
        category: 'info',
        title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        description: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ HTTPS. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL –¥–ª—è –≤—Å–µ—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.',
        impact: 'low',
        confidence: 70,
        solution: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.',
        commands: [
          'openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout internal.key -out internal.crt'
        ],
        files: [
          '/etc/ssl/internal/',
          '/root/beauty-platform/docker-compose.yml'
        ],
        estimatedTime: '1-2 —á–∞—Å–∞'
      }
    ]

    setDiagnostics(mockDiagnostics)
    setIsAnalyzing(false)
  }

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'error': return <XCircle className="w-5 h-5 text-red-600" />
      case 'warning': return <AlertTriangle className="w-5 h-5 text-yellow-600" />
      case 'success': return <CheckCircle className="w-5 h-5 text-green-600" />
      default: return <FileText className="w-5 h-5 text-blue-600" />
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'error': return 'border-red-200 bg-red-50'
      case 'warning': return 'border-yellow-200 bg-yellow-50'
      case 'success': return 'border-green-200 bg-green-50'
      default: return 'border-blue-200 bg-blue-50'
    }
  }

  const getImpactBadge = (impact: string) => {
    const colors = {
      high: 'bg-red-100 text-red-800',
      medium: 'bg-yellow-100 text-yellow-800',
      low: 'bg-green-100 text-green-800'
    }
    return (
      <Badge variant="outline" className={colors[impact as keyof typeof colors]}>
        {impact.toUpperCase()}
      </Badge>
    )
  }

  const filteredDiagnostics = selectedCategory === 'all' 
    ? diagnostics 
    : diagnostics.filter(d => d.category === selectedCategory)

  const getStats = () => {
    const errors = diagnostics.filter(d => d.category === 'error').length
    const warnings = diagnostics.filter(d => d.category === 'warning').length
    const success = diagnostics.filter(d => d.category === 'success').length
    const highImpact = diagnostics.filter(d => d.impact === 'high').length
    
    return { errors, warnings, success, highImpact }
  }

  const stats = getStats()

  return (
    <Card className="border-2 border-indigo-200">
      <CardHeader>
        <CardTitle className="flex items-center gap-3">
          <Brain className="w-6 h-6 text-indigo-600" />
          ü§ñ AI –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        </CardTitle>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <select 
              value={selectedCategory} 
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="px-3 py-1 border rounded-lg"
            >
              <option value="all">–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</option>
              <option value="error">–û—à–∏–±–∫–∏</option>
              <option value="warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</option>
              <option value="success">–£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</option>
              <option value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
            </select>
            {diagnostics.length > 0 && (
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="bg-red-100 text-red-800">
                  {stats.errors} –æ—à–∏–±–æ–∫
                </Badge>
                <Badge variant="outline" className="bg-yellow-100 text-yellow-800">
                  {stats.warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                </Badge>
                <Badge variant="outline" className="bg-green-100 text-green-800">
                  {stats.success} OK
                </Badge>
              </div>
            )}
          </div>
          <button
            onClick={runDiagnostics}
            disabled={isAnalyzing}
            className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50"
          >
            {isAnalyzing ? (
              <>
                <RefreshCw className="w-4 h-4 animate-spin" />
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
              </>
            ) : (
              <>
                <Search className="w-4 h-4" />
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
              </>
            )}
          </button>
        </div>
      </CardHeader>
      <CardContent>
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ */}
        {isAnalyzing && (
          <div className="mb-6">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>AI –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã</span>
              <span>{Math.round(analysisProgress)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-indigo-600 h-2 rounded-full transition-all duration-500"
                style={{ width: `${analysisProgress}%` }}
              />
            </div>
          </div>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        {diagnostics.length > 0 && !isAnalyzing && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-red-50 p-4 rounded-lg border border-red-200">
              <div className="text-2xl font-bold text-red-600">{stats.errors}</div>
              <div className="text-sm text-red-700">–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫</div>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
              <div className="text-2xl font-bold text-yellow-600">{stats.warnings}</div>
              <div className="text-sm text-yellow-700">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</div>
            </div>
            <div className="bg-green-50 p-4 rounded-lg border border-green-200">
              <div className="text-2xl font-bold text-green-600">{stats.success}</div>
              <div className="text-sm text-green-700">–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ</div>
            </div>
            <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-200">
              <div className="text-2xl font-bold text-indigo-600">{stats.highImpact}</div>
              <div className="text-sm text-indigo-700">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</div>
            </div>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
        {filteredDiagnostics.length > 0 ? (
          <div className="space-y-4">
            {filteredDiagnostics.map((diagnostic) => (
              <Card key={diagnostic.id} className={`border ${getCategoryColor(diagnostic.category)}`}>
                <CardContent className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-3">
                      {getCategoryIcon(diagnostic.category)}
                      <div>
                        <h4 className="font-semibold text-gray-900">{diagnostic.title}</h4>
                        <p className="text-sm text-gray-600">{diagnostic.description}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {getImpactBadge(diagnostic.impact)}
                      <Badge variant="outline" className="bg-gray-100 text-gray-800">
                        {diagnostic.confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                      </Badge>
                    </div>
                  </div>

                  {/* –†–µ—à–µ–Ω–∏–µ */}
                  <div className="bg-white p-3 rounded-lg border mb-3">
                    <div className="flex items-center gap-2 mb-2">
                      <Lightbulb className="w-4 h-4 text-yellow-600" />
                      <span className="font-medium text-gray-900">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ:</span>
                    </div>
                    <p className="text-sm text-gray-700">{diagnostic.solution}</p>
                  </div>

                  {/* –ö–æ–º–∞–Ω–¥—ã */}
                  {diagnostic.commands && diagnostic.commands.length > 0 && (
                    <div className="mb-3">
                      <div className="flex items-center gap-2 mb-2">
                        <Wrench className="w-4 h-4 text-blue-600" />
                        <span className="font-medium text-gray-900">–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</span>
                      </div>
                      <div className="bg-gray-900 text-green-400 p-3 rounded-lg font-mono text-sm space-y-1">
                        {diagnostic.commands.map((command, index) => (
                          <div key={index} className="flex items-center justify-between">
                            <code>{command}</code>
                            <button
                              onClick={() => navigator.clipboard.writeText(command)}
                              className="text-gray-400 hover:text-green-400 ml-2"
                            >
                              üìã
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* –§–∞–π–ª—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                  {diagnostic.files && diagnostic.files.length > 0 && (
                    <div className="mb-3">
                      <div className="flex items-center gap-2 mb-2">
                        <FileText className="w-4 h-4 text-purple-600" />
                        <span className="font-medium text-gray-900">–§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</span>
                      </div>
                      <div className="space-y-1">
                        {diagnostic.files.map((file, index) => (
                          <div key={index} className="text-sm text-blue-600 hover:underline cursor-pointer">
                            üìÅ {file}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
                  {diagnostic.estimatedTime && (
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <Clock className="w-4 h-4" />
                      <span>–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {diagnostic.estimatedTime}</span>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          !isAnalyzing && (
            <div className="text-center py-8">
              <Brain className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600 mb-4">
                AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ
              </p>
              <button
                onClick={runDiagnostics}
                className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
              >
                –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
              </button>
            </div>
          )
        )}
      </CardContent>
    </Card>
  )
}

export default AIDiagnostics