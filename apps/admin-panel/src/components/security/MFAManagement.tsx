import React, { useState, useEffect } from 'react'
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle,
  Button,
  Input,
  Label,
  Badge,
  Alert,
  AlertDescription,
  AlertTitle
} from '@beauty-platform/ui'
import { 
  Shield, 
  Smartphone, 
  Key, 
  Download, 
  Copy, 
  Check, 
  AlertTriangle,
  QrCode,
  RefreshCw,
  Lock,
  Unlock
} from 'lucide-react'
import { apiService } from '../../services/api'
import { useAuth } from '../../contexts/AuthContext'

interface MFAStatus {
  enabled: boolean
  required: boolean
  trustedDevice: boolean
  status: {
    enabled: boolean
    lastVerified?: string
    backupCodesCount: number
    trustedDevicesCount: number
    method?: string
  }
}

interface MFASetupData {
  qrCodeUrl: string
  backupCodes: string[]
  setupToken: string
}

export const MFAManagement: React.FC = () => {
  const { user, isAuthenticated } = useAuth()
  const [mfaStatus, setMfaStatus] = useState<MFAStatus | null>(null)
  const [setupData, setSetupData] = useState<MFASetupData | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string>('')
  const [success, setSuccess] = useState<string>('')
  const [password, setPassword] = useState('')
  const [mfaToken, setMfaToken] = useState('')
  const [showSetup, setShowSetup] = useState(false)
  const [copiedBackupCodes, setCopiedBackupCodes] = useState(false)
  const [currentStep, setCurrentStep] = useState<'status' | 'setup' | 'verify' | 'complete'>('status')

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MFA –∏–∑ API
  const fetchMFAStatus = async () => {
    console.log('üîê Auth check - isAuthenticated:', isAuthenticated, 'user:', user)
    
    if (!isAuthenticated) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA')
      return
    }

    setIsLoading(true)
    try {
      console.log('üîê Fetching MFA status...')
      const response = await apiService.auth.getMFAStatus()
      console.log('‚úÖ MFA status response:', response)
      
      if (response.success) {
        setMfaStatus(response.data)
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ MFA')
      }
    } catch (err) {
      console.error('‚ùå MFA status fetch error:', err)
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ 401 –æ—à–∏–±–∫–æ–π
      if (err instanceof Error && err.message.includes('401')) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA')
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ MFA')
      }
    } finally {
      setIsLoading(false)
    }
  }

  const setupMFA = async () => {
    setIsLoading(true)
    setError('')
    
    try {
      const response = await apiService.post('/api/auth/mfa/setup/initiate', {})
      
      if (response.success) {
        setSetupData(response.data)
        setCurrentStep('setup')
        setPassword('')
        setSuccess('QR-–∫–æ–¥ –∏ backup –∫–æ–¥—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA')
      }
    } catch (err) {
      console.error('MFA setup error:', err)
      setError('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MFA')
    } finally {
      setIsLoading(false)
    }
  }

  const verifyMFA = async () => {
    if (!mfaToken) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Google Authenticator')
      return
    }

    setIsLoading(true)
    setError('')
    
    try {
      const response = await apiService.post('/api/auth/mfa/setup/complete', { 
        code: mfaToken,
        setupToken: setupData?.setupToken
      })
      
      if (response.success) {
        setCurrentStep('complete')
        setSuccess('MFA –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
        setMfaToken('')
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await fetchMFAStatus()
      } else {
        setError(response.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ MFA')
      }
    } catch (err) {
      console.error('MFA verify error:', err)
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ MFA')
    } finally {
      setIsLoading(false)
    }
  }

  const disableMFA = async () => {
    if (!password || !mfaToken) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏ MFA –∫–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è')
      return
    }

    setIsLoading(true)
    setError('')
    
    try {
      const response = await apiService.post('/api/auth/mfa/disable', { 
        password, 
        token: mfaToken 
      })
      
      if (response.success) {
        setCurrentStep('status')
        setSuccess('MFA –æ—Ç–∫–ª—é—á–µ–Ω–∞')
        setSetupData(null)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        await fetchMFAStatus()
      } else {
        setError(response.error || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MFA')
      }
    } catch (err) {
      console.error('MFA disable error:', err)
      setError('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MFA')
    } finally {
      setIsLoading(false)
      setPassword('')
      setMfaToken('')
    }
  }

  const copyBackupCodes = () => {
    if (setupData) {
      navigator.clipboard.writeText(setupData.backupCodes.join(', '))
      setCopiedBackupCodes(true)
      setTimeout(() => setCopiedBackupCodes(false), 2000)
    }
  }

  const downloadBackupCodes = () => {
    if (setupData) {
      const content = `Beauty Platform - MFA Backup Codes\n\n${setupData.backupCodes.join('\n')}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!`
      const blob = new Blob([content], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = 'beauty-platform-backup-codes.txt'
      a.click()
      URL.revokeObjectURL(url)
    }
  }

  useEffect(() => {
    fetchMFAStatus()
  }, [])

  if (isLoading && !mfaStatus) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center">
            <RefreshCw className="w-6 h-6 animate-spin mr-2" />
            –ó–∞–≥—Ä—É–∑–∫–∞...
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>–û—à–∏–±–∫–∞</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {success && (
        <Alert className="border-green-500 text-green-700">
          <Check className="h-4 w-4" />
          <AlertTitle>–£—Å–ø–µ—Ö</AlertTitle>
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}

      {/* –°—Ç–∞—Ç—É—Å MFA */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="w-5 h-5" />
            –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (MFA)
            {mfaStatus?.enabled ? (
              <Badge className="bg-green-500">–í–∫–ª—é—á–µ–Ω–∞</Badge>
            ) : (
              <Badge variant="destructive">–û—Ç–∫–ª—é—á–µ–Ω–∞</Badge>
            )}
          </CardTitle>
          <CardDescription>
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {mfaStatus?.required && (
            <Alert className="border-orange-500">
              <AlertTriangle className="h-4 w-4" />
              <AlertTitle>–¢—Ä–µ–±—É–µ—Ç—Å—è MFA</AlertTitle>
              <AlertDescription>
                –î–ª—è —Ä–æ–ª–∏ SUPER_ADMIN –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
              </AlertDescription>
            </Alert>
          )}

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label>–°—Ç–∞—Ç—É—Å MFA</Label>
              <div className="flex items-center gap-2">
                {mfaStatus?.enabled ? (
                  <>
                    <Lock className="w-4 h-4 text-green-600" />
                    <span className="text-green-600">–ê–∫—Ç–∏–≤–Ω–∞</span>
                  </>
                ) : (
                  <>
                    <Unlock className="w-4 h-4 text-red-600" />
                    <span className="text-red-600">–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</span>
                  </>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label>Backup –∫–æ–¥—ã</Label>
              <div className="flex items-center gap-2">
                <Key className="w-4 h-4" />
                <span>{mfaStatus?.status?.backupCodesCount || 0} —à—Ç.</span>
              </div>
            </div>

            <div className="space-y-2">
              <Label>–ú–µ—Ç–æ–¥</Label>
              <Badge variant="outline">{mfaStatus?.status?.method?.toUpperCase() || 'TOTP'}</Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ MFA */}
      {!mfaStatus?.enabled ? (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Smartphone className="w-5 h-5" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MFA
            </CardTitle>
            <CardDescription>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {currentStep === 'status' && (
              <div className="space-y-4">
                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <p className="text-blue-800 text-sm">
                    –í—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
                    –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Google Authenticator –∏–ª–∏ Authy.
                  </p>
                </div>
                <Button onClick={setupMFA} disabled={isLoading} className="w-full">
                  {isLoading ? (
                    <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                  ) : (
                    <Shield className="w-4 h-4 mr-2" />
                  )}
                  –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É MFA
                </Button>
              </div>
            )}

            {currentStep === 'setup' && setupData && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* QR Code */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <QrCode className="w-5 h-5" />
                        –®–∞–≥ 1: –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex justify-center p-4 bg-white rounded-lg border">
                        <img 
                          src={setupData.qrCodeUrl} 
                          alt="MFA QR Code"
                          className="w-48 h-48"
                        />
                      </div>
                      <p className="text-sm text-muted-foreground text-center">
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Authenticator, Authy –∏–ª–∏ –¥—Ä—É–≥–æ–µ TOTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                      </p>
                    </CardContent>
                  </Card>

                  {/* Instructions */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Key className="w-5 h-5" />
                        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-2">
                        <p className="text-sm">1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ</p>
                        <p className="text-sm">2. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" –∏–ª–∏ "+"</p>
                        <p className="text-sm">3. –í—ã–±–µ—Ä–∏—Ç–µ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥"</p>
                        <p className="text-sm">4. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ –≤—ã—à–µ</p>
                        <p className="text-sm">5. –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Backup Codes */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Download className="w-5 h-5" />
                      Backup –∫–æ–¥—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    </CardTitle>
                    <CardDescription>
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ. –ö–∞–∂–¥—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-2 p-4 bg-gray-50 rounded-lg">
                      {setupData.backupCodes.map((code, index) => (
                        <div key={index} className="font-mono text-sm text-center p-2 bg-white rounded border">
                          {code}
                        </div>
                      ))}
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" onClick={copyBackupCodes}>
                        {copiedBackupCodes ? (
                          <Check className="w-4 h-4 mr-2" />
                        ) : (
                          <Copy className="w-4 h-4 mr-2" />
                        )}
                        {copiedBackupCodes ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}
                      </Button>
                      <Button variant="outline" onClick={downloadBackupCodes}>
                        <Download className="w-4 h-4 mr-2" />
                        –°–∫–∞—á–∞—Ç—å
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Verification Step */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Check className="w-5 h-5" />
                      –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="mfaToken">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Label>
                      <Input
                        id="mfaToken"
                        type="text"
                        value={mfaToken}
                        onChange={(e) => setMfaToken(e.target.value)}
                        placeholder="123456"
                        maxLength={6}
                        className="font-mono text-center text-lg"
                      />
                    </div>
                    <Button onClick={verifyMFA} disabled={isLoading}>
                      {isLoading ? (
                        <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                      ) : (
                        <Check className="w-4 h-4 mr-2" />
                      )}
                      –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å MFA
                    </Button>
                  </CardContent>
                </Card>
              </div>
            )}

            {currentStep === 'complete' && (
              <div className="text-center space-y-4">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                  <Check className="w-8 h-8 text-green-600" />
                </div>
                <h3 className="text-lg font-semibold">MFA —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</h3>
                <p className="text-muted-foreground">
                  –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                </p>
                <Button onClick={() => {
                  setCurrentStep('status')
                  setSetupData(null)
                  setSuccess('')
                }}>
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-5 h-5 text-green-600" />
              MFA –∞–∫—Ç–∏–≤–Ω–∞
            </CardTitle>
            <CardDescription>
              –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert className="border-green-500">
              <Check className="h-4 w-4" />
              <AlertTitle>–ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞</AlertTitle>
              <AlertDescription>
                –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {(mfaStatus as any).backupCodesRemaining || 0} backup –∫–æ–¥–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
              </AlertDescription>
            </Alert>

            <div className="space-y-4">
              <h4 className="font-semibold">–û—Ç–∫–ª—é—á–∏—Ç—å MFA</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="disablePassword">–ü–∞—Ä–æ–ª—å</Label>
                  <Input
                    id="disablePassword"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="–í–∞—à –ø–∞—Ä–æ–ª—å"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="disableMfaToken">MFA –∫–æ–¥</Label>
                  <Input
                    id="disableMfaToken"
                    type="text"
                    value={mfaToken}
                    onChange={(e) => setMfaToken(e.target.value)}
                    placeholder="123456"
                    maxLength={6}
                    className="font-mono"
                  />
                </div>
              </div>
              <Button 
                variant="destructive" 
                onClick={disableMFA} 
                disabled={isLoading}
              >
                {isLoading ? (
                  <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                ) : (
                  <Unlock className="w-4 h-4 mr-2" />
                )}
                –û—Ç–∫–ª—é—á–∏—Ç—å MFA
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}