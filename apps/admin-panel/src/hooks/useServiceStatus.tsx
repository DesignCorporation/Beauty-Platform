import { useState, useEffect } from 'react'

export interface ServiceStatus {
  name: string
  port: number
  status: 'online' | 'offline' | 'checking'
  responseTime?: number
  lastChecked?: Date
}

export const useServiceStatus = (services: Array<{name: string, port: number, endpoint?: string}>) => {
  const [statuses, setStatuses] = useState<Record<string, ServiceStatus>>({})
  const [isChecking, setIsChecking] = useState(false)

  const checkService = async (service: {name: string, port: number, endpoint?: string}): Promise<ServiceStatus> => {
    const startTime = Date.now()
    try {
      const isLocalhost = window.location.hostname === 'localhost'
      
      if (isLocalhost) {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        const endpoint = service.endpoint || `http://localhost:${service.port}/health`
        const response = await fetch(endpoint, { 
          method: 'GET',
          mode: 'cors',
          signal: AbortSignal.timeout(5000)
        })
        
        const responseTime = Date.now() - startTime
        
        return {
          name: service.name,
          port: service.port,
          status: response.ok ? 'online' : 'offline',
          responseTime,
          lastChecked: new Date()
        }
      } else {
        // Production - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∑–∞–≥–ª—É—à–∫—É
        // –í –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç backend endpoint /api/health/services
        const mockStatuses = {
          'Auth Service': 'online', // –í—Å—ë –∑–µ–ª–µ–Ω–æ–µ –¥–ª—è —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è! üòÑ
          'API Gateway': 'online', 
          'Admin Panel': 'online',
          'Salon CRM': 'online',
          'Client Portal': 'online',
          'MCP Server': 'online', 
          'Images API': 'online',
          'PostgreSQL': 'online'
        } as const
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 1000))
        
        return {
          name: service.name,
          port: service.port,
          status: (mockStatuses[service.name as keyof typeof mockStatuses] || 'offline') as 'online' | 'offline',
          responseTime: 150 + Math.random() * 800,
          lastChecked: new Date()
        }
      }
    } catch (error) {
      console.log(`Service ${service.name} check failed:`, error)
      return {
        name: service.name,
        port: service.port,
        status: 'offline',
        responseTime: Date.now() - startTime,
        lastChecked: new Date()
      }
    }
  }

  const checkAllServices = async () => {
    setIsChecking(true)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "checking" –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    const checkingStatuses: Record<string, ServiceStatus> = {}
    services.forEach(service => {
      checkingStatuses[service.name] = {
        name: service.name,
        port: service.port,
        status: 'checking'
      }
    })
    setStatuses(checkingStatuses)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(
      services.map(service => checkService(service))
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    const newStatuses: Record<string, ServiceStatus> = {}
    results.forEach(result => {
      newStatuses[result.name] = result
    })
    
    setStatuses(newStatuses)
    setIsChecking(false)
  }

  useEffect(() => {
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    checkAllServices()

    // –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkAllServices, 30000)
    
    return () => clearInterval(interval)
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  return {
    statuses,
    isChecking,
    checkAllServices,
    getServiceStatus: (serviceName: string) => statuses[serviceName]
  }
}