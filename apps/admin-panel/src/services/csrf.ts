// CSRF Service –¥–ª—è Beauty Platform Admin Panel
// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

export class CSRFService {
  private static instance: CSRFService
  private token: string | null = null
  private readonly AUTH_API_URL = '/api/auth'

  private constructor() {}

  static getInstance(): CSRFService {
    if (!CSRFService.instance) {
      CSRFService.instance = new CSRFService()
    }
    return CSRFService.instance
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getToken(): Promise<string> {
    try {
      const response = await fetch(`${this.AUTH_API_URL}/csrf-token`, {
        method: 'GET',
        credentials: 'include', // –ö–†–ò–¢–ò–ß–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç httpOnly cookies
        headers: {
          'Content-Type': 'application/json'
        }
      })

      if (!response.ok) {
        throw new Error(`CSRF token fetch failed: ${response.status}`)
      }

      const data = await response.json()
      this.token = data.csrfToken || data.token

      if (!this.token) {
        throw new Error('CSRF token not found in response')
      }

      return this.token
    } catch (error) {
      if (error instanceof Error && error.message.includes('502')) {
        console.log('üîí CSRF service not available (server may be starting)')
      } else {
        console.error('‚ùå Failed to get CSRF token:', error)
      }
      throw error
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω (–ø—Ä–∏ 403 –æ—à–∏–±–∫–∞—Ö)
   */
  async refreshToken(): Promise<string> {
    this.token = null // –û—á–∏—â–∞–µ–º –∫—ç—à
    return await this.getToken()
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å CSRF —Ç–æ–∫–µ–Ω–æ–º
   */
  async getHeaders(): Promise<Record<string, string>> {
    if (!this.token) {
      await this.getToken()
    }

    return {
      'X-CSRF-Token': this.token!,
      'Content-Type': 'application/json'
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
   */
  getCurrentToken(): string | null {
    return this.token
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω (–ø—Ä–∏ logout)
   */
  clearToken(): void {
    this.token = null
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
   */
  hasValidToken(): boolean {
    return this.token !== null
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const csrfService = CSRFService.getInstance()