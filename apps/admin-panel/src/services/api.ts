// API Service —Å CSRF –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–ª—è Beauty Platform Admin Panel
// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CSRF —Ç–æ–∫–µ–Ω–æ–≤

import { csrfService } from './csrf'

export interface ApiRequestOptions {
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'
  body?: any
  headers?: Record<string, string>
  skipCSRF?: boolean // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
}

export class ApiService {
  private static instance: ApiService
  private readonly AUTH_API_URL = '/api/auth'

  private constructor() {}

  static getInstance(): ApiService {
    if (!ApiService.instance) {
      ApiService.instance = new ApiService()
    }
    return ApiService.instance
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π CSRF –∑–∞—â–∏—Ç–æ–π
   */
  async request<T = any>(
    endpoint: string,
    options: ApiRequestOptions = {}
  ): Promise<T> {
    const {
      method = 'GET',
      body,
      headers: customHeaders = {},
      skipCSRF = false
    } = options

    // –ë–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    let headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...customHeaders
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    const needsCSRF = ['POST', 'PUT', 'DELETE', 'PATCH'].includes(method) && !skipCSRF
    if (needsCSRF) {
      try {
        console.log('üîê Getting CSRF token for request...')
        const csrfHeaders = await csrfService.getHeaders()
        console.log('‚úÖ Got CSRF headers:', Object.keys(csrfHeaders))
        headers = { ...headers, ...csrfHeaders }
      } catch (error) {
        console.error('‚ùå Failed to get CSRF headers:', error)
        console.log('‚ö†Ô∏è Proceeding without CSRF token...')
        // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞
        // throw new Error('CSRF token required but unavailable')
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const requestOptions: RequestInit = {
      method,
      credentials: 'include', // –ö–†–ò–¢–ò–ß–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç httpOnly cookies
      headers
    }

    if (body && method !== 'GET') {
      requestOptions.body = JSON.stringify(body)
    }

    try {
      console.log(`üåê API Request: ${method} ${endpoint}`)
      console.log('üìã Request options:', { ...requestOptions, body: body ? 'redacted' : undefined })
      const response = await fetch(endpoint, requestOptions)
      console.log(`üì° Response status: ${response.status} ${response.statusText}`)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 403 - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSRF —Ç–æ–∫–µ–Ω
      if (response.status === 403 && needsCSRF) {
        console.log('403 error, refreshing CSRF token and retrying...')
        
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω
          await csrfService.refreshToken()
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const newCsrfHeaders = await csrfService.getHeaders()
          headers = { ...headers, ...newCsrfHeaders }
          requestOptions.headers = headers

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
          const retryResponse = await fetch(endpoint, requestOptions)
          
          if (!retryResponse.ok) {
            throw new Error(`API request failed: ${retryResponse.status} ${retryResponse.statusText}`)
          }

          return await this.parseResponse<T>(retryResponse)
        } catch (retryError) {
          console.error('CSRF retry failed:', retryError)
          throw retryError
        }
      }

      if (!response.ok) {
        // üîê 401 EXPECTED: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (response.status === 401) {
          console.log(`üîí Authentication required for ${method} ${endpoint} (expected behavior)`)
        } else {
          console.error(`‚ùå API Error: ${response.status} ${response.statusText} for ${method} ${endpoint}`)
        }
        throw new Error(`API request failed: ${response.status} ${response.statusText}`)
      }

      return await this.parseResponse<T>(response)
    } catch (error) {
      // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 401 –∫–∞–∫ –æ—à–∏–±–∫–∏
      if (error instanceof Error && error.message.includes('401')) {
        console.log('üîí Authentication check completed (user not authenticated)')
      } else {
        console.error('‚ùå API request error:', error)
      }
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private async parseResponse<T>(response: Response): Promise<T> {
    const contentType = response.headers.get('content-type')
    
    if (contentType && contentType.includes('application/json')) {
      return await response.json()
    }
    
    // –î–ª—è –Ω–µ-JSON –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const text = await response.text()
    return text as unknown as T
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å (–±–µ–∑ CSRF)
   */
  async get<T = any>(endpoint: string, headers?: Record<string, string>): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET', headers: headers || {}, skipCSRF: true })
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å (—Å CSRF)
   */
  async post<T = any>(endpoint: string, body?: any, headers?: Record<string, string>): Promise<T> {
    return this.request<T>(endpoint, { method: 'POST', body, headers: headers || {} })
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å (—Å CSRF)
   */
  async put<T = any>(endpoint: string, body?: any, headers?: Record<string, string>): Promise<T> {
    return this.request<T>(endpoint, { method: 'PUT', body, headers: headers || {} })
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å (—Å CSRF)
   */
  async delete<T = any>(endpoint: string, headers?: Record<string, string>): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE', headers: headers || {} })
  }

  /**
   * Auth-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  auth = {
    me: () => this.get(`${this.AUTH_API_URL}/me`),
    login: (email: string, password: string) => 
      this.post(`${this.AUTH_API_URL}/login`, { email, password }),
    logout: () => this.post(`${this.AUTH_API_URL}/logout`),
    refresh: () => this.post(`${this.AUTH_API_URL}/refresh`),
    permissions: () => this.get(`${this.AUTH_API_URL}/permissions`),
    completeMFA: (userId: string, code: string, email: string) =>
      this.post(`${this.AUTH_API_URL}/mfa/complete-login`, { userId, code, email }),
    getMFAStats: () => this.get(`${this.AUTH_API_URL}/mfa/stats`),
    getMFAStatus: () => this.get(`${this.AUTH_API_URL}/mfa/status`)
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const apiService = ApiService.getInstance()