// Currency management system –¥–ª—è Beauty Platform Salon CRM
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞: USD, EUR, PLN, UAH (–±–µ–∑ RUB —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ)

export interface Currency {
  code: string
  name: string
  symbol: string
  flag: string
  defaultLocale: string
}

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Prisma enum Currency
export const supportedCurrencies: Currency[] = [
  {
    code: 'PLN',
    name: 'Polish Zloty',
    symbol: 'z≈Ç',
    flag: 'üáµüá±',
    defaultLocale: 'pl-PL'
  },
  {
    code: 'EUR',
    name: 'Euro',
    symbol: '‚Ç¨',
    flag: 'üá™üá∫',
    defaultLocale: 'en-EU'
  },
  {
    code: 'USD',
    name: 'US Dollar',
    symbol: '$',
    flag: 'üá∫üá∏',
    defaultLocale: 'en-US'
  },
  {
    code: 'UAH',
    name: 'Ukrainian Hryvnia',
    symbol: '‚Ç¥',
    flag: 'üá∫üá¶',
    defaultLocale: 'uk-UA'
  }
]

export type SupportedCurrency = 'PLN' | 'EUR' | 'USD' | 'UAH'

// –ö–ª—é—á –¥–ª—è localStorage
const CURRENCY_STORAGE_KEY = 'salon-crm-currency'

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (PLN –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤ –ü–æ–ª—å—à–µ)
export const getDefaultCurrency = (): SupportedCurrency => 'PLN'

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã –∏–∑ localStorage –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const getCurrentCurrency = (): SupportedCurrency => {
  if (typeof window === 'undefined') return getDefaultCurrency()
  
  const saved = localStorage.getItem(CURRENCY_STORAGE_KEY)
  if (saved && supportedCurrencies.find(c => c.code === saved)) {
    return saved as SupportedCurrency
  }
  
  return getDefaultCurrency()
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞–ª—é—Ç—ã
export const setCurrency = (currency: SupportedCurrency): void => {
  if (typeof window === 'undefined') return
  
  localStorage.setItem(CURRENCY_STORAGE_KEY, currency)
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  window.dispatchEvent(new CustomEvent('currency-changed', { 
    detail: { currency } 
  }))
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç—ã
export const getCurrencyData = (code?: SupportedCurrency): Currency => {
  const currencyCode = code || getCurrentCurrency()
  return supportedCurrencies.find(c => c.code === currencyCode) || supportedCurrencies[0]
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏ –∏–∑ i18next
export const formatPrice = (
  amount: number, 
  currency?: SupportedCurrency,
  options?: Intl.NumberFormatOptions
): string => {
  const currencyData = getCurrencyData(currency)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å –∏–∑ i18next –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  let locale = currencyData.defaultLocale
  if (typeof window !== 'undefined' && (window as any).i18next) {
    // –ú–∞–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ i18next –Ω–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –≤–∞–ª—é—Ç
    const localeMap: Record<string, string> = {
      'en': 'en-US',
      'pl': 'pl-PL', 
      'ua': 'uk-UA',
      'ru': 'ru-RU'
    }
    locale = localeMap[(window as any).i18next.language] || currencyData.defaultLocale
  }
  
  const formatOptions: Intl.NumberFormatOptions = {
    style: 'currency',
    currency: currencyData.code,
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
    ...options
  }
  
  try {
    return new Intl.NumberFormat(locale, formatOptions).format(amount)
  } catch {
    // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Intl.NumberFormat –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å
    return `${currencyData.symbol}${amount.toFixed(2)}`
  }
}

// –•—É–∫ –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–æ–π
export const useCurrency = () => {
  const [currency, setCurrencyState] = React.useState<SupportedCurrency>(getCurrentCurrency())
  
  React.useEffect(() => {
    const handleCurrencyChange = (event: CustomEvent<{ currency: SupportedCurrency }>) => {
      setCurrencyState(event.detail.currency)
    }
    
    window.addEventListener('currency-changed', handleCurrencyChange as EventListener)
    return () => {
      window.removeEventListener('currency-changed', handleCurrencyChange as EventListener)
    }
  }, [])
  
  const changeCurrency = (newCurrency: SupportedCurrency) => {
    setCurrency(newCurrency)
    setCurrencyState(newCurrency)
  }
  
  return {
    currency,
    currencyData: getCurrencyData(currency),
    changeCurrency,
    formatPrice: (amount: number, options?: Intl.NumberFormatOptions) => 
      formatPrice(amount, currency, options),
    supportedCurrencies
  }
}

// –ò–º–ø–æ—Ä—Ç React –¥–ª—è —Ö—É–∫–∞
import React from 'react'

export default {
  supportedCurrencies,
  getCurrentCurrency,
  setCurrency,
  getCurrencyData,
  formatPrice,
  useCurrency
}