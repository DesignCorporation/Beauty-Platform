// üöÄ BEAUTY CRM API Client - –ß–ò–°–¢–ê–Ø –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê!
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É CRM API (6022) —Å –ø–æ–ª–Ω—ã–º tenant isolation
// üéØ –ù–æ–≤—ã–π CRM API URL - –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ nginx proxy  
const CRM_API_BASE_URL = '/api/crm';
// HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ cookies
class CRMApiClient {
    constructor() {
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.baseUrl = CRM_API_BASE_URL;
    }
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const response = await fetch(url, {
            ...options,
            credentials: 'include', // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º httpOnly cookies (JWT —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        });
        if (!response.ok) {
            if (response.status === 401) {
                // Session expired - redirect to login
                console.log('üîê Session expired, redirecting to login');
                window.location.href = '/login';
                return;
            }
            const error = await response.json().catch(() => ({ error: 'Network error' }));
            throw new Error(error.error || `HTTP ${response.status}`);
        }
        return response.json();
    }
    // HTTP –º–µ—Ç–æ–¥—ã
    async get(endpoint) {
        return this.request(endpoint, { method: 'GET' });
    }
    async post(endpoint, data) {
        return this.request(endpoint, {
            method: 'POST',
            body: data ? JSON.stringify(data) : undefined,
        });
    }
    async put(endpoint, data) {
        return this.request(endpoint, {
            method: 'PUT',
            body: data ? JSON.stringify(data) : undefined,
        });
    }
    async delete(endpoint) {
        return this.request(endpoint, { method: 'DELETE' });
    }
}
const apiClient = new CRMApiClient();
// No hardcode fallback data - always use real API data
const demoServicesBackup = [
    {
        id: '1',
        tenantId: 'demo-tenant',
        name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        description: '–û–±—ã—á–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
        duration: 60,
        price: 80,
        status: 'ACTIVE',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    },
    {
        id: '2',
        tenantId: 'demo-tenant',
        name: '–ü–µ–¥–∏–∫—é—Ä SPA',
        description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –ø–µ–¥–∏–∫—é—Ä —Å —É—Ö–æ–¥–æ–º',
        duration: 90,
        price: 120,
        status: 'ACTIVE',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    }
];
// üöÄ –ù–û–í–´–ô CRM API Service - –†–ï–ê–õ–¨–ù–´–ï HTTP –ó–ê–ü–†–û–°–´
export class CRMApiService {
    // ‚úÖ CLIENTS CRUD - –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    static async getClients() {
        try {
            console.log('üöÄ [NEW CRM API] Fetching clients from real API');
            const response = await apiClient.get('/clients');
            return {
                success: response.success,
                clients: response.data || []
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error fetching clients:', error);
            // Fallback: –ü–æ–ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π demo endpoint —á–µ—Ä–µ–∑ nginx
            try {
                console.log('üîÑ [DEMO] Trying demo endpoint through nginx proxy...');
                const demoUrl = '/demo/clients';
                const demoResponse = await fetch(demoUrl);
                if (demoResponse.ok) {
                    const demoData = await demoResponse.json();
                    if (demoData.success && demoData.data) {
                        console.log('üéâ [DEMO] Got real data from demo endpoint!');
                        return {
                            success: true,
                            clients: demoData.data.map((client) => ({
                                id: client.id,
                                tenantId: client.tenantId || 'demo-tenant',
                                name: client.name,
                                email: client.email,
                                phone: client.phone,
                                notes: client.notes,
                                birthday: client.birthday,
                                status: client.status || 'ACTIVE',
                                createdAt: client.createdAt,
                                updatedAt: client.updatedAt || client.createdAt
                            }))
                        };
                    }
                }
            }
            catch (debugError) {
                console.error('[NEW CRM API] Debug endpoint also failed:', debugError);
            }
            // –ï—Å–ª–∏ –≤—Å–µ API endpoints –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            console.log('‚ùå All API endpoints failed, returning empty array');
            return { success: false, clients: [] };
        }
    }
    static async createClient(clientData) {
        try {
            console.log('üöÄ [NEW CRM API] Creating client:', clientData);
            const response = await apiClient.post('/clients', clientData);
            return {
                success: response.success,
                client: response.data
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error creating client:', error);
            return { success: false };
        }
    }
    static async updateClient(id, clientData) {
        try {
            console.log(`üöÄ [NEW CRM API] Updating client ${id}:`, clientData);
            const response = await apiClient.put(`/clients/${id}`, clientData);
            return {
                success: response.success,
                client: response.data
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error updating client:', error);
            return { success: false };
        }
    }
    static async deleteClient(id) {
        try {
            console.log(`üöÄ [NEW CRM API] Deleting client ${id}`);
            const response = await apiClient.delete(`/clients/${id}`);
            return { success: response.success };
        }
        catch (error) {
            console.error('[NEW CRM API] Error deleting client:', error);
            return { success: false };
        }
    }
    // ‚úÖ SERVICES CRUD - –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    static async getServices() {
        try {
            console.log('üöÄ [NEW CRM API] Fetching services from real API');
            const response = await apiClient.get('/services');
            return {
                success: response.success,
                services: response.data || []
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error fetching services:', error);
            // Fallback: –ü–æ–ø—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π demo endpoint —á–µ—Ä–µ–∑ nginx
            try {
                console.log('üîÑ [DEMO] Trying demo services endpoint through nginx proxy...');
                const demoUrl = '/demo/services';
                const demoResponse = await fetch(demoUrl);
                if (demoResponse.ok) {
                    const demoData = await demoResponse.json();
                    if (demoData.success && demoData.data) {
                        console.log('üéâ [DEMO] Got real services data from demo endpoint!');
                        return {
                            success: true,
                            services: demoData.data.map((service) => ({
                                id: service.id,
                                tenantId: service.tenantId,
                                name: service.name,
                                description: service.description,
                                duration: service.duration,
                                price: service.price,
                                status: service.status || 'ACTIVE',
                                createdAt: service.createdAt,
                                updatedAt: service.updatedAt || service.createdAt
                            }))
                        };
                    }
                }
            }
            catch (debugError) {
                console.error('[NEW CRM API] Demo services endpoint also failed:', debugError);
            }
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω—ã demo —É—Å–ª—É–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º—ã
            const improvedDemoServices = [
                {
                    id: '1',
                    tenantId: 'demo-tenant',
                    baseName: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
                    name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
                    description: '–û–±—ã—á–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
                    durationMin: 60,
                    duration: 60, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
                    priceAmount: 80,
                    price: 80, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
                    priceCurrency: 'PLN',
                    status: 'ACTIVE',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                },
                {
                    id: '2',
                    tenantId: 'demo-tenant',
                    baseName: '–ü–µ–¥–∏–∫—é—Ä SPA',
                    name: '–ü–µ–¥–∏–∫—é—Ä SPA',
                    description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –ø–µ–¥–∏–∫—é—Ä —Å —É—Ö–æ–¥–æ–º',
                    durationMin: 90,
                    duration: 90,
                    priceAmount: 120,
                    price: 120,
                    priceCurrency: 'PLN',
                    status: 'ACTIVE',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                },
                {
                    id: '3',
                    tenantId: 'demo-tenant',
                    baseName: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è',
                    name: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è',
                    description: '–ú–æ–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞ —Å —É–∫–ª–∞–¥–∫–æ–π',
                    durationMin: 45,
                    duration: 45,
                    priceAmount: 100,
                    price: 100,
                    priceCurrency: 'PLN',
                    status: 'ACTIVE',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                },
                {
                    id: '4',
                    tenantId: 'demo-tenant',
                    baseName: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
                    name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
                    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ',
                    durationMin: 120,
                    duration: 120,
                    priceAmount: 200,
                    price: 200,
                    priceCurrency: 'PLN',
                    status: 'ACTIVE',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                }
            ];
            console.log('üîÑ Final fallback to improved demo services data');
            return { success: true, services: improvedDemoServices };
        }
    }
    static async createService(serviceData) {
        try {
            console.log('üöÄ [NEW CRM API] Creating service:', serviceData);
            const response = await apiClient.post('/services', serviceData);
            return {
                success: response.success,
                service: response.data
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error creating service:', error);
            return { success: false };
        }
    }
    static async updateService(id, serviceData) {
        try {
            console.log(`üöÄ [NEW CRM API] Updating service ${id}:`, serviceData);
            const response = await apiClient.put(`/services/${id}`, serviceData);
            return {
                success: response.success,
                service: response.data
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error updating service:', error);
            return { success: false };
        }
    }
    static async deleteService(id) {
        try {
            console.log(`üöÄ [NEW CRM API] Deleting service ${id}`);
            const response = await apiClient.delete(`/services/${id}`);
            return { success: response.success };
        }
        catch (error) {
            console.error('[NEW CRM API] Error deleting service:', error);
            return { success: false };
        }
    }
    // ‚úÖ APPOINTMENTS CRUD - –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
    static async getAppointments(params) {
        try {
            console.log('üöÄ [NEW CRM API] Fetching appointments from real API');
            const queryParams = new URLSearchParams();
            if (params?.date)
                queryParams.append('date', params.date);
            if (params?.staffId)
                queryParams.append('staffId', params.staffId);
            const endpoint = `/appointments${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
            const response = await apiClient.get(endpoint);
            return {
                success: response.success,
                appointments: response.data || []
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error fetching appointments:', error);
            return { success: true, appointments: [] };
        }
    }
    static async getCalendarAppointments(startDate, endDate) {
        try {
            console.log('üöÄ [NEW CRM API] Fetching calendar appointments');
            const response = await apiClient.get(`/appointments/calendar?startDate=${startDate}&endDate=${endDate}`);
            return {
                success: response.success,
                appointments: response.data || []
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error fetching calendar appointments:', error);
            return { success: true, appointments: [] };
        }
    }
    static async createAppointment(appointmentData) {
        try {
            console.log('üöÄ [NEW CRM API] Creating appointment:', appointmentData);
            const response = await apiClient.post('/appointments', appointmentData);
            return {
                success: response.success,
                appointment: response.data
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error creating appointment:', error);
            return { success: false };
        }
    }
    static async updateAppointment(id, appointmentData) {
        try {
            console.log(`üöÄ [NEW CRM API] Updating appointment ${id}:`, appointmentData);
            const response = await apiClient.put(`/appointments/${id}`, appointmentData);
            return {
                success: response.success,
                appointment: response.data
            };
        }
        catch (error) {
            console.error('[NEW CRM API] Error updating appointment:', error);
            return { success: false };
        }
    }
    static async deleteAppointment(id) {
        try {
            console.log(`üöÄ [NEW CRM API] Deleting appointment ${id}`);
            const response = await apiClient.delete(`/appointments/${id}`);
            return { success: response.success };
        }
        catch (error) {
            console.error('[NEW CRM API] Error deleting appointment:', error);
            return { success: false };
        }
    }
    // ‚úÖ STAFF - –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã —Å fallback –¥–∞–Ω–Ω—ã–º–∏
    static async getStaff() {
        console.log('üöÄ [NEW CRM API] Fetching staff from real API');
        const response = await apiClient.get('/staff');
        if (!response || !response.success) {
            throw new Error('Failed to fetch staff');
        }
        return {
            success: true,
            staff: response.data || []
        };
    }
}
// üöÄ –ì–û–¢–û–í–û! –ù–æ–≤—ã–π CRM API –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
console.log('üöÄ New CRM API Service initialized - connected to real backend!');
