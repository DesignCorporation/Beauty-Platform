// üöÄ BEAUTY CRM API Client - –ß–ò–°–¢–ê–Ø –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê!
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É CRM API (6022) —Å –ø–æ–ª–Ω—ã–º tenant isolation
// Default tenant ID for demo purposes
const DEFAULT_TENANT_ID = 'cme8tfr5i0000urav4f7ygprd';
// üéØ –ù–æ–≤—ã–π CRM API URL - –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ nginx proxy
const CRM_API_BASE_URL = '/api/crm';
// HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ cookies
class CRMApiClient {
    constructor() {
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.baseUrl = CRM_API_BASE_URL;
    }
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const response = await fetch(url, {
            ...options,
            credentials: 'include', // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º httpOnly cookies
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        });
        if (!response.ok) {
            const error = await response.json().catch(() => ({ error: 'Network error' }));
            throw new Error(error.error || `HTTP ${response.status}`);
        }
        return response.json();
    }
    // HTTP –º–µ—Ç–æ–¥—ã
    async get(endpoint) {
        return this.request(endpoint, { method: 'GET' });
    }
    async post(endpoint, data) {
        return this.request(endpoint, {
            method: 'POST',
            body: data ? JSON.stringify(data) : undefined,
        });
    }
    async put(endpoint, data) {
        return this.request(endpoint, {
            method: 'PUT',
            body: data ? JSON.stringify(data) : undefined,
        });
    }
    async delete(endpoint) {
        return this.request(endpoint, { method: 'DELETE' });
    }
}
const apiClient = new CRMApiClient();
// Fallback demo data (backup when API is not available)
const demoClientsBackup = [
    {
        id: '1',
        tenantId: 'demo-tenant',
        name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
        email: 'anna.ivanova@example.com',
        phone: '+48123456789',
        notes: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç–∫–∞',
        birthday: '1990-05-15',
        status: 'ACTIVE',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    },
    {
        id: '2',
        tenantId: 'demo-tenant',
        name: '–ú–∞—Ä–∏—è –ö–æ–≤–∞–ª—å—Å–∫–∞—è',
        email: 'maria.kowal@example.com',
        phone: '+48987654321',
        status: 'ACTIVE',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    }
];
const demoServicesBackup = [
    {
        id: '1',
        tenantId: 'demo-tenant',
        name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
        description: '–û–±—ã—á–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
        duration: 60,
        price: 80,
        status: 'ACTIVE',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    },
    {
        id: '2',
        tenantId: 'demo-tenant',
        name: '–ü–µ–¥–∏–∫—é—Ä —Å–ø–∞',
        description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–∞—Ä–∞—Ñ–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏–µ–π',
        duration: 90,
        price: 120,
        status: 'ACTIVE',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
    }
];
// üî• –ë–´–°–¢–†–ê–Ø DEMO-–í–ï–†–°–ò–Ø CRM API (–∑–∞–º–µ–Ω–∏—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã)
export class CrmApiService {
    // üéØ Clients API - demo –¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ HTTP API call)
    static async getClients(tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log(`üî• [CRM API] Getting DEMO clients for tenant: ${tenantId}`);
            // –°–∏–º—É–ª—è—Ü–∏—è delay –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º API
            await new Promise(resolve => setTimeout(resolve, 100));
            return { success: true, clients: demoClientsBackup };
        }
        catch (error) {
            console.error('[CRM API] Error getting clients:', error);
            return { success: false, clients: [] };
        }
    }
    static async createClient(clientData, tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log('üî• [CRM API] Creating DEMO client:', clientData);
            const newClient = {
                id: Date.now().toString(),
                tenantId,
                ...clientData,
                status: 'ACTIVE',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP POST –∫ backend
            demoClientsBackup.push(newClient);
            return { success: true, client: newClient };
        }
        catch (error) {
            console.error('[CRM API] Error creating client:', error);
            return { success: false };
        }
    }
    // üéØ Services API - demo –¥–∞–Ω–Ω—ã–µ 
    static async getServices(tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log(`üî• [CRM API] Getting DEMO services for tenant: ${tenantId}`);
            await new Promise(resolve => setTimeout(resolve, 100));
            return { success: true, services: demoServicesBackup };
        }
        catch (error) {
            console.error('[CRM API] Error getting services:', error);
            return { success: false, services: [] };
        }
    }
    static async createService(serviceData, tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log('üî• [CRM API] Creating DEMO service:', serviceData);
            const newService = {
                id: Date.now().toString(),
                tenantId,
                ...serviceData,
                status: 'ACTIVE',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };
            demoServicesBackup.push(newService);
            return { success: true, service: newService };
        }
        catch (error) {
            console.error('[CRM API] Error creating service:', error);
            return { success: false };
        }
    }
    // üéØ Appointments API - demo –¥–∞–Ω–Ω—ã–µ
    static async getAppointments(startDate, endDate, tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log(`üî• [CRM API] Getting DEMO appointments for tenant: ${tenantId}`, { startDate, endDate });
            await new Promise(resolve => setTimeout(resolve, 100));
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å demo –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∂–µ
            return { success: true, appointments: [] };
        }
        catch (error) {
            console.error('[CRM API] Error getting appointments:', error);
            return { success: false, appointments: [] };
        }
    }
    static async createAppointment(appointmentData, tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log('üî• [CRM API] Creating DEMO appointment:', appointmentData);
            // –í demo –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            console.log('Demo appointment created successfully!');
            return { success: true };
        }
        catch (error) {
            console.error('[CRM API] Error creating appointment:', error);
            return { success: false };
        }
    }
    static async updateAppointment(id, appointmentData, tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log(`üî• [CRM API] Updating DEMO appointment ${id}:`, appointmentData);
            console.log('Demo appointment updated successfully!');
            return { success: true };
        }
        catch (error) {
            console.error('[CRM API] Error updating appointment:', error);
            return { success: false };
        }
    }
    static async deleteAppointment(id, tenantId = DEFAULT_TENANT_ID) {
        try {
            console.log(`üî• [CRM API] Deleting DEMO appointment ${id}`);
            console.log('Demo appointment deleted successfully!');
            return { success: true };
        }
        catch (error) {
            console.error('[CRM API] Error deleting appointment:', error);
            return { success: false };
        }
    }
}
// üöÄ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å CRM —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤, —Ç–æ–ª—å–∫–æ —Å demo –¥–∞–Ω–Ω—ã–º–∏
console.log('üî• CRM API Service initialized with DEMO data - ready for browser!');
