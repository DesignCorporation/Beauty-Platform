import { useState, useEffect, useCallback, useRef } from 'react';
import apiClient from '../utils/api-client';
import { useDebugLogger, useEffectDebugger, useStateDebugger } from './useDebugLogger';
export const useAuth = () => {
    const [authState, setAuthState] = useState({
        isAuthenticated: false,
        user: null,
        loading: true,
        error: null,
    });
    // üîç DEBUG: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    useDebugLogger('useAuth', authState);
    useStateDebugger('authState', authState);
    // ‚úÖ DEBOUNCE: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const lastFetchTime = useRef(0);
    const debounceTimeout = useRef();
    const DEBOUNCE_DELAY = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    const refreshIntervalRef = useRef(null);
    const SESSION_REFRESH_INTERVAL = 60 * 60 * 1000; // 1 —á–∞—Å
    // ‚úÖ –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Auth Service —Å DEBOUNCE
    const fetchUser = useCallback(async (force = false, skipAuthPageCheck = false) => {
        // üö´ –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞)
        if (typeof window !== 'undefined' && !skipAuthPageCheck) {
            const isAuthPage = window.location.pathname.includes('/login') ||
                window.location.pathname.includes('/register');
            if (isAuthPage && !force) {
                console.log('üö´ useAuth.fetchUser: BLOCKED on auth page', {
                    pathname: window.location.pathname,
                    href: window.location.href,
                    timestamp: new Date().toISOString()
                });
                return;
            }
        }
        const now = Date.now();
        // ‚úÖ DEBOUNCE: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        if (now - lastFetchTime.current < DEBOUNCE_DELAY) {
            console.log('‚è≥ useAuth: Debouncing auth check, skipping request');
            return;
        }
        lastFetchTime.current = now;
        try {
            console.log('üöÄ useAuth: Checking authentication with Auth Service');
            setAuthState(prev => ({ ...prev, loading: true, error: null }));
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Auth Service
            console.log('üì° useAuth: Making API request to /me');
            const response = await apiClient.get('/me');
            console.log('üì° useAuth: API response received:', response);
            if (response.success && response.user) {
                console.log('‚úÖ User authenticated:', response.user.email);
                setAuthState({
                    isAuthenticated: true,
                    user: response.user,
                    loading: false,
                    error: null,
                });
            }
            else {
                throw new Error('User not authenticated');
            }
        }
        catch (error) {
            console.log('‚ùå Auth check failed - user not authenticated:', error);
            setAuthState({
                isAuthenticated: false,
                user: null,
                loading: false,
                error: null, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º error –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            });
            // –ï—Å–ª–∏ –º—ã –ù–ï –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ù–ï –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
            // ProtectedRoute –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
            if (typeof window !== 'undefined' &&
                !window.location.pathname.includes('/login') &&
                !window.location.pathname.includes('/register')) {
                console.log('üîê Auth failed - ProtectedRoute will handle redirect');
            }
        }
    }, []);
    // ‚úÖ –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –ù–ï –ó–ê–ü–£–°–ö–ê–ï–ú useEffect –Ω–∞ auth —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    useEffect(() => {
        console.log('üî• useAuth useEffect STARTED', {
            pathname: window?.location?.pathname,
            href: window?.location?.href,
            timestamp: new Date().toISOString()
        });
        // üö´ –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ª–æ–≥–∏–Ω–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (typeof window !== 'undefined') {
            const isAuthPage = window.location.pathname.includes('/login') ||
                window.location.pathname.includes('/register');
            if (isAuthPage) {
                console.log('üö´ useAuth useEffect: COMPLETELY BLOCKED on auth page', {
                    pathname: window.location.pathname,
                    href: window.location.href,
                    timestamp: new Date().toISOString()
                });
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è auth —Å—Ç—Ä–∞–Ω–∏—Ü
                setAuthState({
                    isAuthenticated: false,
                    user: null,
                    loading: false, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ auth —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
                    error: null,
                });
                console.log('üö´ useAuth useEffect: EARLY RETURN - no API calls');
                return; // –ü–û–õ–ù–´–ô –í–´–•–û–î –ò–ó useEffect
            }
        }
        const checkAuth = () => {
            console.log('üîê REAL AUTH: Checking authentication with Auth Service');
            fetchUser();
        };
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ –Ω–µ-auth —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        checkAuth();
        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            if (debounceTimeout.current) {
                clearTimeout(debounceTimeout.current);
            }
        };
    }, []); // –ù–ò–ö–ê–ö–ò–• dependencies –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è re-render
    // üîç DEBUG: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º useEffect
    useEffectDebugger('useAuth-main-effect', []);
    // ‚úÖ –í–ö–õ–Æ–ß–ï–ù–û - —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Auth Service
    const login = useCallback(async (credentials) => {
        try {
            console.log('üîß useAuth.login: Authenticating with Auth Service');
            setAuthState(prev => ({ ...prev, loading: true, error: null }));
            // –î–æ–±–∞–≤–ª—è–µ–º salonSlug –µ—Å–ª–∏ –µ—Å—Ç—å tenantSlug
            const loginData = {
                ...credentials,
                salonSlug: credentials.tenantSlug
            };
            const response = await apiClient.post('/login', loginData);
            if (response.success) {
                console.log('‚úÖ Login successful');
                // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É auth —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                await fetchUser(true, true);
                return { success: true };
            }
            else {
                throw new Error(response.error || 'Login failed');
            }
        }
        catch (error) {
            console.error('‚ùå Login failed:', error);
            const errorMessage = error instanceof Error ? error.message : 'Login failed';
            setAuthState(prev => ({ ...prev, loading: false, error: errorMessage }));
            return { success: false, error: errorMessage };
        }
    }, []); // –£–±–∏—Ä–∞–µ–º fetchUser –∏–∑ dependencies —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞
    // –õ–æ–≥–∞—É—Ç
    const logout = useCallback(async () => {
        try {
            // –í—ã–∑—ã–≤–∞–µ–º logout endpoint –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            await apiClient.post('/logout', {});
        }
        catch (error) {
            console.error('Logout error:', error);
        }
        finally {
            if (refreshIntervalRef.current) {
                clearInterval(refreshIntervalRef.current);
                refreshIntervalRef.current = null;
            }
            // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setAuthState({
                isAuthenticated: false,
                user: null,
                loading: false,
                error: null,
            });
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
            apiClient.reset();
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
            window.location.href = '/login';
        }
    }, []);
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ API client)
    const refreshAuth = useCallback(async () => {
        // üö´ –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (typeof window !== 'undefined') {
            const isAuthPage = window.location.pathname.includes('/login') ||
                window.location.pathname.includes('/register');
            if (isAuthPage) {
                console.log('üö´ useAuth.refreshAuth: BLOCKED on auth page');
                return;
            }
        }
        await fetchUser();
    }, []); // –£–±–∏—Ä–∞–µ–º fetchUser –∏–∑ dependencies —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞
    useEffect(() => {
        if (authState.isAuthenticated) {
            const performRefresh = async () => {
                try {
                    console.log('üîÑ useAuth: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
                    await apiClient.post('/refresh');
                }
                catch (error) {
                    console.error('‚ùå useAuth: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å', error);
                }
            };
            if (refreshIntervalRef.current) {
                clearInterval(refreshIntervalRef.current);
            }
            refreshIntervalRef.current = setInterval(performRefresh, SESSION_REFRESH_INTERVAL);
            return () => {
                if (refreshIntervalRef.current) {
                    clearInterval(refreshIntervalRef.current);
                    refreshIntervalRef.current = null;
                }
            };
        }
        if (refreshIntervalRef.current) {
            clearInterval(refreshIntervalRef.current);
            refreshIntervalRef.current = null;
        }
    }, [authState.isAuthenticated]);
    return {
        ...authState,
        login,
        logout,
        refreshAuth,
        refetch: fetchUser,
    };
};
