// Secure API Client with CSRF protection
// Based on Beauty Platform security documentation
import ENVIRONMENT from '../config/environment';
class SecureApiClient {
    constructor() {
        Object.defineProperty(this, "csrfToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "baseUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.baseUrl = ENVIRONMENT.getAuthUrl();
        console.log('üîß Auth URL from environment:', this.baseUrl);
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ —Å auth service
    async getCSRFToken() {
        if (this.csrfToken) {
            return this.csrfToken;
        }
        try {
            console.log('üîß Getting CSRF token from auth service...');
            const response = await fetch(`${this.baseUrl}/csrf-token`, {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            if (!response.ok) {
                throw new Error(`Failed to get CSRF token: ${response.status}`);
            }
            const data = await response.json();
            this.csrfToken = data.csrfToken;
            console.log('‚úÖ CSRF token obtained successfully');
            return this.csrfToken;
        }
        catch (error) {
            console.error('‚ùå Failed to get CSRF token:', error);
            throw error;
        }
    }
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CSRF –∏ —Ç–æ–∫–µ–Ω–æ–≤
    async request(endpoint, options = {}) {
        const { skipCSRF = false, ...requestOptions } = options;
        const url = endpoint.startsWith('http') ? endpoint : `${this.baseUrl}${endpoint}`;
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const headers = {
            'Content-Type': 'application/json',
            ...requestOptions.headers,
        };
        // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω—è—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (!skipCSRF && ['POST', 'PUT', 'DELETE', 'PATCH'].includes(requestOptions.method || 'GET')) {
            try {
                const csrfToken = await this.getCSRFToken();
                headers['X-CSRF-Token'] = csrfToken;
            }
            catch (error) {
                console.warn('Failed to get CSRF token, proceeding without it:', error);
            }
        }
        try {
            console.log('üåê API Request:', {
                method: requestOptions.method || 'GET',
                url,
                headers,
                timestamp: new Date().toISOString(),
                isAuthPage: typeof window !== 'undefined' &&
                    (window.location.pathname.includes('/login') ||
                        window.location.pathname.includes('/register'))
            });
            const response = await fetch(url, {
                ...requestOptions,
                credentials: 'include', // –ö–†–ò–¢–ò–ß–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç httpOnly cookies
                headers,
            });
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            if (response.status === 401) {
                // üö´ –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if (typeof window !== 'undefined') {
                    const isAuthPage = window.location.pathname.includes('/login') ||
                        window.location.pathname.includes('/register');
                    if (isAuthPage) {
                        console.log('üö´ API client: Skip token refresh on auth page');
                        throw new Error('Authentication failed');
                    }
                }
                // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
                const refreshSuccess = await this.refreshToken();
                if (refreshSuccess) {
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    return this.request(endpoint, options);
                }
                else {
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
                    this.handleAuthFailure();
                    throw new Error('Authentication failed');
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ CSRF –æ—à–∏–±–æ–∫
            if (response.status === 403) {
                const errorData = await response.json().catch(() => ({}));
                if (errorData.code === 'EBADCSRFTOKEN') {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    this.csrfToken = null;
                    return this.request(endpoint, options);
                }
            }
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));
                throw new Error(errorData.message || `HTTP ${response.status}`);
            }
            return response.json();
        }
        catch (error) {
            console.error('API request failed:', error);
            throw error;
        }
    }
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    async refreshToken() {
        try {
            const response = await fetch(`${this.baseUrl}/refresh`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            return response.ok;
        }
        catch (error) {
            console.error('Token refresh failed:', error);
            return false;
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    handleAuthFailure() {
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('user');
        localStorage.removeItem('isAuthenticated');
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç —Ç—É—Ç
        // –ü—É—Å—Ç—å useAuth —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
        console.log('üö® Authentication failed - token invalid or expired');
    }
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏ –ª–æ–≥–∞—É—Ç–µ)
    reset() {
        this.csrfToken = null;
    }
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async get(endpoint) {
        return this.request(endpoint, { method: 'GET' });
    }
    async post(endpoint, data) {
        return this.request(endpoint, {
            method: 'POST',
            body: data ? JSON.stringify(data) : undefined,
        });
    }
    async put(endpoint, data) {
        return this.request(endpoint, {
            method: 'PUT',
            body: data ? JSON.stringify(data) : undefined,
        });
    }
    async delete(endpoint) {
        return this.request(endpoint, { method: 'DELETE' });
    }
}
// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const apiClient = new SecureApiClient();
export default apiClient;
