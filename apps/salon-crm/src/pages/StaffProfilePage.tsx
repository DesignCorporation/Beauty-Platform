import { useEffect, useMemo, useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  Button,
  Badge,
  Input,
  Label,
  Textarea,
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
  Switch,
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
} from '@beauty-platform/ui'
import { ArrowLeft, Edit3, Save, X, Mail, Phone, Shield, DollarSign, Award, Calendar, Sparkles } from 'lucide-react'
import { useStaff } from '../hooks/useStaff'
import { useToast } from '../contexts/ToastContext'
import { useTranslation } from 'react-i18next'
import { useCurrency } from '../currency'

const STAFF_COLORS = [
  { label: 'Indigo', value: '#6366f1' },
  { label: 'Violet', value: '#8b5cf6' },
  { label: 'Pink', value: '#ec4899' },
  { label: 'Coral', value: '#fb7185' },
  { label: 'Amber', value: '#f59e0b' },
  { label: 'Emerald', value: '#10b981' },
  { label: 'Teal', value: '#06b6d4' },
  { label: 'Slate', value: '#64748b' },
]

const LANGUAGE_OPTIONS = [
  { code: 'pl', name: 'Polski', flag: 'üáµüá±' },
  { code: 'en', name: 'English', flag: 'üá¨üáß' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { code: 'ua', name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
]

const DEFAULT_SCHEDULE = [
  { day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', start: '09:00', end: '18:00', isWorking: true },
  { day: '–í—Ç–æ—Ä–Ω–∏–∫', start: '09:00', end: '18:00', isWorking: true },
  { day: '–°—Ä–µ–¥–∞', start: '09:00', end: '18:00', isWorking: true },
  { day: '–ß–µ—Ç–≤–µ—Ä–≥', start: '09:00', end: '18:00', isWorking: true },
  { day: '–ü—è—Ç–Ω–∏—Ü–∞', start: '09:00', end: '17:00', isWorking: true },
  { day: '–°—É–±–±–æ—Ç–∞', start: '10:00', end: '15:00', isWorking: true },
  { day: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', start: '-', end: '-', isWorking: false },
]

export default function StaffProfilePage() {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const { staff } = useStaff()
  const { showToast } = useToast()
  const { t } = useTranslation()
  const { formatPrice, supportedCurrencies, currency, changeCurrency } = useCurrency()

  const staffMember = useMemo(() => staff.find((item) => item.id === id) ?? null, [staff, id])

  const [activeTab, setActiveTab] = useState<'overview' | 'schedule' | 'settings'>('overview')
  const [isEditing, setIsEditing] = useState(false)
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    color: '#6366f1',
    spokenLanguages: ['pl'],
    canSeeFinances: false,
    bio: '',
    specialties: '–°—Ç—Ä–∏–∂–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —É—Ö–æ–¥',
    notes: '',
  })

  useEffect(() => {
    if (!staffMember) return
    setFormData({
      firstName: staffMember.firstName,
      lastName: staffMember.lastName,
      email: staffMember.email,
      phone: staffMember.phone || '',
      color: staffMember.color || '#6366f1',
      spokenLanguages: staffMember.permissions?.filter((perm) => perm.startsWith('lang:')).map((perm) => perm.replace('lang:', '')) || ['pl'],
      canSeeFinances: staffMember.canSeeFinances ?? false,
      bio: '',
      specialties: '–°—Ç—Ä–∏–∂–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —É—Ö–æ–¥',
      notes: '',
    })
  }, [staffMember])

  if (!staffMember) {
    return (
      <div className="min-h-screen bg-slate-50 p-6">
        <div className="mx-auto flex max-w-4xl items-center justify-center rounded-2xl bg-white p-12 shadow-sm">
          <div className="space-y-3 text-center">
            <div className="text-lg font-medium text-slate-900">{t('team.profile.notFoundTitle', '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')}</div>
            <p className="text-slate-500">{t('team.profile.notFoundSubtitle', '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ–º–∞–Ω–¥—ã')}</p>
            <Button onClick={() => navigate('/team')}>
              <ArrowLeft className="mr-2 h-4 w-4" />
              {t('team.profile.backToTeam', '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É')}
            </Button>
          </div>
        </div>
      </div>
    )
  }

  const fullName = `${staffMember.firstName} ${staffMember.lastName}`.trim()
  const initials = `${staffMember.firstName?.charAt(0) ?? ''}${staffMember.lastName?.charAt(0) ?? ''}`.toUpperCase() || '??'
  const accentColor = formData.color
  const createdAt = staffMember.createdAt ? new Date(staffMember.createdAt) : null
  const tenure = createdAt ? Math.max(0, Math.round((Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24 * 30))) : null

  const handleLanguageToggle = (code: string) => {
    setFormData((prev) => ({
      ...prev,
      spokenLanguages: prev.spokenLanguages.includes(code)
        ? prev.spokenLanguages.filter((lang) => lang !== code)
        : [...prev.spokenLanguages, code],
    }))
  }

  const handleSave = () => {
    showToast({
      title: t('team.profile.savedTitle', '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω'),
      description: t('team.profile.savedDescription', '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API'),
      variant: 'success',
    })
    setIsEditing(false)
  }

  const handleCancel = () => {
    if (staffMember) {
      setIsEditing(false)
      setFormData({
        firstName: staffMember.firstName,
        lastName: staffMember.lastName,
        email: staffMember.email,
        phone: staffMember.phone || '',
        color: staffMember.color || '#6366f1',
        spokenLanguages: staffMember.permissions?.filter((perm) => perm.startsWith('lang:')).map((perm) => perm.replace('lang:', '')) || ['pl'],
        canSeeFinances: staffMember.canSeeFinances ?? false,
        bio: '',
        specialties: '–°—Ç—Ä–∏–∂–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —É—Ö–æ–¥',
        notes: '',
      })
    }
  }

  const metrics = {
    avgTicket: formatPrice(65 + (staffMember.priority ?? 1) * 12, { minimumFractionDigits: 0, maximumFractionDigits: 0 }),
    monthlyRevenue: formatPrice(5200 + (staffMember.priority ?? 1) * 320, { maximumFractionDigits: 0 }),
    satisfaction: `${88 + Math.min(10, (staffMember.priority ?? 1) * 2)}%`,
  }

  return (
    <div className="min-h-screen bg-slate-50 pb-16">
      <div className="mx-auto flex w-full max-w-6xl flex-col gap-6 px-4 py-6">
        <div className="flex items-center justify-between">
          <Button variant="ghost" onClick={() => navigate(-1)} className="text-slate-600">
            <ArrowLeft className="mr-2 h-4 w-4" />
            {t('team.profile.back', '–ù–∞–∑–∞–¥ –∫ –∫–æ–º–∞–Ω–¥–µ')}
          </Button>
          <div className="flex items-center gap-2">
            {!isEditing && (
              <Button variant="outline" onClick={() => setIsEditing(true)}>
                <Edit3 className="mr-2 h-4 w-4" />
                {t('team.profile.edit', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')}
              </Button>
            )}
            {isEditing && (
              <>
                <Button variant="ghost" onClick={handleCancel}>
                  <X className="mr-2 h-4 w-4" />
                  {t('team.profile.cancel', '–û—Ç–º–µ–Ω–∞')}
                </Button>
                <Button onClick={handleSave}>
                  <Save className="mr-2 h-4 w-4" />
                  {t('team.profile.save', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')}
                </Button>
              </>
            )}
          </div>
        </div>

        <Card className="border-slate-200">
          <CardContent className="flex flex-col gap-6 p-6 lg:flex-row lg:items-center">
            <div className="relative mx-auto flex h-32 w-32 items-center justify-center rounded-full text-3xl font-semibold text-white shadow" style={{ backgroundColor: accentColor }}>
              {initials}
              {staffMember.isActive && <span className="absolute -top-1 -right-1 h-4 w-4 rounded-full border-2 border-white bg-emerald-400" />}
            </div>
            <div className="flex-1 space-y-4">
              <div>
                <div className="flex flex-wrap items-center gap-3">
                  <CardTitle className="text-2xl text-slate-900">{fullName}</CardTitle>
                  <Badge variant="outline" className="border-slate-200 text-slate-600">
                    {t(`team.roles.${staffMember.role}`, staffMember.role)}
                  </Badge>
                  <Badge variant={staffMember.status === 'ACTIVE' ? 'default' : 'secondary'}>
                    {staffMember.status === 'ACTIVE' ? t('common.active', '–ê–∫—Ç–∏–≤–µ–Ω') : t('common.inactive', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω')}
                  </Badge>
                </div>
                <CardDescription className="mt-1 text-slate-500">
                  {t('team.profile.subtitle', '–ü—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞')}
                </CardDescription>
              </div>

              <div className="grid gap-4 sm:grid-cols-3">
                <div className="rounded-xl border border-slate-100 bg-slate-50 px-4 py-3">
                  <div className="text-xs uppercase tracking-wide text-slate-500">
                    {t('team.profile.avgTicket', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫')}
                  </div>
                  <div className="text-lg font-semibold text-slate-900">{metrics.avgTicket}</div>
                </div>
                <div className="rounded-xl border border-slate-100 bg-slate-50 px-4 py-3">
                  <div className="text-xs uppercase tracking-wide text-slate-500">
                    {t('team.profile.monthlyRevenue', '–ú–µ—Å—è—á–Ω—ã–π –æ–±–æ—Ä–æ—Ç')}
                  </div>
                  <div className="text-lg font-semibold text-slate-900">{metrics.monthlyRevenue}</div>
                </div>
                <div className="rounded-xl border border-slate-100 bg-slate-50 px-4 py-3">
                  <div className="text-xs uppercase tracking-wide text-slate-500">
                    {t('team.profile.satisfaction', '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤')}
                  </div>
                  <div className="text-lg font-semibold text-emerald-600">{metrics.satisfaction}</div>
                </div>
              </div>

              <div className="grid gap-3 md:grid-cols-2">
                <div className="flex items-center gap-2 text-slate-600">
                  <Mail className="h-4 w-4 text-slate-400" />
                  <span>{staffMember.email}</span>
                </div>
                {staffMember.phone && (
                  <div className="flex items-center gap-2 text-slate-600">
                    <Phone className="h-4 w-4 text-slate-400" />
                    <span>{staffMember.phone}</span>
                  </div>
                )}
                {createdAt && (
                  <div className="flex items-center gap-2 text-slate-600">
                    <Calendar className="h-4 w-4 text-slate-400" />
                    <span>
                      {t('team.profile.joined', '–í –∫–æ–º–∞–Ω–¥–µ —Å')} {createdAt.toLocaleDateString()}
                    </span>
                  </div>
                )}
                {tenure !== null && (
                  <div className="flex items-center gap-2 text-slate-600">
                    <Award className="h-4 w-4 text-slate-400" />
                    <span>
                      {tenure >= 12
                        ? t('team.profile.tenureYears', { defaultValue: '{{count}} –ª–µ—Ç', count: Math.floor(tenure / 12) })
                        : t('team.profile.tenureMonths', { defaultValue: '{{count}} –º–µ—Å', count: tenure })}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as typeof activeTab)} className="mt-4">
          <TabsList className="grid w-full grid-cols-3 bg-white">
            <TabsTrigger value="overview">{t('team.profile.overviewTab', '–û–±–∑–æ—Ä')}</TabsTrigger>
            <TabsTrigger value="schedule">{t('team.profile.scheduleTab', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')}</TabsTrigger>
            <TabsTrigger value="settings">{t('team.profile.settingsTab', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="mt-6 space-y-6">
            <div className="grid gap-6 lg:grid-cols-3">
              <Card className="border-slate-200 lg:col-span-2">
                <CardHeader>
                  <CardTitle>{t('team.profile.specialties', '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ —É—Å–ª—É–≥–∏')}</CardTitle>
                  <CardDescription>
                    {t('team.profile.specialtiesHint', '–ó–∞–¥–∞–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏')}
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex flex-wrap gap-2 text-sm text-slate-600">
                    {formData.specialties.split(',').map((item) => (
                      <Badge key={item} variant="outline" className="border-slate-200 text-slate-600">
                        <Sparkles className="mr-1 h-3 w-3" />
                        {item.trim()}
                      </Badge>
                    ))}
                  </div>
                  <Textarea
                    value={formData.bio}
                    onChange={(event) => setFormData((prev) => ({ ...prev, bio: event.target.value }))}
                    placeholder={t('team.profile.bioPlaceholder', '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å—Ç–∏–ª–µ —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö –∏ –ª—é–±–∏–º—ã—Ö —É—Å–ª—É–≥–∞—Ö')}
                    className="min-h-[120px]"
                    disabled={!isEditing}
                  />
                </CardContent>
              </Card>

              <Card className="border-slate-200">
                <CardHeader>
                  <CardTitle>{t('team.profile.languagesTitle', '–Ø–∑—ã–∫–∏ –æ–±—â–µ–Ω–∏—è')}</CardTitle>
                  <CardDescription>{t('team.profile.languagesSubtitle', '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤')}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  {LANGUAGE_OPTIONS.map((language) => (
                    <label key={language.code} className="flex items-center justify-between rounded-lg border border-slate-200 bg-white px-3 py-2">
                      <span className="flex items-center gap-2 text-sm text-slate-600">
                        <span className="text-lg">{language.flag}</span>
                        {language.name}
                      </span>
                      <Switch
                        checked={formData.spokenLanguages.includes(language.code)}
                        onCheckedChange={() => handleLanguageToggle(language.code)}
                        disabled={!isEditing}
                      />
                    </label>
                  ))}
                </CardContent>
              </Card>
            </div>

            <Card className="border-slate-200">
              <CardHeader>
                <CardTitle>{t('team.profile.accessTitle', '–ü—Ä–∞–≤–∞ –∏ –¥–æ—Å—Ç—É–ø')}</CardTitle>
                <CardDescription>{t('team.profile.accessSubtitle', '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º')}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <label className="flex items-center justify-between rounded-lg border border-slate-200 bg-white px-3 py-2">
                  <span className="flex items-center gap-2 text-sm text-slate-600">
                    <Shield className="h-4 w-4 text-slate-400" />
                    {t('team.profile.permissions.finances', '–î–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º')}
                  </span>
                  <Switch
                    checked={formData.canSeeFinances}
                    onCheckedChange={(value) => setFormData((prev) => ({ ...prev, canSeeFinances: value }))}
                    disabled={!isEditing}
                  />
                </label>
                <label className="flex items-center justify-between rounded-lg border border-slate-200 bg-white px-3 py-2">
                  <span className="flex items-center gap-2 text-sm text-slate-600">
                    <DollarSign className="h-4 w-4 text-slate-400" />
                    {t('team.profile.permissions.pricing', '–ü—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã —É—Å–ª—É–≥')}
                  </span>
                  <Badge variant="outline" className="border-slate-200 text-slate-600">
                    {t('team.profile.permissions.availableSoon', '–°–∫–æ—Ä–æ')}
                  </Badge>
                </label>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="schedule" className="mt-6 space-y-6">
            <Card className="border-slate-200">
              <CardHeader>
                <CardTitle>{t('team.profile.scheduleTitle', '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã')}</CardTitle>
                <CardDescription>
                  {t('team.profile.scheduleSubtitle', '–ì–∏–±–∫–æ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –º–∞—Å—Ç–µ—Ä–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ CRM')}
                </CardDescription>
              </CardHeader>
              <CardContent className="overflow-hidden rounded-xl border border-slate-100 bg-white">
                <div className="grid gap-2">
                  {DEFAULT_SCHEDULE.map((item) => (
                    <div key={item.day} className="grid grid-cols-2 items-center gap-2 rounded-lg bg-slate-50 px-4 py-3 text-sm text-slate-600">
                      <span className="font-medium text-slate-700">{item.day}</span>
                      {item.isWorking ? (
                        <span className="justify-self-end text-slate-800">
                          {item.start} ‚Äî {item.end}
                        </span>
                      ) : (
                        <span className="justify-self-end text-slate-400">{t('team.profile.dayOff', '–í—ã—Ö–æ–¥–Ω–æ–π')}</span>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="border-slate-200">
              <CardHeader>
                <CardTitle>{t('team.profile.notesTitle', '–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã')}</CardTitle>
                <CardDescription>{t('team.profile.notesSubtitle', '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Å—Ç–µ—Ä–æ–º')}</CardDescription>
              </CardHeader>
              <CardContent>
                <Textarea
                  value={formData.notes}
                  onChange={(event) => setFormData((prev) => ({ ...prev, notes: event.target.value }))}
                  placeholder={t('team.profile.notesPlaceholder', '–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ –¥–æ 16:00, –≤–µ–¥–µ—Ç VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–±—É—á–∞–µ—Ç –Ω–æ–≤—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤')}
                  className="min-h-[120px]"
                  disabled={!isEditing}
                />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="settings" className="mt-6 space-y-6">
            <Card className="border-slate-200">
              <CardHeader>
                <CardTitle>{t('team.profile.appearanceTitle', '–°—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–∞')}</CardTitle>
                <CardDescription>{t('team.profile.appearanceSubtitle', '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∞—Å—Ç–µ—Ä–∞ –≤ CRM')}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Label>{t('team.profile.colorLabel', '–ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç')}</Label>
                <div className="flex flex-wrap gap-2">
                  {STAFF_COLORS.map((color) => (
                    <button
                      key={color.value}
                      type="button"
                      className={`h-10 w-10 rounded-full border-2 ${formData.color === color.value ? 'border-slate-900' : 'border-transparent'}`}
                      style={{ backgroundColor: color.value }}
                      onClick={() => isEditing && setFormData((prev) => ({ ...prev, color: color.value }))}
                      aria-label={color.label}
                    />
                  ))}
                </div>
                <Input
                  value={formData.color}
                  onChange={(event) => setFormData((prev) => ({ ...prev, color: event.target.value }))}
                  disabled={!isEditing}
                />
              </CardContent>
            </Card>

            <Card className="border-slate-200">
              <CardHeader>
                <CardTitle>{t('team.profile.currencyTitle', '–í–∞–ª—é—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π')}</CardTitle>
                <CardDescription>{t('team.profile.currencySubtitle', '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ KPI –º–∞—Å—Ç–µ—Ä–∞ –≤ —É–¥–æ–±–Ω–æ–π –≤–∞–ª—é—Ç–µ')}</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                <Select value={currency} onValueChange={(value) => changeCurrency(value as any)}>
                  <SelectTrigger className="w-full bg-white sm:w-64">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {supportedCurrencies.map((item) => (
                      <SelectItem key={item.code} value={item.code}>
                        {item.flag} {item.code} ‚Äî {item.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <p className="text-sm text-slate-500">
                  {t('team.profile.currencyHint', '–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–ª–æ–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –¥–∞—à–±–æ—Ä–¥—ã')}
                </p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
