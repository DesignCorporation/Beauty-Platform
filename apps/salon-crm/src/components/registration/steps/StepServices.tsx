import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@beauty-platform/ui';
import { Scissors, Sparkles, Eye, Waves, Palette, Zap, Syringe, Heart, Users, User, Building2, Factory, CheckCircle } from 'lucide-react';
import { RegistrationData } from '../MultiStepRegistration';

interface StepServicesProps {
  data: RegistrationData;
  updateData: (data: Partial<RegistrationData>) => void;
  onNext: () => void;
  onPrevious: () => void;
}

const StepServices: React.FC<StepServicesProps> = ({ data, updateData, onNext, onPrevious }) => {
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<{serviceCategories?: string}>({});

  const serviceCategories = [
    {
      id: 'hair',
      icon: Scissors,
      emoji: 'üíá‚Äç‚ôÄÔ∏è',
      title: t('registration.services.categories.hair.title', '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏'),
      description: t('registration.services.categories.hair.description', '–°—Ç—Ä–∏–∂–∫–∏, —É–∫–ª–∞–¥–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ'),
      popular: true
    },
    {
      id: 'nails',
      icon: Sparkles,
      emoji: 'üíÖ',
      title: t('registration.services.categories.nails.title', '–ú–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä'),
      description: t('registration.services.categories.nails.description', '–£—Ö–æ–¥ –∑–∞ –Ω–æ–≥—Ç—è–º–∏, –¥–∏–∑–∞–π–Ω'),
      popular: true
    },
    {
      id: 'brows',
      icon: Eye,
      emoji: 'üëÅÔ∏è',
      title: t('registration.services.categories.brows.title', '–ë—Ä–æ–≤–∏ –∏ —Ä–µ—Å–Ω–∏—Ü—ã'),
      description: t('registration.services.categories.brows.description', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ'),
      popular: true
    },
    {
      id: 'massage',
      icon: Waves,
      emoji: 'üíÜ‚Äç‚ôÄÔ∏è',
      title: t('registration.services.categories.massage.title', '–ú–∞—Å—Å–∞–∂ –∏ SPA'),
      description: t('registration.services.categories.massage.description', '–†–µ–ª–∞–∫—Å–∞—Ü–∏—è, —É—Ö–æ–¥ –∑–∞ —Ç–µ–ª–æ–º'),
      popular: false
    },
    {
      id: 'makeup',
      icon: Palette,
      emoji: 'üíÑ',
      title: t('registration.services.categories.makeup.title', '–í–∏–∑–∞–∂ –∏ –º–∞–∫–∏—è–∂'),
      description: t('registration.services.categories.makeup.description', '–í–µ—á–µ—Ä–Ω–∏–π, —Å–≤–∞–¥–µ–±–Ω—ã–π –º–∞–∫–∏—è–∂'),
      popular: false
    },
    {
      id: 'cosmetology',
      icon: Zap,
      emoji: 'üß¥',
      title: t('registration.services.categories.cosmetology.title', '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è'),
      description: t('registration.services.categories.cosmetology.description', '–ß–∏—Å—Ç–∫–∏, –ø–∏–ª–∏–Ω–≥–∏, —É—Ö–æ–¥—ã'),
      popular: false
    },
    {
      id: 'aesthetic',
      icon: Syringe,
      emoji: 'üíâ',
      title: t('registration.services.categories.aesthetic.title', '–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞'),
      description: t('registration.services.categories.aesthetic.description', '–ò–Ω—ä–µ–∫—Ü–∏–∏, –∫–æ–Ω—Ç—É—Ä–Ω–∞—è –ø–ª–∞—Å—Ç–∏–∫–∞'),
      popular: false
    },
    {
      id: 'fitness',
      icon: Heart,
      emoji: 'üßò‚Äç‚ôÄÔ∏è',
      title: t('registration.services.categories.fitness.title', '–§–∏—Ç–Ω–µ—Å –∏ –π–æ–≥–∞'),
      description: t('registration.services.categories.fitness.description', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –π–æ–≥–∞'),
      popular: false
    }
  ];

  const teamSizes = [
    {
      id: 'solo',
      icon: User,
      title: t('registration.services.teamSizes.solo.title', '–Ø —Ä–∞–±–æ—Ç–∞—é –æ–¥–∏–Ω'),
      description: t('registration.services.teamSizes.solo.description', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'),
      emoji: 'üë§'
    },
    {
      id: 'small',
      icon: Users,
      title: t('registration.services.teamSizes.small.title', '–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ 2-5 —á–µ–ª–æ–≤–µ–∫'),
      description: t('registration.services.teamSizes.small.description', '–ù–µ–±–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—Å—Ç–µ—Ä–æ–≤'),
      emoji: 'üë•'
    },
    {
      id: 'medium',
      icon: Building2,
      title: t('registration.services.teamSizes.medium.title', '–°—Ä–µ–¥–Ω–∏–π —Å–∞–ª–æ–Ω 6-15 —á–µ–ª–æ–≤–µ–∫'),
      description: t('registration.services.teamSizes.medium.description', '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã'),
      emoji: 'üè¢'
    },
    {
      id: 'large',
      icon: Factory,
      title: t('registration.services.teamSizes.large.title', '–ö—Ä—É–ø–Ω—ã–π —Å–∞–ª–æ–Ω 16+ —á–µ–ª–æ–≤–µ–∫'),
      description: t('registration.services.teamSizes.large.description', '–°–µ—Ç—å —Å–∞–ª–æ–Ω–æ–≤ –∏–ª–∏ –±–æ–ª—å—à–æ–π —Ü–µ–Ω—Ç—Ä'),
      emoji: 'üè≠'
    }
  ];

  const validateForm = (): boolean => {
    const newErrors: {serviceCategories?: string} = {};

    if (data.serviceCategories.length === 0) {
      newErrors.serviceCategories = t('registration.validation.serviceCategoriesRequired', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥');
    } else if (data.serviceCategories.length > 5) {
      newErrors.serviceCategories = t('registration.validation.serviceCategoriesMax', '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 800));
      onNext();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleServiceCategory = (categoryId: string) => {
    const currentCategories = data.serviceCategories;
    const isSelected = currentCategories.includes(categoryId);
    
    let newCategories;
    if (isSelected) {
      newCategories = currentCategories.filter(id => id !== categoryId);
    } else {
      if (currentCategories.length < 5) {
        newCategories = [...currentCategories, categoryId];
      } else {
        return; // –ú–∞–∫—Å–∏–º—É–º 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      }
    }
    
    updateData({ serviceCategories: newCategories });
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors.serviceCategories) {
      setErrors(prev => ({ ...prev, serviceCategories: undefined }));
    }
  };

  const handleTeamSizeChange = (teamSize: 'solo' | 'small' | 'medium' | 'large') => {
    updateData({ teamSize });
  };

  return (
    <div className="grid min-h-screen lg:grid-cols-2">
      {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–æ—Ä–º–∞ */}
      <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="w-full max-w-lg space-y-8">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center">
            <h1 className="text-3xl font-bold tracking-tight text-gray-900">
              Beauty Platform
            </h1>
            <h2 className="mt-6 text-2xl font-semibold text-gray-900">
              {t('registration.services.title', '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?')}
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              {t('registration.services.subtitle', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞')}
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium text-gray-900">
                  {t('registration.services.popular', '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏')}
                </h3>
                <div className="text-sm text-gray-600">
                  {data.serviceCategories.length}/5
                </div>
              </div>
              
              <div className="grid grid-cols-1 gap-3">
                {serviceCategories.filter(cat => cat.popular).map((category) => {
                  const IconComponent = category.icon;
                  const isSelected = data.serviceCategories.includes(category.id);
                  const isDisabled = !isSelected && data.serviceCategories.length >= 5;
                  
                  return (
                    <button
                      key={category.id}
                      type="button"
                      onClick={() => !isDisabled && toggleServiceCategory(category.id)}
                      disabled={isDisabled}
                      className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        isSelected
                          ? 'border-gray-900 bg-gray-50 text-gray-900'
                          : isDisabled
                          ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed'
                          : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-lg ${
                          isSelected ? 'bg-gray-100' : 'bg-gray-100'
                        }`}>
                          <IconComponent className={`w-5 h-5 ${
                            isSelected ? 'text-gray-900' : 'text-gray-600'
                          }`} />
                        </div>
                        
                        <div className="flex-1">
                          <h3 className={`font-medium ${
                            isSelected ? 'text-gray-900' : 'text-gray-900'
                          }`}>
                            {category.title}
                          </h3>
                          <p className={`text-sm ${
                            isSelected ? 'text-gray-600' : 'text-gray-600'
                          }`}>
                            {category.description}
                          </p>
                        </div>

                        {isSelected && (
                          <div className="w-5 h-5 bg-gray-900 rounded-full flex items-center justify-center">
                            <div className="w-2 h-2 bg-white rounded-full" />
                          </div>
                        )}
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>

            {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">
                {t('registration.services.other', '–î—Ä—É–≥–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')}
              </h3>
              
              <div className="grid grid-cols-2 gap-3">
                {serviceCategories.filter(cat => !cat.popular).map((category) => {
                  const IconComponent = category.icon;
                  const isSelected = data.serviceCategories.includes(category.id);
                  const isDisabled = !isSelected && data.serviceCategories.length >= 5;
                  
                  return (
                    <button
                      key={category.id}
                      type="button"
                      onClick={() => !isDisabled && toggleServiceCategory(category.id)}
                      disabled={isDisabled}
                      className={`p-3 rounded-lg border-2 transition-all duration-200 text-left ${
                        isSelected
                          ? 'border-gray-900 bg-gray-50 text-gray-900'
                          : isDisabled
                          ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed'
                          : 'border-gray-300 hover:border-gray-400'
                      }`}
                    >
                      <div className="flex items-center space-x-2">
                        <IconComponent className={`w-4 h-4 ${
                          isSelected ? 'text-gray-900' : 'text-gray-600'
                        }`} />
                        <h3 className={`font-medium text-sm ${
                          isSelected ? 'text-gray-900' : 'text-gray-900'
                        }`}>
                          {category.title}
                        </h3>
                        {isSelected && (
                          <div className="w-3 h-3 bg-gray-900 rounded-full flex items-center justify-center ml-auto">
                            <div className="w-1 h-1 bg-white rounded-full" />
                          </div>
                        )}
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>

            {errors.serviceCategories && (
              <p className="text-sm text-red-500">{errors.serviceCategories}</p>
            )}

            {/* –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">
                {t('registration.services.teamSizeTitle', '–†–∞–∑–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã')}
              </h3>
              
              <div className="grid grid-cols-1 gap-3">
                {teamSizes.map((team) => {
                  const IconComponent = team.icon;
                  const isSelected = data.teamSize === team.id;
                  
                  return (
                    <button
                      key={team.id}
                      type="button"
                      onClick={() => handleTeamSizeChange(team.id as any)}
                      className={`p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                        isSelected
                          ? 'border-gray-900 bg-gray-50 text-gray-900'
                          : 'border-gray-300 hover:border-gray-400'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <div className="p-2 rounded-lg bg-gray-100">
                          <IconComponent className={`w-5 h-5 ${
                            isSelected ? 'text-gray-900' : 'text-gray-600'
                          }`} />
                        </div>
                        
                        <div className="flex-1">
                          <h3 className="font-medium text-gray-900">
                            {team.title}
                          </h3>
                          <p className="text-sm text-gray-600">
                            {team.description}
                          </p>
                        </div>

                        {isSelected && (
                          <div className="w-5 h-5 bg-gray-900 rounded-full flex items-center justify-center">
                            <div className="w-2 h-2 bg-white rounded-full" />
                          </div>
                        )}
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            <div className="flex space-x-4">
              <Button
                type="button"
                onClick={onPrevious}
                className="bg-white text-gray-900 border border-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2 px-6 py-2 rounded-md font-medium transition-colors"
              >
                {t('registration.back', '–ù–∞–∑–∞–¥')}
              </Button>
              
              <Button
                type="submit"
                className="flex-1 bg-gray-900 text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2 px-6 py-2 rounded-md font-medium transition-colors"
                disabled={isLoading || data.serviceCategories.length === 0}
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    {t('registration.saving', '–°–æ—Ö—Ä–∞–Ω—è–µ–º...')}
                  </div>
                ) : (
                  t('registration.continue', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
                )}
              </Button>
            </div>
          </form>
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="hidden lg:block relative">
        <div className="absolute inset-0 bg-gradient-to-br from-gray-900 to-gray-700">
          <div className="flex items-center justify-center h-full p-12">
            <div className="text-center text-white">
              <Scissors className="w-24 h-24 mx-auto mb-6 opacity-80" />
              <h3 className="text-3xl font-bold mb-4">
                –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —É—Å–ª—É–≥–∏
              </h3>
              <p className="text-lg opacity-90 mb-8">
                –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ –ø–æ–º–æ–∂–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–ª–æ–Ω–æ–º
              </p>
              <div className="space-y-3 text-left max-w-sm mx-auto">
                <div className="flex items-center">
                  <CheckCircle className="w-5 h-5 mr-3 text-green-400" />
                  <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥</span>
                </div>
                <div className="flex items-center">
                  <CheckCircle className="w-5 h-5 mr-3 text-green-400" />
                  <span>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</span>
                </div>
                <div className="flex items-center">
                  <CheckCircle className="w-5 h-5 mr-3 text-green-400" />
                  <span>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</span>
                </div>
                <div className="flex items-center">
                  <CheckCircle className="w-5 h-5 mr-3 text-green-400" />
                  <span>–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StepServices;