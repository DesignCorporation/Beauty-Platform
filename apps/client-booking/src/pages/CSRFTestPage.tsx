import { useState } from 'react'
import { Button, Card, CardContent, CardHeader, CardTitle } from '@beauty-platform/ui'
import { Shield, CheckCircle, XCircle } from 'lucide-react'
import { clientApi, csrfService } from '../services'

export default function CSRFTestPage() {
  const [results, setResults] = useState<Array<{
    test: string
    status: 'success' | 'error' | 'pending'
    message: string
  }>>([])
  const [isLoading, setIsLoading] = useState(false)

  const addResult = (test: string, status: 'success' | 'error', message: string) => {
    setResults(prev => [...prev, { test, status, message }])
  }

  const clearResults = () => {
    setResults([])
  }

  const runCSRFTests = async () => {
    setIsLoading(true)
    clearResults()

    try {
      // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
      addResult('1. CSRF Token', 'pending', '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...')
      const token = await csrfService.getToken()
      addResult('1. CSRF Token', 'success', `–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 10)}...`)

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–æ–∫–µ–Ω –∫—ç—à–∏—Ä—É–µ—Ç—Å—è
      addResult('2. Token Caching', 'pending', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...')
      const cachedToken = csrfService.getCurrentToken()
      if (cachedToken === token) {
        addResult('2. Token Caching', 'success', '–¢–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è')
      } else {
        addResult('2. Token Caching', 'error', '–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞')
      }

      // –¢–µ—Å—Ç 3: API –∑–∞–ø—Ä–æ—Å —Å CSRF –∑–∞—â–∏—Ç–æ–π
      addResult('3. API Request', 'pending', '–¢–µ—Å—Ç–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å...')
      try {
        const response = await clientApi.get('/health', { skipAuth: true })
        addResult('3. API Request', 'success', 'API –∑–∞–ø—Ä–æ—Å —Å CSRF —É—Å–ø–µ—à–µ–Ω')
      } catch (error: any) {
        if (error.message.includes('404') || error.message.includes('Endpoint not found')) {
          addResult('3. API Request', 'success', 'CSRF —Ä–∞–±–æ—Ç–∞–µ—Ç (endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ–∂–∏–¥–∞–µ–º–æ)')
        } else {
          addResult('3. API Request', 'error', `–û—à–∏–±–∫–∞ API: ${error.message}`)
        }
      }

      // –¢–µ—Å—Ç 4: Refresh —Ç–æ–∫–µ–Ω–∞
      addResult('4. Token Refresh', 'pending', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...')
      const newToken = await csrfService.refreshToken()
      if (newToken && newToken !== token) {
        addResult('4. Token Refresh', 'success', `–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${newToken.substring(0, 10)}...`)
      } else {
        addResult('4. Token Refresh', 'error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞')
      }

      // –¢–µ—Å—Ç 5: Clear —Ç–æ–∫–µ–Ω–∞
      addResult('5. Token Clear', 'pending', '–û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞...')
      csrfService.clearToken()
      const clearedToken = csrfService.getCurrentToken()
      if (clearedToken === null) {
        addResult('5. Token Clear', 'success', '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω')
      } else {
        addResult('5. Token Clear', 'error', '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞')
      }

    } catch (error: any) {
      addResult('Error', 'error', `–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Shield className="h-6 w-6 text-indigo-600" />
            <span>CSRF Protection Test</span>
          </CardTitle>
          <p className="text-gray-600">
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∑–∞—â–∏—Ç—ã –≤ Client Portal
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex space-x-4">
            <Button 
              onClick={runCSRFTests}
              disabled={isLoading}
              className="flex items-center space-x-2"
            >
              <Shield className="h-4 w-4" />
              <span>{isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å CSRF —Ç–µ—Å—Ç—ã'}</span>
            </Button>
            <Button 
              variant="outline"
              onClick={clearResults}
              disabled={isLoading}
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Button>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
          {results.length > 0 && (
            <div className="space-y-2">
              <h3 className="font-semibold text-lg">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</h3>
              <div className="space-y-2">
                {results.map((result, index) => (
                  <div 
                    key={index}
                    className={`flex items-center space-x-3 p-3 rounded border ${
                      result.status === 'success' 
                        ? 'bg-green-50 border-green-200 text-green-800'
                        : result.status === 'error'
                        ? 'bg-red-50 border-red-200 text-red-800'
                        : 'bg-blue-50 border-blue-200 text-blue-800'
                    }`}
                  >
                    {result.status === 'success' && <CheckCircle className="h-5 w-5 text-green-600" />}
                    {result.status === 'error' && <XCircle className="h-5 w-5 text-red-600" />}
                    {result.status === 'pending' && <div className="h-5 w-5 border-2 border-blue-600 border-t-transparent rounded-full animate-spin" />}
                    
                    <div className="flex-1">
                      <div className="font-medium">{result.test}</div>
                      <div className="text-sm opacity-75">{result.message}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSRF */}
          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded">
            <h4 className="font-medium text-blue-900 mb-2">üõ°Ô∏è –û CSRF Protection</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>‚Ä¢ CSRF —Ç–æ–∫–µ–Ω—ã –∑–∞—â–∏—â–∞—é—Ç –æ—Ç –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∞—Ç–∞–∫</li>
              <li>‚Ä¢ –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ POST/PUT/DELETE –∑–∞–ø—Ä–æ—Å–∞–º</li>
              <li>‚Ä¢ HttpOnly cookies –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</li>
              <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö 403</li>
              <li>‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Auth Service (–ø–æ—Ä—Ç 6021)</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}