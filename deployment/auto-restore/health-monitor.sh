#!/bin/bash

# Beauty Platform Health Monitor
# –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º

set -e

ENV_FILE="/root/projects/beauty/.env"
if [ -f "$ENV_FILE" ]; then
    set -a
    . "$ENV_FILE"
    set +a
fi

MONITOR_LOG="/root/projects/beauty/logs/health-monitor.log"
ALERT_LOG="/root/projects/beauty/logs/health-alerts.log"
RUN_DIR="/root/projects/beauty/deployment/auto-restore/run"
PID_FILE="$RUN_DIR/beauty-health-monitor.pid"
CHECK_INTERVAL=30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
FAILURE_THRESHOLD=5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
declare -A CRITICAL_SERVICES=(
    ["auth-service"]="6021:beauty-auth-service:http://localhost:6021/health"
    ["crm-api"]="6022:beauty-crm-api-6022:http://localhost:6022/health"
    ["admin-panel"]="6002:beauty-admin-panel-6002:http://localhost:6002/"
    ["salon-crm"]="6001:beauty-salon-crm:http://localhost:6001/"
    ["client-portal"]="6003:beauty-client-portal:http://localhost:6003/"
    ["api-gateway"]="6020:api-gateway-6020:http://localhost:6020/health"
    ["mcp-server"]="6025:beauty-mcp-server:http://localhost:6025/health"
    ["images-api"]="6026:beauty-images-api:http://localhost:6026/health"
)

# –°—á–µ—Ç—á–∏–∫–∏ –Ω–µ—É–¥–∞—á
declare -A FAILURE_COUNTS
declare -A LAST_STATUS
declare -A RESTART_COUNTS

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] MONITOR: $1" | tee -a "$MONITOR_LOG"
}

alert() {
    local message="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ALERT: $message" | tee -a "$ALERT_LOG"
    log "üö® ALERT: $message"
    send_telegram_alert "$message"
}

initialize_counters() {
    mkdir -p "$RUN_DIR"
    echo $$ > "$PID_FILE"
    for service in "${!CRITICAL_SERVICES[@]}"; do
        FAILURE_COUNTS["$service"]=0
        LAST_STATUS["$service"]="unknown"
        RESTART_COUNTS["$service"]=0
    done
}

check_service_health() {
    local service="$1"
    local config="${CRITICAL_SERVICES[$service]}"
    local port=$(echo "$config" | cut -d: -f1)
    local pm2_name=$(echo "$config" | cut -d: -f2)
    local health_url=$(echo "$config" | cut -d: -f3)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ PM2
    local pm2_status
    if command -v pm2 >/dev/null 2>&1; then
        pm2_status=$(pm2 jlist | jq -r ".[] | select(.name==\"$pm2_name\") | .pm2_env.status" 2>/dev/null || echo "not_found")
    else
        pm2_status="not_found"
    fi
    [[ -z "$pm2_status" ]] && pm2_status="not_found"
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
    local port_check=$(lsof -t -i:$port 2>/dev/null | wc -l)
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP endpoint
    local http_check="false"
    local http_status=$(curl -s -o /dev/null -w "%{http_code}" \
        --ipv4 \
        --connect-timeout 5 \
        --max-time 10 \
        --retry 2 \
        --retry-delay 1 \
        --retry-connrefused \
        "$health_url" 2>/dev/null || echo "000")
    if [[ "$http_status" =~ ^2 ]]; then
        http_check="true"
    elif [[ "$service" == "api-gateway" && "$http_status" == "503" ]]; then
        http_check="degraded"
    elif [[ "$http_status" == 000* && "$port_check" -gt 0 ]]; then
        http_check="assumed"
        log "‚ö†Ô∏è $service HTTP check returned 000 but port is open; assuming service is responding"
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã (2 –∏–∑ 3 –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏)
    local checks_passed=0
    [[ "$pm2_status" == "online" || "$pm2_status" == "not_found" ]] && checks_passed=$((checks_passed + 1))
    [[ "$port_check" -gt 0 ]] && checks_passed=$((checks_passed + 1))
    [[ "$http_check" == "true" || "$http_check" == "degraded" || "$http_check" == "assumed" ]] && checks_passed=$((checks_passed + 1))
    
    if [[ "$checks_passed" -ge 2 ]]; then
        return 0  # Healthy (2 of 3 checks passed)
    else
        log "üîç $service health check failed - PM2: $pm2_status, Port: $port_check, HTTP: $http_status ($http_check) (passed: $checks_passed/3)"
        return 1  # Unhealthy
    fi
}

trigger_service_restore() {
    local service="$1"
    local config="${CRITICAL_SERVICES[$service]}"
    local pm2_name=$(echo "$config" | cut -d: -f2)
    
    alert "Triggering auto-restore for $service (failures: ${FAILURE_COUNTS[$service]})"
    
    RESTART_COUNTS["$service"]=$((${RESTART_COUNTS["$service"]} + 1))
    
    case "$service" in
        "auth-service")
            /root/projects/beauty/deployment/auto-restore/restore-auth-service.sh &
            ;;
        "crm-api")
            /root/projects/beauty/deployment/auto-restore/restore-crm-api.sh &
            ;;
        "admin-panel")
            /root/projects/beauty/deployment/auto-restore/restore-admin-panel.sh &
            ;;
        "salon-crm")
            /root/projects/beauty/deployment/auto-restore/restore-salon-crm.sh &
            ;;
        "api-gateway")
            /root/projects/beauty/deployment/auto-restore/restore-api-gateway.sh &
            ;;
        "mcp-server")
            /root/projects/beauty/deployment/auto-restore/restore-mcp-server.sh &
            ;;
        "images-api")
            /root/projects/beauty/deployment/auto-restore/restore-images-api.sh &
            ;;
        *)
            alert "Unknown service for restore: $service"
            # Fallback: generic PM2 restart
            pm2 restart "$pm2_name" 2>/dev/null || true
            ;;
    esac
}

generate_status_report() {
    local report_file="/root/projects/beauty/logs/health-status-$(date +%Y%m%d_%H%M%S).json"
    
    cat > "$report_file" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "monitoring_duration": "$(($(date +%s) - START_TIME)) seconds",
    "services": {
EOF

    local first=true
    for service in "${!CRITICAL_SERVICES[@]}"; do
        if [ "$first" = false ]; then
            echo "," >> "$report_file"
        fi
        first=false
        
        local config="${CRITICAL_SERVICES[$service]}"
        local port=$(echo "$config" | cut -d: -f1)
        local pm2_name=$(echo "$config" | cut -d: -f2)
        local health_url=$(echo "$config" | cut -d: -f3)
        local pm2_restarts=$(pm2 jlist | jq ".[] | select(.name==\"$pm2_name\") | .pm2_env.restart_time // 0" 2>/dev/null || echo 0)
        
        cat >> "$report_file" << EOF
        "$service": {
            "port": $port,
            "pm2_name": "$pm2_name",
            "health_url": "$health_url",
            "last_status": "${LAST_STATUS[$service]}",
            "failure_count": ${FAILURE_COUNTS[$service]},
            "auto_restarts": ${RESTART_COUNTS[$service]},
            "pm2_restarts": $pm2_restarts,
            "current_status": "$(check_service_health "$service" && echo "healthy" || echo "unhealthy")"
        }
EOF
    done

    cat >> "$report_file" << EOF
    }
}
EOF

    log "üìä Status report generated: $report_file"
}

main_monitoring_loop() {
    log "üöÄ Starting Beauty Platform Health Monitor"
    log "üìã Monitoring ${#CRITICAL_SERVICES[@]} critical services"
    log "‚è±Ô∏è  Check interval: ${CHECK_INTERVAL}s, Failure threshold: $FAILURE_THRESHOLD"
    
    initialize_counters
    local cycle_count=0
    START_TIME=$(date +%s)
    
    log "‚è≥ Warmup: waiting 15 seconds before first health check"
    sleep 15

    while true; do
        cycle_count=$((cycle_count + 1))
        
        # –ö–∞–∂–¥—ã–π 10-–π —Ü–∏–∫–ª –¥–µ–ª–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        if (( cycle_count % 10 == 0 )); then
            log "üìä Health check cycle #$cycle_count"
            generate_status_report
        fi
        
        for service in "${!CRITICAL_SERVICES[@]}"; do
            if check_service_health "$service"; then
                # –°–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤
                if [[ "${LAST_STATUS[$service]}" != "healthy" ]]; then
                    log "‚úÖ $service is now healthy"
                fi
                FAILURE_COUNTS["$service"]=0
                LAST_STATUS["$service"]="healthy"
            else
                # –°–µ—Ä–≤–∏—Å –Ω–µ–∑–¥–æ—Ä–æ–≤
                FAILURE_COUNTS["$service"]=$((${FAILURE_COUNTS["$service"]} + 1))
                LAST_STATUS["$service"]="unhealthy"
                
                log "‚ùå $service failed health check (${FAILURE_COUNTS[$service]}/$FAILURE_THRESHOLD)"
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Ä–æ–≥–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                if (( ${FAILURE_COUNTS["$service"]} >= FAILURE_THRESHOLD )); then
                    trigger_service_restore "$service"
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                    FAILURE_COUNTS["$service"]=0
                    sleep 60  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                fi
            fi
        done
        
        sleep $CHECK_INTERVAL
    done
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'log "üõë Health monitor stopped"; exit 0' SIGTERM SIGINT

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "/root/projects/beauty/logs"

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
trap 'rm -f "$PID_FILE"; exit 0' SIGINT SIGTERM

main_monitoring_loop
