#!/bin/bash

# Smart Auto-Restore Manager v2.0
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# Author: Claude AI Assistant

set -e

SCRIPT_DIR="/root/beauty-platform/deployment/auto-restore"
LOG_DIR="/root/beauty-platform/logs/auto-restore"
CONFIG_FILE="$SCRIPT_DIR/restore-config.json"
PNPM_PATH="/root/.local/share/pnpm/pnpm"
MAX_RESTARTS=3
RESTART_WINDOW_MINUTES=60
ATTEMPTS_DIR="$SCRIPT_DIR/attempts"
ALERTS_DIR="$LOG_DIR/alerts"

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOG_DIR"

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
mkdir -p "$ATTEMPTS_DIR"

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
mkdir -p "$ALERTS_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
log_json() {
    local service="$1"
    local action="$2" 
    local status="$3"
    local message="$4"
    local error="$5"
    
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    local log_entry=$(cat <<EOF
{
  "timestamp": "$timestamp",
  "service": "$service",
  "action": "$action",
  "status": "$status",
  "message": "$message"$(if [ -n "$error" ]; then echo ",\"error\": \"$error\""; fi)
}
EOF
)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π —Ñ–∞–π–ª –∏ —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞
    echo "$log_entry" >> "$LOG_DIR/smart-restore.log"
    echo "$log_entry" >> "$LOG_DIR/$service.log"
    
    # –¢–∞–∫–∂–µ –æ–±—ã—á–Ω—ã–π –ª–æ–≥ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] SMART_RESTORE[$service]: $action - $status: $message" | tee -a "$LOG_DIR/readable.log"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
log() {
    local service="$1"
    local message="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] SMART_RESTORE[$service]: $message" | tee -a "$LOG_DIR/readable.log"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
send_critical_alert() {
    local service="$1"
    local message="$2"
    local alert_type="${3:-circuit_breaker}"
    
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    local readable_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –∞–ª–µ—Ä—Ç–∞
    local alert_file="$ALERTS_DIR/${service}_${alert_type}_$(date +%s).alert"
    
    cat > "$alert_file" << EOF
{
  "timestamp": "$timestamp",
  "service": "$service", 
  "alert_type": "$alert_type",
  "message": "$message",
  "severity": "critical",
  "requires_manual_intervention": true,
  "recovery_command": "$0 reset-circuit-breaker $service"
}
EOF
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    echo "[$readable_time] üö® CRITICAL ALERT: $service - $message" >> "$LOG_DIR/critical-alerts.log"
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    echo -e "\033[31;1müö® CRITICAL ALERT: $service\033[0m"
    echo -e "\033[33;1m‚ö†Ô∏è  $message\033[0m"
    echo -e "\033[36;1m‚ÑπÔ∏è  Recovery: $0 reset-circuit-breaker $service\033[0m"
    echo
    
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    # - –û—Ç–ø—Ä–∞–≤–∫—É Telegram —Å–æ–æ–±—â–µ–Ω–∏—è  
    # - Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    # - Integration —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

# –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ circuit breaker –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
reset_circuit_breaker() {
    local service="$1"
    
    if [ -z "$service" ]; then
        echo "‚ùå Error: Service name required"
        echo "Usage: $0 reset-circuit-breaker <service-name>"
        return 1
    fi
    
    local attempts_file="$ATTEMPTS_DIR/$service.attempts"
    
    if [ -f "$attempts_file" ]; then
        rm -f "$attempts_file"
        log_json "$service" "circuit_breaker_reset" "success" "Circuit breaker reset manually by user"
        echo "‚úÖ Circuit breaker reset for service: $service"
        echo "‚ÑπÔ∏è  Service can now be restored normally"
    else
        echo "‚ÑπÔ∏è  No circuit breaker found for service: $service (already clear)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ circuit breaker
show_circuit_breaker_status() {
    echo "üîç Circuit Breaker Status:"
    echo "=========================="
    
    local found_any=false
    for service in "${!SERVICES[@]}"; do
        local attempts_file="$ATTEMPTS_DIR/$service.attempts"
        if [ -f "$attempts_file" ]; then
            local attempt_count=$(wc -l < "$attempts_file")
            if [ "$attempt_count" -gt 0 ]; then
                found_any=true
                local last_attempt=$(tail -1 "$attempts_file")
                local last_time=$(date -d "@$last_attempt" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "unknown")
                
                if [ "$attempt_count" -ge "$MAX_RESTARTS" ]; then
                    echo "üö® $service: TRIPPED ($attempt_count/$MAX_RESTARTS attempts, last: $last_time)"
                    echo "   Recovery: $0 reset-circuit-breaker $service"
                else
                    echo "‚ö†Ô∏è  $service: $attempt_count/$MAX_RESTARTS attempts (last: $last_time)"
                fi
            fi
        fi
    done
    
    if [ "$found_any" = false ]; then
        echo "‚úÖ All circuit breakers are clear"
    fi
    
    echo
    echo "üìä Recent critical alerts:"
    if [ -f "$LOG_DIR/critical-alerts.log" ]; then
        tail -5 "$LOG_DIR/critical-alerts.log" || echo "   No recent alerts"
    else
        echo "   No alerts file found"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service_status() {
    local service="$1"
    local port="$2"
    local service_dir="$3"

    log_json "$service" "status_check" "started" "Checking service health"

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è PostgreSQL
    if [ "$service" == "postgresql" ]; then
        if pg_isready -h localhost -p "$port" -q; then
            log_json "$service" "health_check" "success" "PostgreSQL is ready for connections"
            return 0
        else
            log_json "$service" "health_check" "failed" "PostgreSQL is not responding to pg_isready"
            return 1
        fi
    fi

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Context7 MCP Server
    if [ "$service" == "context7" ]; then
        if curl -sf --connect-timeout 3 "http://localhost:$port/ping" >/dev/null 2>&1; then
            log_json "$service" "health_check" "success" "Context7 MCP Server responds to /ping"
            return 0
        else
            log_json "$service" "health_check" "failed" "Context7 MCP Server not responding to /ping"
            return 1
        fi
    fi

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    if ! lsof -i ":$port" -t >/dev/null 2>&1; then
        log_json "$service" "process_check" "failed" "No process found on port $port"
        return 2
    fi

    log_json "$service" "process_check" "success" "Process found on port $port"

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –æ—Ç–≤–µ—Ç
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è API Gateway, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å "degraded" (503)
    if [ "$service" == "api-gateway" ]; then
        # –í—ã–ø–æ–ª–Ω—è–µ–º curl –∏ –ø–æ–ª—É—á–∞–µ–º http_code
        http_code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 3 "http://localhost:$port/health")

        if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 503 ]; then
            log_json "$service" "health_check" "success" "API Gateway is responding with code $http_code (Healthy or Degraded)"
            return 0
        else
            log_json "$service" "health_check" "failed" "API Gateway responded with code $http_code"
            return 1
        fi
    fi

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
    if curl -sf --connect-timeout 3 "http://localhost:$port/health" >/dev/null 2>&1 || \
       curl -sf --connect-timeout 3 "http://localhost:$port" >/dev/null 2>&1; then
        log_json "$service" "health_check" "success" "Service responds to HTTP requests"
        return 0
    else
        log_json "$service" "health_check" "warning" "Process exists but HTTP not responding"
        return 1
    fi
}

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
diagnose_service() {
    local service="$1" 
    local port="$2"
    local service_dir="$3"
    
    log_json "$service" "diagnosis" "started" "Running comprehensive diagnosis"
    
    local issues=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -d "$service_dir" ]; then
        log_json "$service" "diagnosis" "error" "Service directory not found: $service_dir"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
    if [ ! -f "$service_dir/package.json" ]; then
        log_json "$service" "diagnosis" "error" "package.json not found in $service_dir"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
    if [ ! -d "$service_dir/node_modules" ]; then
        log_json "$service" "diagnosis" "warning" "node_modules not found - will need installation"
        ((issues++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    if netstat -tulpn 2>/dev/null | grep ":$port " | grep -v "$service" >/dev/null; then
        local blocking_process=$(netstat -tulpn 2>/dev/null | grep ":$port " | awk '{print $7}')
        log_json "$service" "diagnosis" "error" "Port $port blocked by: $blocking_process"
        ((issues++))
    fi
    
    log_json "$service" "diagnosis" "completed" "Found $issues potential issues"
    return $issues
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
safe_stop_service() {
    local service="$1"
    local port="$2"
    
    log_json "$service" "stop_attempt" "started" "Attempting graceful shutdown"
    
    # –ò—â–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
    local pid=$(lsof -t -i:"$port" 2>/dev/null || true)
    
    if [ -z "$pid" ]; then
        log_json "$service" "stop_attempt" "success" "Service already stopped"
        return 0
    fi
    
    # Graceful shutdown (SIGTERM)
    log_json "$service" "graceful_stop" "started" "Sending SIGTERM to PID $pid"
    kill -TERM "$pid" 2>/dev/null || true
    
    # –ñ–¥—ë–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
    for i in {1..10}; do
        if ! kill -0 "$pid" 2>/dev/null; then
            log_json "$service" "graceful_stop" "success" "Process stopped gracefully in ${i}s"
            return 0
        fi
        sleep 1
    done
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ (SIGKILL)
    log_json "$service" "force_stop" "started" "Graceful stop timeout, forcing kill"
    kill -KILL "$pid" 2>/dev/null || true
    sleep 2
    
    if ! kill -0 "$pid" 2>/dev/null; then
        log_json "$service" "force_stop" "success" "Process force-killed"
        return 0
    else
        log_json "$service" "force_stop" "failed" "Failed to kill process $pid"
        return 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
safe_install_deps() {
    local service="$1"
    local service_dir="$2"
    
    log_json "$service" "deps_install" "started" "Installing dependencies with pnpm"
    
    cd /root/beauty-platform
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pnpm
    if [ ! -f "$PNPM_PATH" ]; then
        log_json "$service" "deps_install" "error" "pnpm not found at $PNPM_PATH"
        return 1
    fi
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    rm -rf "$service_dir/node_modules" "$service_dir/package-lock.json" 2>/dev/null || true
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ pnpm —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    if timeout 300 "$PNPM_PATH" install --filter="*$(basename "$service_dir")*" 2>&1; then
        log_json "$service" "deps_install" "success" "Dependencies installed successfully"
        return 0
    else
        local exit_code=$?
        log_json "$service" "deps_install" "failed" "pnpm install failed" "exit_code: $exit_code"
        return 1
    fi
}

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
safe_start_service() {
    local service="$1"
    local port="$2"
    local service_dir="$3"
    local start_command="$4"
    
    log_json "$service" "start_attempt" "started" "Starting service with command: $start_command"
    
    cd "$service_dir"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ —Å –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π –ª–æ–≥–æ–≤
    local service_log="$LOG_DIR/${service}-service.log"
    nohup bash -c "$start_command" > "$service_log" 2>&1 &
    local service_pid=$!
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ (–¥–æ 30 —Å–µ–∫—É–Ω–¥)
    for i in {1..30}; do
        if lsof -i ":$port" -t >/dev/null 2>&1; then
            log_json "$service" "start_attempt" "success" "Service started on port $port (PID: $service_pid)"
            return 0
        fi
        sleep 1
    done
    
    log_json "$service" "start_attempt" "failed" "Service failed to start within 30 seconds"
    return 1
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
restore_service() {
    local service="$1"
    local port="$2"
    local service_dir="$3"
    local start_command="$4"

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å. –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤, –≤—ã—Ö–æ–¥–∏–º.
    if check_service_status "$service" "$port" "$service_dir"; then
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤
        rm -f "$ATTEMPTS_DIR/$service.attempts" 2>/dev/null || true
        log_json "$service" "restore_session" "skipped" "Service already healthy"
        return 0
    fi

    log_json "$service" "restore_session" "started" "Service is down, starting restore procedure"

    # --- CIRCUIT BREAKER LOGIC ---
    local attempts_file="$ATTEMPTS_DIR/$service.attempts"
    touch "$attempts_file" # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–Ω—å—à–µ, —á–µ–º RESTART_WINDOW_MINUTES
    local now=$(date +%s)
    local window_start=$(($now - ($RESTART_WINDOW_MINUTES * 60)))
    awk -v window_start="$window_start" '$1 >= window_start' "$attempts_file" > "$attempts_file.tmp" && mv "$attempts_file.tmp" "$attempts_file"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
    local attempt_count=$(wc -l < "$attempts_file")
    if [ "$attempt_count" -ge "$MAX_RESTARTS" ]; then
        local alert_message="Service has failed $attempt_count times in the last $RESTART_WINDOW_MINUTES minutes. Manual intervention required."
        log_json "$service" "circuit_breaker" "tripped" "Restore aborted. $alert_message"
        send_critical_alert "$service" "$alert_message" "circuit_breaker"
        return 1 # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    fi
    # --- END CIRCUIT BREAKER LOGIC ---

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è *–ø–µ—Ä–µ–¥* –µ–µ –Ω–∞—á–∞–ª–æ–º
    echo "$(date +%s)" >> "$attempts_file"
    log_json "$service" "restore_attempt" "logged" "Logging restore attempt #$((attempt_count + 1))"

    # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    diagnose_service "$service" "$port" "$service_dir" || true

    # 3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å "–∑–∞–≤–∏—Å")
    if ! safe_stop_service "$service" "$port"; then
        log_json "$service" "restore_session" "failed" "Failed to stop service safely"
        return 1
    fi

    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if [[ "$service" != "postgresql" ]]; then
        if [ ! -d "$service_dir/node_modules" ]; then
            if ! safe_install_deps "$service" "$service_dir"; then
                return 1
            fi
        fi
    fi

    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    if safe_start_service "$service" "$port" "$service_dir" "$start_command"; then
        log_json "$service" "restore_session" "success" "Service restored successfully"
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        rm -f "$attempts_file" 2>/dev/null || true
        return 0
    else
        log_json "$service" "restore_session" "failed" "Service failed to start after restore"
        return 1
    fi
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
declare -A SERVICES
SERVICES[landing-page]="6000:/root/beauty-platform/apps/landing-page:npm run dev"
SERVICES[admin-panel]="6002:/root/beauty-platform/apps/admin-panel:npm run dev"
SERVICES[salon-crm]="6001:/root/beauty-platform/apps/salon-crm:npm run dev"
SERVICES[client-portal]="6003:/root/beauty-platform/apps/client-booking:npm run build && npm start"
SERVICES[api-gateway]="6020:/root/beauty-platform/services/api-gateway:npm start"  
SERVICES[auth-service]="6021:/root/beauty-platform/services/auth-service:ENABLE_TRACING=false MFA_MASTER_KEY=49dd29bc186073af4bdb05f6fd074317a6045409f1ef540696ed05ad09b38c1b npx tsx src/server.ts"
SERVICES[mcp-server]="6025:/root/beauty-platform/services/mcp-server:npm run dev"
SERVICES[images-api]="6026:/root/beauty-platform/services/images-api:PORT=6026 node src/server.js"
SERVICES[crm-api]="6022:/root/beauty-platform/services/crm-api:npm run dev"
SERVICES[backup-service]="6027:/root/beauty-platform/services/backup-service:PORT=6027 node dist/server.js"
SERVICES[postgresql]="6100:/var/lib/postgresql/16/main:systemctl start postgresql"
SERVICES[context7]="6024:/root/context7:bun run dist/index.js --transport http --port 6024"
SERVICES[notification-service]="6028:/root/beauty-platform/services/notification-service:pnpm run dev"

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
case "${1:-help}" in
    "restore")
        service_name="$2"
        if [ -z "$service_name" ]; then
            echo "Usage: $0 restore <service-name>"
            echo "Available services: ${!SERVICES[@]}"
            exit 1
        fi
        
        if [ -z "${SERVICES[$service_name]}" ]; then
            echo "Unknown service: $service_name"
            exit 1
        fi
        
        IFS=':' read -r port service_dir start_command <<< "${SERVICES[$service_name]}"
        restore_service "$service_name" "$port" "$service_dir" "$start_command"
        ;;
        
    "status")
        service_name="$2"
        if [ -n "$service_name" ]; then
            if [ -z "${SERVICES[$service_name]}" ]; then
                echo "Unknown service: $service_name"
                exit 1
            fi
            IFS=':' read -r port service_dir start_command <<< "${SERVICES[$service_name]}"
            check_service_status "$service_name" "$port" "$service_dir"
        else
            for service in "${!SERVICES[@]}"; do
                IFS=':' read -r port service_dir start_command <<< "${SERVICES[$service]}"
                echo -n "$service: "
                if check_service_status "$service" "$port" "$service_dir" >/dev/null 2>&1; then
                    echo "‚úÖ HEALTHY"
                else
                    echo "‚ùå DOWN"
                fi
            done
        fi
        ;;

    "stop")
        service_name="$2"
        if [ -z "$service_name" ]; then
            echo "Usage: $0 stop <service-name>"
            echo "Available services: ${!SERVICES[@]}"
            exit 1
        fi

        if [ -z "${SERVICES[$service_name]}" ]; then
            echo "Unknown service: $service_name"
            exit 1
        fi

        IFS=':' read -r port service_dir start_command <<< "${SERVICES[$service_name]}"
        if safe_stop_service "$service_name" "$port"; then
            log_json "$service_name" "manual_stop" "success" "Service stopped by operator"
            echo "‚úÖ Service $service_name stopped"
        else
            log_json "$service_name" "manual_stop" "failed" "Failed to stop service manually"
            echo "‚ùå Failed to stop service $service_name"
            exit 1
        fi
        ;;

    "logs")
        service_name="$2"
        if [ -n "$service_name" ]; then
            if [ -f "$LOG_DIR/$service_name.log" ]; then
                tail -f "$LOG_DIR/$service_name.log"
            else
                echo "No logs found for service: $service_name"
            fi
        else
            tail -f "$LOG_DIR/readable.log"
        fi
        ;;
        
    "reset-circuit-breaker")
        service_name="$2"
        if [ -z "$service_name" ]; then
            echo "Usage: $0 reset-circuit-breaker <service-name>"
            echo "Available services: ${!SERVICES[@]}"
            exit 1
        fi
        
        if [ -z "${SERVICES[$service_name]}" ]; then
            echo "Unknown service: $service_name"
            exit 1
        fi
        
        reset_circuit_breaker "$service_name"
        ;;
        
    "circuit-breaker-status")
        service_name="$2"
        if [ -n "$service_name" ]; then
            if [ -z "${SERVICES[$service_name]}" ]; then
                echo "Unknown service: $service_name"
                exit 1
            fi
            show_circuit_breaker_status "$service_name"
        else
            echo "Circuit breaker status for all services:"
            echo "========================================"
            for service in "${!SERVICES[@]}"; do
                echo ""
                show_circuit_breaker_status "$service"
            done
        fi
        ;;
        
    "restore-all")
        echo "üöÄ Starting bulk restore of all failed services..."
        failed_count=0
        restored_count=0
        
        for service in "${!SERVICES[@]}"; do
            IFS=':' read -r port service_dir start_command <<< "${SERVICES[$service]}"
            
            echo -n "Checking $service... "
            if ! check_service_status "$service" "$port" "$service_dir" >/dev/null 2>&1; then
                echo "‚ùå DOWN - attempting restore"
                failed_count=$((failed_count + 1))
                
                if restore_service "$service" "$port" "$service_dir" "$start_command"; then
                    restored_count=$((restored_count + 1))
                    echo "  ‚úÖ $service restored successfully"
                else
                    echo "  ‚ùå $service restore failed"
                fi
            else
                echo "‚úÖ HEALTHY"
            fi
        done
        
        echo ""
        echo "üìä Bulk restore completed:"
        echo "  Failed services found: $failed_count"
        echo "  Successfully restored: $restored_count"
        echo "  Still failing: $((failed_count - restored_count))"
        ;;
        
    "help"|*)
        echo "Smart Auto-Restore Manager v3.0 - Enhanced Circuit Breaker Edition"
        echo ""
        echo "Usage: $0 <command> [service-name]"
        echo ""
        echo "Commands:"
        echo "  restore <service>         - Restore specific service"
        echo "  restore-all               - Restore all failed services (bulk operation)"
        echo "  status [service]          - Check service status"
        echo "  logs [service]            - Show logs"
        echo "  reset-circuit-breaker <service>  - Reset circuit breaker for service"
        echo "  circuit-breaker-status [service] - Show circuit breaker status"
        echo ""
        echo "Available services: ${!SERVICES[@]}"
        echo ""
        echo "Logs location: $LOG_DIR"
        echo "Alerts location: $ALERTS_DIR"
        echo ""
        echo "üîß Circuit Breaker Info:"
        echo "  Max restarts: $MAX_RESTARTS failures"
        echo "  Time window: $RESTART_WINDOW_MINUTES minutes"
        echo "  When triggered: Service stops auto-restoration + critical alert sent"
        ;;
esac
