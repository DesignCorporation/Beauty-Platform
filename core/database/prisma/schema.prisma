// Beauty Platform Database Schema
// Domain-Driven Design + Multi-tenant Architecture

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// CORE ENTITIES - Business Domain
// ========================================

// User Roles - Расширенная система ролей
enum UserRole {
  SUPER_ADMIN      // Администратор всей платформы
  SALON_OWNER      // Владелец салона
  MANAGER          // Менеджер салона (между Owner и Staff)
  STAFF_MEMBER     // Мастер
  RECEPTIONIST     // Администратор ресепшена
  ACCOUNTANT       // Бухгалтер салона
  CLIENT           // Клиент салона
}

// Status для различных сущностей
enum EntityStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

// Language Support
enum Language {
  RU // Русский
  EN // English
  PL // Polski
  UA // Українська
}

// Currency Support - включаем RUB временно для совместимости
enum Currency {
  USD // US Dollar
  EUR // Euro
  PLN // Польский злотый
  UAH // Украинская гривна
  RUB // Российский рубль (deprecated, но нужен для миграции)
}

// ========================================
// TENANTS - Мультитенантность
// ========================================

model Tenant {
  id          String   @id @default(cuid())
  slug        String   @unique // URL slug для салона
  name        String
  description String?
  
  // Contact Info
  email       String?
  phone       String?
  website     String?
  
  // Address
  country     String?
  city        String?
  address     String?
  postalCode  String?
  
  // Business Settings
  currency    Currency @default(PLN)  // Стартуем с Польши
  language    Language @default(RU)
  timezone    String   @default("Europe/Moscow")
  
  // Status
  status      EntityStatus @default(ACTIVE)
  isActive    Boolean      @default(true)
  
  // Relationships
  users       User[]
  clients     Client[]
  services    Service[]
  appointments Appointment[]
  invitations Invitation[]
  userSalonAccess UserSalonAccess[]
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("tenants")
}

// ========================================
// USERS - Система пользователей
// ========================================

model User {
  id        String   @id @default(cuid())
  
  // Tenant Isolation - КРИТИЧНО!
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  
  // Auth Info
  email     String   @unique
  password  String   // bcrypt hash
  
  // Personal Info
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  
  // Role & Permissions
  role      UserRole @default(CLIENT)
  
  // Staff Settings (for staff members)
  color     String?  // Personal color for calendar (hex)
  isActive  Boolean  @default(true)
  
  // Status
  status        EntityStatus @default(PENDING)
  emailVerified Boolean      @default(false)
  
  // Auth Tokens
  refreshTokens RefreshToken[]
  
  // MFA (Multi-Factor Authentication) - для SUPER_ADMIN
  mfaEnabled    Boolean  @default(false)
  mfaSecret     String?  // TOTP secret (encrypted)
  mfaBackupCodes String? // JSON array of hashed backup codes
  
  // Relationships
  createdAppointments  Appointment[] @relation("AppointmentCreatedBy")
  assignedAppointments Appointment[] @relation("AppointmentAssignedTo")
  sentInvitations      Invitation[]  @relation("InviterInvitations")
  salonAccess          UserSalonAccess[]
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// JWT Refresh Tokens
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("refresh_tokens")
}

// ========================================
// CLIENTS - Клиенты салонов
// ========================================

model Client {
  id       String @id @default(cuid())
  
  // Tenant Isolation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  // Personal Info
  name     String
  email    String?
  phone    String?
  
  // Additional Info
  notes    String?
  birthday DateTime?
  
  // Status
  status   EntityStatus @default(ACTIVE)
  
  // Relationships
  appointments Appointment[]
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([tenantId, email])
  @@unique([tenantId, phone])
  @@map("clients")
}

// ========================================
// SERVICES - Услуги салона
// ========================================

model Service {
  id          String @id @default(cuid())
  
  // Tenant Isolation
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  
  // Service Info
  name        String
  description String?
  duration    Int    // В минутах
  price       Decimal @db.Decimal(10, 2)
  
  // Status
  status      EntityStatus @default(ACTIVE)
  
  // Relationships
  appointments Appointment[]
  
  // Audit
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("services")
}

// ========================================
// APPOINTMENTS - Записи
// ========================================

enum AppointmentStatus {
  PENDING    // Ожидает подтверждения
  CONFIRMED  // Подтверждена
  IN_PROGRESS // В процессе
  COMPLETED  // Завершена
  CANCELLED  // Отменена
  NO_SHOW    // Не пришел
}

model Appointment {
  id              String            @id @default(cuid())
  appointmentNumber String          // Уникальный номер записи
  
  // Tenant Isolation
  tenantId        String
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  
  // Appointment Info
  date            DateTime          // Дата записи
  startTime       DateTime          // Время начала
  endTime         DateTime          // Время окончания
  
  // Relationships
  clientId        String
  client          Client            @relation(fields: [clientId], references: [id])
  
  serviceId       String
  service         Service           @relation(fields: [serviceId], references: [id])
  
  assignedToId    String?
  assignedTo      User?             @relation("AppointmentAssignedTo", fields: [assignedToId], references: [id])
  
  // Status & Notes
  status          AppointmentStatus @default(PENDING)
  notes           String?
  
  // Audit Trail
  createdById     String?
  createdBy       User?             @relation("AppointmentCreatedBy", fields: [createdById], references: [id])
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([tenantId, appointmentNumber])
  @@map("appointments")
}

// ========================================
// STAFF INVITATION SYSTEM
// ========================================

// Статусы приглашений
enum InviteStatus {
  PENDING   // Отправлено, ждем ответа
  ACCEPTED  // Принято мастером
  DECLINED  // Отклонено мастером
  EXPIRED   // Истек срок действия
  REVOKED   // Отозвано владельцем салона
}

// Приглашения для мастеров
model Invitation {
  id              String   @id @default(cuid())
  
  // Салон, который приглашает
  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  inviterUserId   String   // Кто отправил приглашение
  inviter         User     @relation("InviterInvitations", fields: [inviterUserId], references: [id])
  
  // Данные приглашаемого мастера
  masterEmail     String
  masterPhone     String?
  masterName      String
  personalMessage String?  // Личное сообщение от владельца
  
  // Настройки доступа
  role            UserRole @default(STAFF_MEMBER)
  permissions     String[] @default(["calendar.view", "appointments.manage"])
  
  // Статус и токены
  status          InviteStatus @default(PENDING)
  token           String   @unique @default(cuid())
  expiresAt       DateTime // Срок действия (7 дней)
  
  // Связь с созданным доступом
  userSalonAccess UserSalonAccess[]
  
  // Timestamps
  createdAt       DateTime @default(now())
  sentAt          DateTime?
  acceptedAt      DateTime?
  declinedAt      DateTime?
  
  @@map("invitations")
}

// Связь мастер-салон (многие-ко-многим)
model UserSalonAccess {
  id            String   @id @default(cuid())
  
  // Связи
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  
  // Права и роли
  role          UserRole
  permissions   String[] // Детальные разрешения
  isOwner       Boolean  @default(false)  // Владелец салона
  isActive      Boolean  @default(true)   // Активный сотрудник
  
  // Связь с приглашением
  invitationId  String?  // Ссылка на исходное приглашение
  invitation    Invitation? @relation(fields: [invitationId], references: [id])
  
  // Настройки работы
  priority      Int      @default(1)      // Приоритет салона (1 = основной)
  canSeeFinances Boolean @default(false)  // Доступ к финансам
  workingHours  Json?    // Рабочие часы в данном салоне
  
  // Timestamps
  createdAt     DateTime @default(now())
  lastActiveAt  DateTime @default(now())
  
  @@unique([userId, tenantId])
  @@map("user_salon_access")
}

// ========================================
// AUDIT & LOGGING
// ========================================

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}

model AuditLog {
  id          String      @id @default(cuid())
  
  // Tenant Context
  tenantId    String?
  
  // Action Info
  action      AuditAction
  entityType  String      // "User", "Appointment", etc.
  entityId    String?     // ID сущности
  
  // User Context
  userId      String?
  userRole    UserRole?
  
  // Changes
  oldValues   Json?       // Старые значения
  newValues   Json?       // Новые значения
  
  // Technical Info
  ipAddress   String?
  userAgent   String?
  
  // Timestamp
  createdAt   DateTime    @default(now())
  
  @@map("audit_logs")
}

// ========================================
// PAYMENT SERVICE - Stage 5 Models
// ========================================

// 💰 Платежи и транзакции
model Payment {
  id                     String       @id @default(cuid())
  tenantId               String       @map("tenant_id") // 🔐 КРИТИЧНО: Tenant isolation

  // Provider data (generic)
  provider               String       // stripe, paypal, etc.
  providerId             String?      // Provider's payment ID

  // Customer reference
  customerId             String?      @map("customer_id") // БД использует snake_case

  // Сумма и валюта (integer in cents/units)
  amount                 Int          // Amount in cents/units
  currency               String       @default("EUR") // EUR, PLN, USD

  // Статус
  status                 String       // PENDING, SUCCEEDED, FAILED, CANCELLED

  // Metadata
  metadata               Json?        // Дополнительные данные от Provider
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")

  // Relations
  refunds                Refund[]      // Payment can have multiple refunds
  events                 PaymentEvent[] // Payment can have multiple events
  invoiceEmails          InvoiceEmail[] // Payment can have multiple invoice emails

  @@index([tenantId])
  @@index([status])
  @@map("payments")
}

// 🧾 Инвойсы для PDF генерации
model Invoice {
  id                String    @id @default(cuid())
  tenantId          String    @map("tenant_id") // 🔐 КРИТИЧНО: Tenant isolation
  subscriptionId    String?
  paymentId         String?

  // Номер инвойса
  invoiceNumber     String    @unique

  // Суммы
  subtotal          Decimal   @db.Decimal(10,2)
  taxAmount         Decimal   @db.Decimal(10,2) @default(0)
  totalAmount       Decimal   @db.Decimal(10,2)
  currency          String    @default("EUR")

  // Периоды
  periodStart       DateTime
  periodEnd         DateTime
  dueDate           DateTime

  // Статус
  status            String    // DRAFT, SENT, PAID, OVERDUE, CANCELLED

  // PDF
  pdfUrl            String?   // URL к сгенерированному PDF

  // Metadata
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@index([tenantId])
  @@index([subscriptionId])
  @@index([invoiceNumber])
  @@index([status])
  @@map("invoices")
}

// 🔄 Возвраты средств (Stage 5)
model Refund {
  id                String    @id @default(cuid())
  tenantId          String    @map("tenant_id") // 🔐 КРИТИЧНО: Tenant isolation
  paymentId         String    @map("payment_id") // Reference to Payment

  // Provider refund data
  provider          String    // "stripe" | "paypal"
  providerRefundId  String?   @map("provider_refund_id") // Provider's refund ID

  // Amount and currency
  amount            Int       // Amount in cents/units
  currency          String    @default("EUR")

  // Status tracking
  status            String    @default("pending") // pending, succeeded, failed
  reason            String?   // Optional refund reason

  // Metadata
  metadata          Json?     // Additional provider data
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  payment           Payment?  @relation(fields: [paymentId], references: [id])
  events            PaymentEvent[] // For webhook deduplication

  @@index([tenantId])
  @@index([paymentId])
  @@index([providerRefundId])
  @@index([status])
  @@map("refunds")
}

// 📧 Email delivery tracking (Stage 5)
model InvoiceEmail {
  id               String    @id @default(uuid())
  tenantId         String    @map("tenant_id") // 🔐 КРИТИЧНО: Tenant isolation
  paymentId        String    @map("payment_id") // Reference to Payment

  // Email data
  to               String    // Recipient email address
  subject          String?   // Email subject
  status           String    @default("queued") // queued | sent | failed

  // Provider response
  providerResponse Json?     @map("provider_response") // Provider response data

  // Timestamps
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  payment          Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([paymentId])
  @@index([status])
  @@map("invoice_emails")
}

// 📝 Payment events for webhook deduplication (Stage 5)
model PaymentEvent {
  id            String    @id @default(cuid())
  tenantId      String?   @map("tenant_id") // Optional: events can be global

  // Provider event data
  provider      String    // "stripe" | "paypal"
  eventType     String    @map("event_type") // Provider event type
  eventId       String    @unique @map("event_id") // Provider event ID (for deduplication)

  // Related entities
  paymentId     String?   @map("payment_id") // Optional payment reference
  refundId      String?   @map("refund_id") // Optional refund reference

  // Event payload
  payload       Json      // Full webhook payload
  processed     Boolean   @default(false)

  // Metadata
  receivedAt    DateTime  @default(now()) @map("received_at")

  // Relations
  payment       Payment?  @relation(fields: [paymentId], references: [id])
  refund        Refund?   @relation(fields: [refundId], references: [id])

  @@index([eventId]) // For fast deduplication lookup
  @@index([provider, eventType])
  @@index([paymentId])
  @@index([refundId])
  @@map("payment_events")
}

// 🔑 Idempotency keys for API requests (24h TTL)
model IdempotencyKey {
  key          String    @id // Client-provided idempotency key (primary key in DB)
  tenantId     String    @map("tenant_id") // Tenant isolation
  requestHash  String    @map("request_hash") // SHA256 of request data
  response     Json      // Cached response
  expiresAt    DateTime  @map("expires_at") // Auto-cleanup after 24h
  createdAt    DateTime  @default(now()) @map("created_at")

  @@index([tenantId])       // Tenant filtering
  @@index([expiresAt])      // For cleanup queries
  @@map("idempotency_keys")
}