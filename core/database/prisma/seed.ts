// Beauty Platform Seed Data
// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

import { PrismaClient, UserRole, EntityStatus, Language, Currency, AppointmentStatus } from '@prisma/client'
import bcrypt from 'bcrypt'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding Beauty Platform database...')

  // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  await prisma.auditLog.deleteMany()
  await prisma.appointment.deleteMany()
  await prisma.service.deleteMany()
  await prisma.client.deleteMany()
  await prisma.refreshToken.deleteMany()
  await prisma.user.deleteMany()
  await prisma.tenant.deleteMany()

  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∞–ª–æ–Ω–∞ (Tenant)
  const salon = await prisma.tenant.create({
    data: {
      slug: 'beauty-test-salon',
      name: 'Beauty Test Salon',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      email: 'info@beauty-test-salon.ru',
      phone: '+7 (495) 123-45-67',
      country: '–†–æ—Å—Å–∏—è',
      city: '–ú–æ—Å–∫–≤–∞',
      address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
      postalCode: '123456',
      currency: Currency.RUB,
      language: Language.RU,
      timezone: 'Europe/Moscow',
      status: EntityStatus.ACTIVE,
      isActive: true
    }
  })

  console.log(`‚úÖ Created salon: ${salon.name}`)

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ Super Admin
  const superAdmin = await prisma.user.create({
    data: {
      email: 'admin@beauty-platform.com',
      password: await bcrypt.hash('admin123', 10),
      firstName: '–°—É–ø–µ—Ä',
      lastName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      role: UserRole.SUPER_ADMIN,
      status: EntityStatus.ACTIVE,
      emailVerified: true,
      isActive: true
    }
  })

  console.log(`‚úÖ Created Super Admin: ${superAdmin.email}`)

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∞–ª–æ–Ω–∞
  const salonOwner = await prisma.user.create({
    data: {
      tenantId: salon.id,
      email: 'owner@beauty-test-salon.ru',
      password: await bcrypt.hash('owner123', 10),
      firstName: '–ê–Ω–Ω–∞',
      lastName: '–í–ª–∞–¥–µ–ª–µ—Ü',
      phone: '+7 (495) 123-45-67',
      role: UserRole.SALON_OWNER,
      status: EntityStatus.ACTIVE,
      emailVerified: true,
      isActive: true
    }
  })

  console.log(`‚úÖ Created Salon Owner: ${salonOwner.email}`)

  // 4. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤
  const staff = [
    {
      email: 'master1@beauty-test-salon.ru',
      firstName: '–ú–∞—Ä–∏—è',
      lastName: '–ò–≤–∞–Ω–æ–≤–∞',
      color: '#ff6b6b',
      role: UserRole.STAFF_MEMBER
    },
    {
      email: 'master2@beauty-test-salon.ru',
      firstName: '–ï–ª–µ–Ω–∞',
      lastName: '–ü–µ—Ç—Ä–æ–≤–∞', 
      color: '#4ecdc4',
      role: UserRole.STAFF_MEMBER
    },
    {
      email: 'manager@beauty-test-salon.ru',
      firstName: '–û–ª—å–≥–∞',
      lastName: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      color: '#45b7d1',
      role: UserRole.MANAGER
    },
    {
      email: 'reception@beauty-test-salon.ru',
      firstName: '–°–≤–µ—Ç–ª–∞–Ω–∞',
      lastName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      color: '#f9ca24',
      role: UserRole.RECEPTIONIST
    }
  ]

  const createdStaff = []
  for (const member of staff) {
    const staffMember = await prisma.user.create({
      data: {
        tenantId: salon.id,
        email: member.email,
        password: await bcrypt.hash('staff123', 10),
        firstName: member.firstName,
        lastName: member.lastName,
        color: member.color,
        role: member.role,
        status: EntityStatus.ACTIVE,
        emailVerified: true,
        isActive: true
      }
    })
    createdStaff.push(staffMember)
    console.log(`‚úÖ Created ${member.role}: ${staffMember.email}`)
  }

  // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const clients = [
    { name: '–ê–Ω–Ω–∞ –ö–ª–∏–µ–Ω—Ç–æ–≤–∞', email: 'anna@example.com', phone: '+7 (915) 123-11-11' },
    { name: '–ú–∞—Ä–∏—è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', email: 'maria@example.com', phone: '+7 (915) 123-22-22' },
    { name: '–ï–ª–µ–Ω–∞ –ö—Ä–∞—Å–æ—Ç–∫–∞', email: 'elena@example.com', phone: '+7 (915) 123-33-33' },
    { name: '–û–ª—å–≥–∞ –°—Ç–∏–ª—å–Ω–∞—è', email: 'olga@example.com', phone: '+7 (915) 123-44-44' },
    { name: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ú–æ–¥–Ω–∞—è', email: 'svetlana@example.com', phone: '+7 (915) 123-55-55' }
  ]

  const createdClients = []
  for (const client of clients) {
    const createdClient = await prisma.client.create({
      data: {
        tenantId: salon.id,
        name: client.name,
        email: client.email,
        phone: client.phone,
        status: EntityStatus.ACTIVE
      }
    })
    createdClients.push(createdClient)
  }

  console.log(`‚úÖ Created ${createdClients.length} clients`)

  // 6. –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥
  const services = [
    { name: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è', description: '–ú–æ–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Å', duration: 60, price: 2500 },
    { name: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', description: '–ü–æ–ª–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å', duration: 120, price: 5000 },
    { name: '–£–∫–ª–∞–¥–∫–∞', description: '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è —É–∫–ª–∞–¥–∫–∞', duration: 45, price: 1500 },
    { name: '–ú–∞–Ω–∏–∫—é—Ä', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä', duration: 90, price: 1800 },
    { name: '–ü–µ–¥–∏–∫—é—Ä', description: '–õ–µ—á–µ–±–Ω—ã–π –ø–µ–¥–∏–∫—é—Ä', duration: 120, price: 2200 },
    { name: '–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞', description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞', duration: 60, price: 3000 }
  ]

  const createdServices = []
  for (const service of services) {
    const createdService = await prisma.service.create({
      data: {
        tenantId: salon.id,
        name: service.name,
        description: service.description,
        duration: service.duration,
        price: service.price,
        status: EntityStatus.ACTIVE
      }
    })
    createdServices.push(createdService)
  }

  console.log(`‚úÖ Created ${createdServices.length} services`)

  // 7. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
  const today = new Date()
  const appointments = []

  for (let day = 0; day < 7; day++) {
    const appointmentDate = new Date(today)
    appointmentDate.setDate(today.getDate() + day)
    appointmentDate.setHours(10, 0, 0, 0) // –ù–∞—á–∏–Ω–∞–µ–º —Å 10:00

    for (let hour = 0; hour < 6; hour++) {
      const startTime = new Date(appointmentDate)
      startTime.setHours(10 + hour * 2) // –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞

      const service = createdServices[Math.floor(Math.random() * createdServices.length)]
      const client = createdClients[Math.floor(Math.random() * createdClients.length)]
      const staffMember = createdStaff[Math.floor(Math.random() * 2)] // –¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–∞

      const endTime = new Date(startTime)
      endTime.setMinutes(startTime.getMinutes() + service.duration)

      appointments.push({
        appointmentNumber: `BP-${Date.now()}-${appointments.length + 1}`,
        tenantId: salon.id,
        date: appointmentDate,
        startTime,
        endTime,
        clientId: client.id,
        serviceId: service.id,
        assignedToId: staffMember.id,
        status: day === 0 ? AppointmentStatus.IN_PROGRESS : 
                day < 3 ? AppointmentStatus.CONFIRMED : 
                AppointmentStatus.PENDING,
        notes: `–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å ${appointments.length + 1}`,
        createdById: salonOwner.id
      })
    }
  }

  const createdAppointments = []
  for (const appointment of appointments) {
    const createdAppointment = await prisma.appointment.create({
      data: appointment
    })
    createdAppointments.push(createdAppointment)
  }

  console.log(`‚úÖ Created ${createdAppointments.length} appointments`)

  // 8. –°–æ–∑–¥–∞–Ω–∏–µ audit –ª–æ–≥–æ–≤
  await prisma.auditLog.create({
    data: {
      tenantId: salon.id,
      action: 'CREATE',
      entityType: 'Tenant',
      entityId: salon.id,
      userId: superAdmin.id,
      userRole: UserRole.SUPER_ADMIN,
      newValues: { name: salon.name },
      ipAddress: '127.0.0.1',
      userAgent: 'Seed Script'
    }
  })

  console.log('‚úÖ Created audit logs')

  console.log(`
üéâ Seeding completed successfully!

üìä Created:
   ‚Ä¢ 1 salon (tenant): ${salon.name}
   ‚Ä¢ 1 Super Admin: admin@beauty-platform.com (password: admin123)
   ‚Ä¢ 1 Salon Owner: owner@beauty-test-salon.ru (password: owner123)
   ‚Ä¢ 4 Staff members (password: staff123):
     - master1@beauty-test-salon.ru (–ú–∞—Å—Ç–µ—Ä)
     - master2@beauty-test-salon.ru (–ú–∞—Å—Ç–µ—Ä)  
     - manager@beauty-test-salon.ru (–ú–µ–Ω–µ–¥–∂–µ—Ä)
     - reception@beauty-test-salon.ru (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
   ‚Ä¢ ${createdClients.length} clients
   ‚Ä¢ ${createdServices.length} services
   ‚Ä¢ ${createdAppointments.length} appointments

üîë Test Credentials:
   Super Admin: admin@beauty-platform.com / admin123
   Salon Owner: owner@beauty-test-salon.ru / owner123
   Staff: staff123 (for all staff members)

üè¢ Tenant ID: ${salon.id}
   Slug: ${salon.slug}
`)
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })