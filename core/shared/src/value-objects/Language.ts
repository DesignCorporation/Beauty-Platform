/**
 * @fileoverview Language Value Object
 * @description –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —è–∑—ã–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
 */

import { z } from 'zod';

// Supported languages
export const SUPPORTED_LANGUAGES = ['ru', 'pl', 'en', 'uk'] as const;
export type LanguageCode = typeof SUPPORTED_LANGUAGES[number];

// Language metadata
export const LANGUAGE_METADATA: Record<LanguageCode, {
  name: string;
  nativeName: string;
  flag: string;
  rtl: boolean;
}> = {
  ru: {
    name: 'Russian',
    nativeName: '–†—É—Å—Å–∫–∏–π',
    flag: 'üá∑üá∫',
    rtl: false
  },
  pl: {
    name: 'Polish',
    nativeName: 'Polski',
    flag: 'üáµüá±',
    rtl: false
  },
  en: {
    name: 'English',
    nativeName: 'English',
    flag: 'üá¨üáß',
    rtl: false
  },
  uk: {
    name: 'Ukrainian',
    nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
    flag: 'üá∫üá¶',
    rtl: false
  }
};

const LanguageSchema = z.object({
  code: z.enum(SUPPORTED_LANGUAGES)
});

/**
 * Language - Value Object –¥–ª—è —è–∑—ã–∫–æ–≤
 * Immutable –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 */
export class Language {
  private readonly _code: LanguageCode;

  constructor(code: LanguageCode) {
    const validated = LanguageSchema.parse({ code });
    this._code = validated.code;
  }

  public get code(): LanguageCode {
    return this._code;
  }

  public get name(): string {
    return LANGUAGE_METADATA[this._code].name;
  }

  public get nativeName(): string {
    return LANGUAGE_METADATA[this._code].nativeName;
  }

  public get flag(): string {
    return LANGUAGE_METADATA[this._code].flag;
  }

  public get isRtl(): boolean {
    return LANGUAGE_METADATA[this._code].rtl;
  }

  /**
   * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —è–∑—ã–∫–∏
   */
  public equals(other: Language): boolean {
    return this._code === other._code;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —è–∑—ã–∫
   */
  public static isSupported(code: string): code is LanguageCode {
    return SUPPORTED_LANGUAGES.includes(code as LanguageCode);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç Language –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public static fromString(code: string): Language {
    if (!this.isSupported(code)) {
      throw new Error(`Language '${code}' is not supported. Supported: ${SUPPORTED_LANGUAGES.join(', ')}`);
    }
    return new Language(code);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  public static getDefault(): Language {
    return new Language('ru');
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
   */
  public static getAllSupported(): Language[] {
    return SUPPORTED_LANGUAGES.map(code => new Language(code));
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  public toString(): string {
    return `${this.flag} ${this.nativeName} (${this.code})`;
  }

  /**
   * –î–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON
   */
  public toJSON(): { code: LanguageCode } {
    return {
      code: this._code
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç Language –∏–∑ JSON
   */
  public static fromJSON(json: { code: LanguageCode }): Language {
    return new Language(json.code);
  }
}